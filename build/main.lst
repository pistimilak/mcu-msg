GAS LISTING /tmp/cco7wVnW.s 			page 1


   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.thread_mcu_master_fnc.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 4D415354 		.string	"MASTER_MSG"
   6      45525F4D 
   6      534700
   7              	.LC1:
   8 000b 4765745F 		.string	"Get_Temp"
   8      54656D70 
   8      00
   9              	.LC2:
  10 0014 4D617374 		.string	"Master >> "
  10      6572203E 
  10      3E2000
  11              	.LC3:
  12 001f 534C4156 		.string	"SLAVE_MSG"
  12      455F4D53 
  12      4700
  13              	.LC4:
  14 0029 54656D70 		.string	"Temp"
  14      00
  15              	.LC5:
  16 002e 543100   		.string	"T1"
  17              		.section	.rodata.thread_mcu_master_fnc.str1.8,"aMS",@progbits,1
  18              		.align 8
  19              	.LC6:
  20 0000 4D617374 		.string	"Master >> T1 = %f (from Slave)\n"
  20      6572203E 
  20      3E205431 
  20      203D2025 
  20      66202866 
  21              		.section	.rodata.thread_mcu_master_fnc.str1.1
  22              	.LC7:
  23 0031 543200   		.string	"T2"
  24              		.section	.rodata.thread_mcu_master_fnc.str1.8
  25              		.align 8
  26              	.LC8:
  27 0020 4D617374 		.string	"Master >> T2 = %f (from Slave)\n"
  27      6572203E 
  27      3E205432 
  27      203D2025 
  27      66202866 
  28              		.section	.text.thread_mcu_master_fnc,"ax",@progbits
  29              		.globl	thread_mcu_master_fnc
  31              	thread_mcu_master_fnc:
  32              	.LFB69:
  33              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author Istvan Milak (istvan.milak@gmail.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2019-12-15
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright Copyright (c) 2019
GAS LISTING /tmp/cco7wVnW.s 			page 2


   9:src/main.c    ****  * 
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stdio.h>
  13:src/main.c    **** #include <stdlib.h>
  14:src/main.c    **** #include <string.h>
  15:src/main.c    **** #include <time.h>
  16:src/main.c    **** #include <unistd.h>
  17:src/main.c    **** #include <pthread.h>
  18:src/main.c    **** #include <string.h>
  19:src/main.c    **** #include "mcu_msg.h"
  20:src/main.c    **** 
  21:src/main.c    **** /*string printer on i386*/
  22:src/main.c    **** 
  23:src/main.c    **** char test_str1[] = "#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n
  24:src/main.c    **** \r@obj2  ($key21 =   -1.123456789; $key22   = 'val22'; $key23 = 1000; $key24 = 12.34)<CMD_last>}";
  25:src/main.c    **** 
  26:src/main.c    **** 
  27:src/main.c    **** typedef struct {
  28:src/main.c    ****     char *buff;
  29:src/main.c    ****     msg_size_t buff_size;
  30:src/main.c    **** } thread_arg;
  31:src/main.c    **** 
  32:src/main.c    **** 
  33:src/main.c    **** 
  34:src/main.c    **** pthread_mutex_t outp_lock;
  35:src/main.c    **** pthread_t thr_master, thr_slave;
  36:src/main.c    **** thread_arg common_buff;
  37:src/main.c    **** 
  38:src/main.c    **** void *thread_mcu_master_fnc(void *arg);
  39:src/main.c    **** void *thread_mcu_slave_fnc(void *arg);
  40:src/main.c    **** 
  41:src/main.c    **** 
  42:src/main.c    **** 
  43:src/main.c    **** int main()
  44:src/main.c    **** {
  45:src/main.c    ****     /*start the clock*/
  46:src/main.c    ****     clock_t begin = clock();
  47:src/main.c    ****     clock_t end;
  48:src/main.c    ****     double exec_time = 0.0;
  49:src/main.c    ****     
  50:src/main.c    **** 
  51:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  52:src/main.c    **** //                                 MCU-MSG Parser test                                       //
  53:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  54:src/main.c    **** 
  55:src/main.c    ****     msg_t msg;
  56:src/main.c    ****     msg_obj_t obj1, obj2;
  57:src/main.c    ****     msg_cmd_t cmd;
  58:src/main.c    ****     msg_hnd_t hnd = msg_hnd_create(putchar);
  59:src/main.c    ****     
  60:src/main.c    ****     printf("TEST mcu-msg-parser\n");
  61:src/main.c    ****     printf("===================\n");
  62:src/main.c    **** 
  63:src/main.c    ****     printf("test_str1 = \"%s\"\n\n", test_str1);
  64:src/main.c    **** 
  65:src/main.c    ****     //#############################################################################################
GAS LISTING /tmp/cco7wVnW.s 			page 3


  66:src/main.c    ****     printf(">> getting test_msg...\n");
  67:src/main.c    ****     msg = msg_get(test_str1, "test_msg", sizeof(test_str1));
  68:src/main.c    ****     if(msg_get_content(msg) != NULL) {
  69:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
  70:src/main.c    ****         hnd.print_str(msg.id);
  71:src/main.c    ****         printf(":");
  72:src/main.c    ****         hnd.print_str(msg.content);
  73:src/main.c    ****         printf("\n\n");
  74:src/main.c    ****     } else {
  75:src/main.c    ****         printf("message not found!\n\n");
  76:src/main.c    ****     }
  77:src/main.c    **** 
  78:src/main.c    ****     //#############################################################################################
  79:src/main.c    ****     printf(">> getting CMD1 cmd...\n");
  80:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
  81:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
  82:src/main.c    **** 
  83:src/main.c    ****     printf(">> getting CMD2 cmd...\n");
  84:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
  85:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
  86:src/main.c    **** 
  87:src/main.c    ****     printf(">> getting CMD_last cmd...\n");
  88:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
  89:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
  90:src/main.c    **** 
  91:src/main.c    ****     //#############################################################################################
  92:src/main.c    ****     printf(">> getting obj1...\n");
  93:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
  94:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
  96:src/main.c    ****     printf("\n\n");
  97:src/main.c    **** 
  98:src/main.c    ****     //#############################################################################################
  99:src/main.c    ****     printf(">> getting obj2...\n");
 100:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 101:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 103:src/main.c    ****     printf("\n\n");
 104:src/main.c    ****     
 105:src/main.c    ****     //#############################################################################################
 106:src/main.c    ****     printf(">> getting obj1->key11 integer...\n");
 107:src/main.c    ****     int ival = 0, res;
 108:src/main.c    ****     float fval = 0.0;
 109:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 110:src/main.c    ****     printf("r = %d ival = %d\n\n", res, ival);
 111:src/main.c    ****     
 112:src/main.c    ****     //#############################################################################################
 113:src/main.c    ****     printf(">> getting obj2->key21 float...\n");
 114:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 115:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 116:src/main.c    **** 
 117:src/main.c    ****     //#############################################################################################
 118:src/main.c    ****     printf(">> getting obj1->key12 string...\n");
 119:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 120:src/main.c    ****     if(msg_str_p(str) != NULL) {
 121:src/main.c    ****         hnd.print_str(str); printf(" len: %d\n\n", str.len);
 122:src/main.c    ****     } else {
GAS LISTING /tmp/cco7wVnW.s 			page 4


 123:src/main.c    ****         printf("error getting string\n\n");
 124:src/main.c    ****     }
 125:src/main.c    ****     
 126:src/main.c    ****     
 127:src/main.c    **** 
 128:src/main.c    **** 
 129:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 130:src/main.c    **** //                                 MCU-MSG Wrapper test                                      //
 131:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 132:src/main.c    **** #if MCU_MSG_USE_WRAPPER  
 133:src/main.c    **** 
 134:src/main.c    ****     printf("TEST mcu-msg-wrapper\n");
 135:src/main.c    ****     printf("====================\n");
 136:src/main.c    **** 
 137:src/main.c    ****     // msg_wrap_hnd_t wrapper_hnd = msg_wrapper_hnd_create(putchar);
 138:src/main.c    ****     msg_wrap_t msg_wrap;
 139:src/main.c    ****     msg_wrap_obj_t obj1_wrap, obj2_wrap;
 140:src/main.c    ****     msg_wrap_str_t str1, str2, str3;
 141:src/main.c    ****     msg_wrap_int_t i1, i2;
 142:src/main.c    ****     msg_wrap_float_t f1, f2;
 143:src/main.c    ****     msg_wrap_cmd_t cmd_wrap, cmd_rem;
 144:src/main.c    ****     msg_t msg_reparsed;
 145:src/main.c    ****     msg_obj_t obj_reparsed;
 146:src/main.c    ****     float f_val; 
 147:src/main.c    ****     int i_val;
 148:src/main.c    ****     
 149:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 150:src/main.c    ****     printf("Initialized msg: #"); hnd.print_str(msg_wrap.id); printf("\n\n");
 151:src/main.c    ****     
 152:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 153:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj1_wrap.id); printf("\n\n");
 154:src/main.c    **** 
 155:src/main.c    **** 
 156:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 158:src/main.c    ****     
 159:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 161:src/main.c    **** 
 162:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 164:src/main.c    **** 
 165:src/main.c    ****     /* Preapare object */
 166:src/main.c    ****     printf("Add '$str2', '$str3' to '@wrapped_obj1'...\n\n");
 167:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 168:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 169:src/main.c    **** 
 170:src/main.c    ****     printf("Add '@wrapped_obj1' to '#wrapped_msg'...\n\n");
 171:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 172:src/main.c    **** 
 173:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 174:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_wrap.cmd); printf(">\n\n");
 175:src/main.c    ****     
 176:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 177:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_rem.cmd); printf(">\n\n");
 178:src/main.c    **** 
 179:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
GAS LISTING /tmp/cco7wVnW.s 			page 5


 180:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i1.id); printf("=%d\n\n", i1.val);
 181:src/main.c    **** 
 182:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 183:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i2.id); printf("=%d\n\n", i2.val);
 184:src/main.c    ****     
 185:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 186:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f1.id); printf("=%.6f\n\n", f1.val);
 187:src/main.c    **** 
 188:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 189:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f2.id); printf("=%.6f\n\n", f2.val);
 190:src/main.c    **** 
 191:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 192:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj2_wrap.id); printf("\n\n");
 193:src/main.c    **** 
 194:src/main.c    ****     printf("Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n\n");
 195:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 196:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 197:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 198:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 199:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 200:src/main.c    **** 
 201:src/main.c    ****     printf("Add '<CMD_WRAP>' to '#wrapped_msg'...\n\n");
 202:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 203:src/main.c    **** 
 204:src/main.c    ****     printf("Add '@wrapped_obj2' to '#wrapped_msg'...\n\n");
 205:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 206:src/main.c    ****     
 207:src/main.c    ****     printf("Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n\n");
 208:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 209:src/main.c    **** 
 210:src/main.c    ****     printf("Removing $str2 from @wrapped_obj1...\n\n");
 211:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 212:src/main.c    ****     
 213:src/main.c    ****     printf("Removing $str1 from @wrapped_obj2...\n\n");
 214:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 215:src/main.c    **** 
 216:src/main.c    ****     printf("Removing $f1 from @wrapped_obj2...\n\n");
 217:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 218:src/main.c    **** 
 219:src/main.c    ****     printf("Removing $i2 from @wrapped_obj2...\n\n");
 220:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 221:src/main.c    **** 
 222:src/main.c    ****     printf("Removing @wrapped_obj1 from #wrapped_msg...\n\n");
 223:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 224:src/main.c    **** 
 225:src/main.c    ****     printf("Removing <CMD_REMOVABLE> from #wrapped_msg...\n\n");
 226:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 227:src/main.c    **** 
 228:src/main.c    ****     printf("Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n\n");
 229:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 230:src/main.c    **** 
 231:src/main.c    ****     printf("Wrapped message:\n");
 232:src/main.c    ****     printf("---------------\n\n");
 233:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 234:src/main.c    **** 
 235:src/main.c    **** 
 236:src/main.c    ****     printf("\n\n");
GAS LISTING /tmp/cco7wVnW.s 			page 6


 237:src/main.c    **** 
 238:src/main.c    ****     char buff[1000] = {0};
 239:src/main.c    ****     hnd.init_str_buff(buff, 1000);
 240:src/main.c    ****     hnd.enable_buff();
 241:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 242:src/main.c    ****     printf("Wrapped message buffered\n");
 243:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 244:src/main.c    ****     printf("Wrapped message (buffered again)\n");
 245:src/main.c    ****     hnd.disable_buff();
 246:src/main.c    **** 
 247:src/main.c    ****     printf("\n\n");
 248:src/main.c    ****     printf("Buffer content:\n");
 249:src/main.c    ****     printf("%s\n\n", buff);
 250:src/main.c    **** 
 251:src/main.c    ****     printf("Reparsing '#wrapped_msg' '@wrapped_obj2'...\n\n");
 252:src/main.c    ****     msg_reparsed = msg_get(buff, "wrapped_msg", 1000);
 253:src/main.c    ****     hnd.print_msg(msg_reparsed); printf("\n\n");
 254:src/main.c    ****     obj_reparsed = msg_parser_get_obj(msg_reparsed, "wrapped_obj2");
 255:src/main.c    ****     hnd.print_str(obj_reparsed.content); printf(" len: %d\n\n", obj_reparsed.content.len);
 256:src/main.c    **** 
 257:src/main.c    **** 
 258:src/main.c    ****     msg_parser_get_float(&f_val, obj_reparsed, "f2");
 259:src/main.c    ****     msg_parser_get_int(&i_val, obj_reparsed, "i1");
 260:src/main.c    ****     printf("reparsed $i = %d $f2 = %f\n\n", i_val, f_val);
 261:src/main.c    ****     printf("\n\n");
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    ****     /*Emulating master slave communication*/
 265:src/main.c    ****     
 266:src/main.c    ****     printf("Emulating a master - slave communaication:\n");
 267:src/main.c    ****     printf("-----------------------------------------\n\n");
 268:src/main.c    ****     memset(buff, 0, 1000);
 269:src/main.c    ****     common_buff.buff = buff;
 270:src/main.c    ****     common_buff.buff_size = 1000;
 271:src/main.c    **** 
 272:src/main.c    ****     if(pthread_mutex_init(&outp_lock, NULL)) return 0;
 273:src/main.c    ****     
 274:src/main.c    ****     pthread_create(&thr_master, NULL, thread_mcu_master_fnc, (void *) &common_buff);
 275:src/main.c    ****     pthread_create(&thr_slave, NULL, thread_mcu_slave_fnc, (void *) &common_buff);
 276:src/main.c    **** 
 277:src/main.c    **** 
 278:src/main.c    ****     pthread_join(thr_master, NULL);
 279:src/main.c    ****     pthread_join(thr_slave, NULL);
 280:src/main.c    ****     pthread_mutex_destroy(&outp_lock);
 281:src/main.c    **** #endif
 282:src/main.c    **** 
 283:src/main.c    ****     printf("\n\n");
 284:src/main.c    **** 
 285:src/main.c    ****     end = clock();
 286:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 287:src/main.c    ****     printf("Execution time: %f s\n", exec_time);
 288:src/main.c    ****     return 0;
 289:src/main.c    **** }
 290:src/main.c    **** 
 291:src/main.c    **** 
 292:src/main.c    **** 
 293:src/main.c    **** void *thread_mcu_master_fnc(void *arg)
GAS LISTING /tmp/cco7wVnW.s 			page 7


 294:src/main.c    **** {
  34              		.loc 1 294 0
  35              		.cfi_startproc
  36              	.LVL0:
  37 0000 55       		pushq	%rbp
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 6, -16
  41 0001 53       		pushq	%rbx
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 24
  44              		.cfi_offset 3, -24
  45 0002 4881EC18 		subq	$280, %rsp
  45      010000
  46              	.LCFI2:
  47              		.cfi_def_cfa_offset 304
  48 0009 4889FB   		movq	%rdi, %rbx
  49              		.loc 1 294 0
  50 000c 64488B04 		movq	%fs:40, %rax
  50      25280000 
  50      00
  51 0015 48898424 		movq	%rax, 264(%rsp)
  51      08010000 
  52 001d 31C0     		xorl	%eax, %eax
  53              	.LVL1:
 295:src/main.c    ****         thread_arg *buff = (thread_arg *) arg;
 296:src/main.c    ****         msg_hnd_t hnd;
 297:src/main.c    ****         msg_t msg_in;
 298:src/main.c    ****         msg_obj_t temp_obj;
 299:src/main.c    ****         msg_wrap_t msg_out;
 300:src/main.c    ****         msg_wrap_cmd_t cmd;
 301:src/main.c    **** 
 302:src/main.c    ****         float T1, T2;
 303:src/main.c    **** 
 304:src/main.c    ****         /*Create handler*/
 305:src/main.c    ****         hnd = msg_hnd_create(putchar);
  54              		.loc 1 305 0
  55 001f 488DBC24 		leaq	176(%rsp), %rdi
  55      B0000000 
  56              	.LVL2:
  57 0027 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
  57      000000
  58 002e E8000000 		call	msg_hnd_create@PLT
  58      00
  59              	.LVL3:
 306:src/main.c    **** 
 307:src/main.c    ****         /*init common string buffer*/
 308:src/main.c    ****         hnd.init_str_buff(buff->buff, buff->buff_size);
  60              		.loc 1 308 0
  61 0033 0FB77308 		movzwl	8(%rbx), %esi
  62 0037 488B3B   		movq	(%rbx), %rdi
  63 003a FF9424E8 		call	*232(%rsp)
  63      000000
  64              	.LVL4:
 309:src/main.c    ****         
 310:src/main.c    ****         /*Init message wrappeper*/
 311:src/main.c    ****         msg_out = msg_wrapper_init_msg("MASTER_MSG");
GAS LISTING /tmp/cco7wVnW.s 			page 8


  65              		.loc 1 311 0
  66 0041 4889E5   		movq	%rsp, %rbp
  67 0044 488D3500 		leaq	.LC0(%rip), %rsi
  67      000000
  68 004b 4889EF   		movq	%rbp, %rdi
  69 004e E8000000 		call	msg_wrapper_init_msg@PLT
  69      00
  70              	.LVL5:
  71 0053 488B0424 		movq	(%rsp), %rax
  72 0057 488B5424 		movq	8(%rsp), %rdx
  72      08
  73 005c 48898424 		movq	%rax, 144(%rsp)
  73      90000000 
  74 0064 48899424 		movq	%rdx, 152(%rsp)
  74      98000000 
  75 006c 488B4424 		movq	16(%rsp), %rax
  75      10
  76 0071 488B5424 		movq	24(%rsp), %rdx
  76      18
  77 0076 48898424 		movq	%rax, 160(%rsp)
  77      A0000000 
  78 007e 48899424 		movq	%rdx, 168(%rsp)
  78      A8000000 
 312:src/main.c    ****         
 313:src/main.c    ****         /*Init command*/
 314:src/main.c    ****         cmd = msg_wrapper_init_cmd("Get_Temp");
  79              		.loc 1 314 0
  80 0086 488D3500 		leaq	.LC1(%rip), %rsi
  80      000000
  81 008d 4889EF   		movq	%rbp, %rdi
  82 0090 E8000000 		call	msg_wrapper_init_cmd@PLT
  82      00
  83              	.LVL6:
  84 0095 488B0424 		movq	(%rsp), %rax
  85 0099 488B5424 		movq	8(%rsp), %rdx
  85      08
  86 009e 48894424 		movq	%rax, 48(%rsp)
  86      30
  87 00a3 48895424 		movq	%rdx, 56(%rsp)
  87      38
  88 00a8 488B4424 		movq	16(%rsp), %rax
  88      10
  89 00ad 48894424 		movq	%rax, 64(%rsp)
  89      40
 315:src/main.c    **** 
 316:src/main.c    ****         /*Add command to the message*/
 317:src/main.c    ****         msg_wrapper_add_cmd_to_msg(&msg_out, &cmd);
  90              		.loc 1 317 0
  91 00b2 488D7424 		leaq	48(%rsp), %rsi
  91      30
  92 00b7 488DBC24 		leaq	144(%rsp), %rdi
  92      90000000 
  93 00bf E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
  93      00
  94              	.LVL7:
 318:src/main.c    **** 
 319:src/main.c    ****         /*Enable string buffer and send message*/
GAS LISTING /tmp/cco7wVnW.s 			page 9


 320:src/main.c    ****         pthread_mutex_lock(&outp_lock); // LOCK
  95              		.loc 1 320 0
  96 00c4 488D3D00 		leaq	outp_lock(%rip), %rdi
  96      000000
  97 00cb E8000000 		call	pthread_mutex_lock@PLT
  97      00
  98              	.LVL8:
 321:src/main.c    ****         
 322:src/main.c    ****         hnd.enable_buff();
  99              		.loc 1 322 0
 100 00d0 FF9424D8 		call	*216(%rsp)
 100      000000
 101              	.LVL9:
 323:src/main.c    ****         hnd.print_wrapper_msg(msg_out);
 102              		.loc 1 323 0
 103 00d7 488BAC24 		movq	248(%rsp), %rbp
 103      F8000000 
 104 00df FFB424A8 		pushq	168(%rsp)
 104      000000
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 312
 107 00e6 FFB424A8 		pushq	168(%rsp)
 107      000000
 108              	.LCFI4:
 109              		.cfi_def_cfa_offset 320
 110 00ed FFB424A8 		pushq	168(%rsp)
 110      000000
 111              	.LCFI5:
 112              		.cfi_def_cfa_offset 328
 113 00f4 FFB424A8 		pushq	168(%rsp)
 113      000000
 114              	.LCFI6:
 115              		.cfi_def_cfa_offset 336
 116 00fb FFD5     		call	*%rbp
 117              	.LVL10:
 324:src/main.c    ****         hnd.disable_buff();
 118              		.loc 1 324 0
 119 00fd 4883C420 		addq	$32, %rsp
 120              	.LCFI7:
 121              		.cfi_def_cfa_offset 304
 122 0101 FF9424E0 		call	*224(%rsp)
 122      000000
 123              	.LVL11:
 124              	.LBB192:
 125              	.LBB193:
 126              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
GAS LISTING /tmp/cco7wVnW.s 			page 10


  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
GAS LISTING /tmp/cco7wVnW.s 			page 11


  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 127              		.loc 2 104 0
 128 0108 488D3500 		leaq	.LC2(%rip), %rsi
 128      000000
 129 010f BF010000 		movl	$1, %edi
 129      00
 130 0114 B8000000 		movl	$0, %eax
 130      00
 131 0119 E8000000 		call	__printf_chk@PLT
 131      00
 132              	.LVL12:
 133              	.LBE193:
 134              	.LBE192:
 325:src/main.c    ****         
 326:src/main.c    **** 
 327:src/main.c    ****         /*Print message to stdout*/
 328:src/main.c    ****         printf("Master >> ");
 329:src/main.c    ****         hnd.print_wrapper_msg(msg_out);
 135              		.loc 1 329 0
 136 011e FFB424A8 		pushq	168(%rsp)
 136      000000
 137              	.LCFI8:
GAS LISTING /tmp/cco7wVnW.s 			page 12


 138              		.cfi_def_cfa_offset 312
 139 0125 FFB424A8 		pushq	168(%rsp)
 139      000000
 140              	.LCFI9:
 141              		.cfi_def_cfa_offset 320
 142 012c FFB424A8 		pushq	168(%rsp)
 142      000000
 143              	.LCFI10:
 144              		.cfi_def_cfa_offset 328
 145 0133 FFB424A8 		pushq	168(%rsp)
 145      000000
 146              	.LCFI11:
 147              		.cfi_def_cfa_offset 336
 148 013a FFD5     		call	*%rbp
 149              	.LVL13:
 150              	.LBB194:
 151              	.LBB195:
 152              		.loc 2 104 0
 153 013c 4883C420 		addq	$32, %rsp
 154              	.LCFI12:
 155              		.cfi_def_cfa_offset 304
 156 0140 BF0A0000 		movl	$10, %edi
 156      00
 157 0145 E8000000 		call	putchar@PLT
 157      00
 158              	.LVL14:
 159              	.LBE195:
 160              	.LBE194:
 330:src/main.c    ****         printf("\n");
 331:src/main.c    **** 
 332:src/main.c    ****         pthread_mutex_unlock(&outp_lock); // UNLOCK
 161              		.loc 1 332 0
 162 014a 488D3D00 		leaq	outp_lock(%rip), %rdi
 162      000000
 163 0151 E8000000 		call	pthread_mutex_unlock@PLT
 163      00
 164              	.LVL15:
 165              	.L5:
 333:src/main.c    **** 
 334:src/main.c    ****         /*Polling the common buffer*/
 335:src/main.c    ****         while(1) {
 336:src/main.c    ****             
 337:src/main.c    ****             msg_in = msg_get(buff->buff, "SLAVE_MSG", buff->buff_size);
 166              		.loc 1 337 0
 167 0156 0FB74B08 		movzwl	8(%rbx), %ecx
 168 015a 488B33   		movq	(%rbx), %rsi
 169 015d 488D7C24 		leaq	80(%rsp), %rdi
 169      50
 170 0162 488D1500 		leaq	.LC3(%rip), %rdx
 170      000000
 171 0169 E8000000 		call	msg_get@PLT
 171      00
 172              	.LVL16:
 338:src/main.c    ****             if(msg_get_content(msg_in) != NULL) { // msg is arrived
 173              		.loc 1 338 0
 174 016e 48837C24 		cmpq	$0, 96(%rsp)
 174      6000
GAS LISTING /tmp/cco7wVnW.s 			page 13


 175 0174 750C     		jne	.L9
 339:src/main.c    ****                 
 340:src/main.c    ****                 pthread_mutex_lock(&outp_lock); // LOCK
 341:src/main.c    ****                 
 342:src/main.c    ****                 temp_obj = msg_parser_get_obj(msg_in, "Temp");
 343:src/main.c    **** 
 344:src/main.c    ****                 if(msg_get_content(temp_obj) != NULL) {
 345:src/main.c    ****                     
 346:src/main.c    ****                     if(msg_parser_get_float(&T1, temp_obj, "T1") != -1) {
 347:src/main.c    ****                     printf("Master >> T1 = %f (from Slave)\n", T1);
 348:src/main.c    ****                     }
 349:src/main.c    ****                     if(msg_parser_get_float(&T2, temp_obj, "T2") != -1) {
 350:src/main.c    ****                         printf("Master >> T2 = %f (from Slave)\n", T2);
 351:src/main.c    ****                     }
 352:src/main.c    ****                     
 353:src/main.c    ****                 }
 354:src/main.c    ****                 
 355:src/main.c    ****                 pthread_mutex_unlock(&outp_lock); // UNLOCK
 356:src/main.c    **** 
 357:src/main.c    ****                 break;
 358:src/main.c    ****             }
 359:src/main.c    ****             usleep(1000);
 176              		.loc 1 359 0
 177 0176 BFE80300 		movl	$1000, %edi
 177      00
 178 017b E8000000 		call	usleep@PLT
 178      00
 179              	.LVL17:
 337:src/main.c    ****             if(msg_get_content(msg_in) != NULL) { // msg is arrived
 180              		.loc 1 337 0
 181 0180 EBD4     		jmp	.L5
 182              	.L9:
 340:src/main.c    ****                 
 183              		.loc 1 340 0
 184 0182 488D3D00 		leaq	outp_lock(%rip), %rdi
 184      000000
 185 0189 E8000000 		call	pthread_mutex_lock@PLT
 185      00
 186              	.LVL18:
 342:src/main.c    **** 
 187              		.loc 1 342 0
 188 018e 488D7C24 		leaq	112(%rsp), %rdi
 188      70
 189 0193 FF742468 		pushq	104(%rsp)
 190              	.LCFI13:
 191              		.cfi_def_cfa_offset 312
 192 0197 FF742468 		pushq	104(%rsp)
 193              	.LCFI14:
 194              		.cfi_def_cfa_offset 320
 195 019b FF742468 		pushq	104(%rsp)
 196              	.LCFI15:
 197              		.cfi_def_cfa_offset 328
 198 019f FF742468 		pushq	104(%rsp)
 199              	.LCFI16:
 200              		.cfi_def_cfa_offset 336
 201 01a3 488D3500 		leaq	.LC4(%rip), %rsi
 201      000000
GAS LISTING /tmp/cco7wVnW.s 			page 14


 202 01aa E8000000 		call	msg_parser_get_obj@PLT
 202      00
 203              	.LVL19:
 344:src/main.c    ****                     
 204              		.loc 1 344 0
 205 01af 4883C420 		addq	$32, %rsp
 206              	.LCFI17:
 207              		.cfi_def_cfa_offset 304
 208 01b3 4883BC24 		cmpq	$0, 128(%rsp)
 208      80000000 
 208      00
 209 01bc 0F848A00 		je	.L3
 209      0000
 346:src/main.c    ****                     printf("Master >> T1 = %f (from Slave)\n", T1);
 210              		.loc 1 346 0
 211 01c2 488D7C24 		leaq	40(%rsp), %rdi
 211      28
 212 01c7 FFB42488 		pushq	136(%rsp)
 212      000000
 213              	.LCFI18:
 214              		.cfi_def_cfa_offset 312
 215 01ce FFB42488 		pushq	136(%rsp)
 215      000000
 216              	.LCFI19:
 217              		.cfi_def_cfa_offset 320
 218 01d5 FFB42488 		pushq	136(%rsp)
 218      000000
 219              	.LCFI20:
 220              		.cfi_def_cfa_offset 328
 221 01dc FFB42488 		pushq	136(%rsp)
 221      000000
 222              	.LCFI21:
 223              		.cfi_def_cfa_offset 336
 224 01e3 488D3500 		leaq	.LC5(%rip), %rsi
 224      000000
 225 01ea E8000000 		call	msg_parser_get_float@PLT
 225      00
 226              	.LVL20:
 227 01ef 4883C420 		addq	$32, %rsp
 228              	.LCFI22:
 229              		.cfi_def_cfa_offset 304
 230 01f3 3CFF     		cmpb	$-1, %al
 231 01f5 757E     		jne	.L10
 232              	.L4:
 349:src/main.c    ****                         printf("Master >> T2 = %f (from Slave)\n", T2);
 233              		.loc 1 349 0
 234 01f7 488D7C24 		leaq	44(%rsp), %rdi
 234      2C
 235 01fc FFB42488 		pushq	136(%rsp)
 235      000000
 236              	.LCFI23:
 237              		.cfi_def_cfa_offset 312
 238 0203 FFB42488 		pushq	136(%rsp)
 238      000000
 239              	.LCFI24:
 240              		.cfi_def_cfa_offset 320
 241 020a FFB42488 		pushq	136(%rsp)
GAS LISTING /tmp/cco7wVnW.s 			page 15


 241      000000
 242              	.LCFI25:
 243              		.cfi_def_cfa_offset 328
 244 0211 FFB42488 		pushq	136(%rsp)
 244      000000
 245              	.LCFI26:
 246              		.cfi_def_cfa_offset 336
 247 0218 488D3500 		leaq	.LC7(%rip), %rsi
 247      000000
 248 021f E8000000 		call	msg_parser_get_float@PLT
 248      00
 249              	.LVL21:
 250 0224 4883C420 		addq	$32, %rsp
 251              	.LCFI27:
 252              		.cfi_def_cfa_offset 304
 253 0228 3CFF     		cmpb	$-1, %al
 254 022a 7420     		je	.L3
 350:src/main.c    ****                     }
 255              		.loc 1 350 0
 256 022c 660FEFC0 		pxor	%xmm0, %xmm0
 257 0230 F30F5A44 		cvtss2sd	44(%rsp), %xmm0
 257      242C
 258              	.LVL22:
 259              	.LBB196:
 260              	.LBB197:
 261              		.loc 2 104 0
 262 0236 488D3500 		leaq	.LC8(%rip), %rsi
 262      000000
 263 023d BF010000 		movl	$1, %edi
 263      00
 264 0242 B8010000 		movl	$1, %eax
 264      00
 265 0247 E8000000 		call	__printf_chk@PLT
 265      00
 266              	.LVL23:
 267              	.L3:
 268              	.LBE197:
 269              	.LBE196:
 355:src/main.c    **** 
 270              		.loc 1 355 0
 271 024c 488D3D00 		leaq	outp_lock(%rip), %rdi
 271      000000
 272 0253 E8000000 		call	pthread_mutex_unlock@PLT
 272      00
 273              	.LVL24:
 360:src/main.c    ****         }
 361:src/main.c    **** 
 362:src/main.c    ****         return;
 363:src/main.c    **** }
 274              		.loc 1 363 0
 275 0258 488B9424 		movq	264(%rsp), %rdx
 275      08010000 
 276 0260 64483314 		xorq	%fs:40, %rdx
 276      25280000 
 276      00
 277 0269 752F     		jne	.L11
 278 026b 4881C418 		addq	$280, %rsp
GAS LISTING /tmp/cco7wVnW.s 			page 16


 278      010000
 279              	.LCFI28:
 280              		.cfi_remember_state
 281              		.cfi_def_cfa_offset 24
 282 0272 5B       		popq	%rbx
 283              	.LCFI29:
 284              		.cfi_def_cfa_offset 16
 285              	.LVL25:
 286 0273 5D       		popq	%rbp
 287              	.LCFI30:
 288              		.cfi_def_cfa_offset 8
 289 0274 C3       		ret
 290              	.LVL26:
 291              	.L10:
 292              	.LCFI31:
 293              		.cfi_restore_state
 347:src/main.c    ****                     }
 294              		.loc 1 347 0
 295 0275 660FEFC0 		pxor	%xmm0, %xmm0
 296 0279 F30F5A44 		cvtss2sd	40(%rsp), %xmm0
 296      2428
 297              	.LVL27:
 298              	.LBB198:
 299              	.LBB199:
 300              		.loc 2 104 0
 301 027f 488D3500 		leaq	.LC6(%rip), %rsi
 301      000000
 302 0286 BF010000 		movl	$1, %edi
 302      00
 303 028b B8010000 		movl	$1, %eax
 303      00
 304 0290 E8000000 		call	__printf_chk@PLT
 304      00
 305              	.LVL28:
 306 0295 E95DFFFF 		jmp	.L4
 306      FF
 307              	.LVL29:
 308              	.L11:
 309              	.LBE199:
 310              	.LBE198:
 311              		.loc 1 363 0
 312 029a E8000000 		call	__stack_chk_fail@PLT
 312      00
 313              	.LVL30:
 314              		.cfi_endproc
 315              	.LFE69:
 317              		.section	.rodata.thread_mcu_slave_fnc.str1.1,"aMS",@progbits,1
 318              	.LC11:
 319 0000 536C6176 		.string	"Slave: >> "
 319      653A203E 
 319      3E2000
 320              		.section	.text.thread_mcu_slave_fnc,"ax",@progbits
 321              		.globl	thread_mcu_slave_fnc
 323              	thread_mcu_slave_fnc:
 324              	.LFB70:
 364:src/main.c    **** 
 365:src/main.c    **** 
GAS LISTING /tmp/cco7wVnW.s 			page 17


 366:src/main.c    **** 
 367:src/main.c    **** void *thread_mcu_slave_fnc(void *arg)
 368:src/main.c    **** {
 325              		.loc 1 368 0
 326              		.cfi_startproc
 327              	.LVL31:
 328 0000 55       		pushq	%rbp
 329              	.LCFI32:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 6, -16
 332 0001 53       		pushq	%rbx
 333              	.LCFI33:
 334              		.cfi_def_cfa_offset 24
 335              		.cfi_offset 3, -24
 336 0002 4881EC68 		subq	$360, %rsp
 336      010000
 337              	.LCFI34:
 338              		.cfi_def_cfa_offset 384
 339 0009 4889FB   		movq	%rdi, %rbx
 340              		.loc 1 368 0
 341 000c 64488B04 		movq	%fs:40, %rax
 341      25280000 
 341      00
 342 0015 48898424 		movq	%rax, 344(%rsp)
 342      58010000 
 343 001d 31C0     		xorl	%eax, %eax
 344              	.LVL32:
 369:src/main.c    ****         thread_arg *buff = (thread_arg *) arg;
 370:src/main.c    ****         msg_hnd_t hnd;
 371:src/main.c    ****         msg_t msg_in;
 372:src/main.c    ****         msg_cmd_t cmd;
 373:src/main.c    ****         msg_wrap_obj_t temp_obj;
 374:src/main.c    ****         msg_wrap_t msg_out;
 375:src/main.c    ****         msg_wrap_float_t T1;
 376:src/main.c    ****         msg_wrap_float_t T2;
 377:src/main.c    **** 
 378:src/main.c    ****         /*Create handler*/
 379:src/main.c    ****         hnd = msg_hnd_create(putchar);
 345              		.loc 1 379 0
 346 001f 488DBC24 		leaq	256(%rsp), %rdi
 346      00010000 
 347              	.LVL33:
 348 0027 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 348      000000
 349 002e E8000000 		call	msg_hnd_create@PLT
 349      00
 350              	.LVL34:
 380:src/main.c    **** 
 381:src/main.c    ****         /*init common string buffer*/
 382:src/main.c    ****         hnd.init_str_buff(buff->buff, buff->buff_size);
 351              		.loc 1 382 0
 352 0033 0FB77308 		movzwl	8(%rbx), %esi
 353 0037 488B3B   		movq	(%rbx), %rdi
 354 003a FF942438 		call	*312(%rsp)
 354      010000
 355              	.LVL35:
 383:src/main.c    **** 
GAS LISTING /tmp/cco7wVnW.s 			page 18


 384:src/main.c    ****         /*Init message wrappeper*/
 385:src/main.c    ****         msg_out = msg_wrapper_init_msg("SLAVE_MSG");
 356              		.loc 1 385 0
 357 0041 488D7C24 		leaq	48(%rsp), %rdi
 357      30
 358 0046 488D3500 		leaq	.LC3(%rip), %rsi
 358      000000
 359 004d E8000000 		call	msg_wrapper_init_msg@PLT
 359      00
 360              	.LVL36:
 361 0052 488B4424 		movq	48(%rsp), %rax
 361      30
 362 0057 488B5424 		movq	56(%rsp), %rdx
 362      38
 363 005c 48894424 		movq	%rax, 112(%rsp)
 363      70
 364 0061 48895424 		movq	%rdx, 120(%rsp)
 364      78
 365 0066 488B4424 		movq	64(%rsp), %rax
 365      40
 366 006b 488B5424 		movq	72(%rsp), %rdx
 366      48
 367 0070 48898424 		movq	%rax, 128(%rsp)
 367      80000000 
 368 0078 48899424 		movq	%rdx, 136(%rsp)
 368      88000000 
 386:src/main.c    **** 
 387:src/main.c    ****         /*Init object*/
 388:src/main.c    ****         temp_obj = msg_wrapper_init_obj("Temp");
 369              		.loc 1 388 0
 370 0080 4889E5   		movq	%rsp, %rbp
 371 0083 488D3500 		leaq	.LC4(%rip), %rsi
 371      000000
 372 008a 4889EF   		movq	%rbp, %rdi
 373 008d E8000000 		call	msg_wrapper_init_obj@PLT
 373      00
 374              	.LVL37:
 375 0092 488B0424 		movq	(%rsp), %rax
 376 0096 488B5424 		movq	8(%rsp), %rdx
 376      08
 377 009b 48898424 		movq	%rax, 208(%rsp)
 377      D0000000 
 378 00a3 48899424 		movq	%rdx, 216(%rsp)
 378      D8000000 
 379 00ab 488B4424 		movq	16(%rsp), %rax
 379      10
 380 00b0 488B5424 		movq	24(%rsp), %rdx
 380      18
 381 00b5 48898424 		movq	%rax, 224(%rsp)
 381      E0000000 
 382 00bd 48899424 		movq	%rdx, 232(%rsp)
 382      E8000000 
 383 00c5 488B4424 		movq	32(%rsp), %rax
 383      20
 384 00ca 488B5424 		movq	40(%rsp), %rdx
 384      28
 385 00cf 48898424 		movq	%rax, 240(%rsp)
GAS LISTING /tmp/cco7wVnW.s 			page 19


 385      F0000000 
 386 00d7 48899424 		movq	%rdx, 248(%rsp)
 386      F8000000 
 389:src/main.c    **** 
 390:src/main.c    ****         /*Init Temperatures*/
 391:src/main.c    ****         T1 = msg_wrapper_init_float("T1", 32.45, 2);
 387              		.loc 1 391 0
 388 00df BA020000 		movl	$2, %edx
 388      00
 389 00e4 F30F1005 		movss	.LC9(%rip), %xmm0
 389      00000000 
 390 00ec 488D3500 		leaq	.LC5(%rip), %rsi
 390      000000
 391 00f3 4889EF   		movq	%rbp, %rdi
 392 00f6 E8000000 		call	msg_wrapper_init_float@PLT
 392      00
 393              	.LVL38:
 394 00fb 488B0424 		movq	(%rsp), %rax
 395 00ff 488B5424 		movq	8(%rsp), %rdx
 395      08
 396 0104 48898424 		movq	%rax, 144(%rsp)
 396      90000000 
 397 010c 48899424 		movq	%rdx, 152(%rsp)
 397      98000000 
 398 0114 488B4424 		movq	16(%rsp), %rax
 398      10
 399 0119 488B5424 		movq	24(%rsp), %rdx
 399      18
 400 011e 48898424 		movq	%rax, 160(%rsp)
 400      A0000000 
 401 0126 48899424 		movq	%rdx, 168(%rsp)
 401      A8000000 
 392:src/main.c    ****         T2 = msg_wrapper_init_float("T2", 29.34, 2);
 402              		.loc 1 392 0
 403 012e BA020000 		movl	$2, %edx
 403      00
 404 0133 F30F1005 		movss	.LC10(%rip), %xmm0
 404      00000000 
 405 013b 488D3500 		leaq	.LC7(%rip), %rsi
 405      000000
 406 0142 4889EF   		movq	%rbp, %rdi
 407 0145 E8000000 		call	msg_wrapper_init_float@PLT
 407      00
 408              	.LVL39:
 409 014a 488B0424 		movq	(%rsp), %rax
 410 014e 488B5424 		movq	8(%rsp), %rdx
 410      08
 411 0153 48898424 		movq	%rax, 176(%rsp)
 411      B0000000 
 412 015b 48899424 		movq	%rdx, 184(%rsp)
 412      B8000000 
 413 0163 488B4424 		movq	16(%rsp), %rax
 413      10
 414 0168 488B5424 		movq	24(%rsp), %rdx
 414      18
 415 016d 48898424 		movq	%rax, 192(%rsp)
 415      C0000000 
GAS LISTING /tmp/cco7wVnW.s 			page 20


 416 0175 48899424 		movq	%rdx, 200(%rsp)
 416      C8000000 
 393:src/main.c    **** 
 394:src/main.c    ****         msg_wrapper_add_float_to_obj(&temp_obj, &T1);
 417              		.loc 1 394 0
 418 017d 488DB424 		leaq	144(%rsp), %rsi
 418      90000000 
 419 0185 488DAC24 		leaq	208(%rsp), %rbp
 419      D0000000 
 420 018d 4889EF   		movq	%rbp, %rdi
 421 0190 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 421      00
 422              	.LVL40:
 395:src/main.c    ****         msg_wrapper_add_float_to_obj(&temp_obj, &T2);
 423              		.loc 1 395 0
 424 0195 488DB424 		leaq	176(%rsp), %rsi
 424      B0000000 
 425 019d 4889EF   		movq	%rbp, %rdi
 426 01a0 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 426      00
 427              	.LVL41:
 396:src/main.c    ****         msg_wrapper_add_object_to_msg(&msg_out, &temp_obj);
 428              		.loc 1 396 0
 429 01a5 488D7C24 		leaq	112(%rsp), %rdi
 429      70
 430 01aa 4889EE   		movq	%rbp, %rsi
 431 01ad E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 431      00
 432              	.LVL42:
 433 01b2 EB0A     		jmp	.L14
 434              	.LVL43:
 435              	.L13:
 397:src/main.c    **** 
 398:src/main.c    ****         /*Polling the commong buffer*/
 399:src/main.c    ****         while(1) {
 400:src/main.c    ****             
 401:src/main.c    ****             
 402:src/main.c    ****             
 403:src/main.c    ****             msg_in = msg_get(buff->buff, "MASTER_MSG", buff->buff_size);
 404:src/main.c    ****             
 405:src/main.c    **** 
 406:src/main.c    ****             if(msg_get_content(msg_in) != NULL) { //message arrived
 407:src/main.c    **** 
 408:src/main.c    ****                 
 409:src/main.c    **** 
 410:src/main.c    ****                 cmd = msg_parser_get_cmd(msg_in, "Get_Temp");
 411:src/main.c    ****                 if(msg_get_cmd_content(cmd) != NULL) { //command arrived
 412:src/main.c    **** 
 413:src/main.c    ****                     pthread_mutex_lock(&outp_lock); // LOCK
 414:src/main.c    **** 
 415:src/main.c    ****                     /*Send to the master*/
 416:src/main.c    ****                     hnd.enable_buff();
 417:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
 418:src/main.c    ****                     hnd.disable_buff();
 419:src/main.c    **** 
 420:src/main.c    ****                     /*Print to stdout*/
 421:src/main.c    ****                     printf("Slave: >> ");
GAS LISTING /tmp/cco7wVnW.s 			page 21


 422:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
 423:src/main.c    ****                     printf("\n");
 424:src/main.c    ****                     
 425:src/main.c    ****                     pthread_mutex_unlock(&outp_lock); // UNLOCK
 426:src/main.c    **** 
 427:src/main.c    ****                     break;
 428:src/main.c    ****                 }
 429:src/main.c    ****             }
 430:src/main.c    ****             usleep(1000);
 436              		.loc 1 430 0
 437 01b4 BFE80300 		movl	$1000, %edi
 437      00
 438 01b9 E8000000 		call	usleep@PLT
 438      00
 439              	.LVL44:
 440              	.L14:
 403:src/main.c    ****             
 441              		.loc 1 403 0
 442 01be 0FB74B08 		movzwl	8(%rbx), %ecx
 443 01c2 488B33   		movq	(%rbx), %rsi
 444 01c5 488D7C24 		leaq	80(%rsp), %rdi
 444      50
 445 01ca 488D1500 		leaq	.LC0(%rip), %rdx
 445      000000
 446 01d1 E8000000 		call	msg_get@PLT
 446      00
 447              	.LVL45:
 406:src/main.c    **** 
 448              		.loc 1 406 0
 449 01d6 48837C24 		cmpq	$0, 96(%rsp)
 449      6000
 450 01dc 74D6     		je	.L13
 410:src/main.c    ****                 if(msg_get_cmd_content(cmd) != NULL) { //command arrived
 451              		.loc 1 410 0
 452 01de FF742468 		pushq	104(%rsp)
 453              	.LCFI35:
 454              		.cfi_def_cfa_offset 392
 455 01e2 FF742468 		pushq	104(%rsp)
 456              	.LCFI36:
 457              		.cfi_def_cfa_offset 400
 458 01e6 FF742468 		pushq	104(%rsp)
 459              	.LCFI37:
 460              		.cfi_def_cfa_offset 408
 461 01ea FF742468 		pushq	104(%rsp)
 462              	.LCFI38:
 463              		.cfi_def_cfa_offset 416
 464 01ee 488D3D00 		leaq	.LC1(%rip), %rdi
 464      000000
 465 01f5 E8000000 		call	msg_parser_get_cmd@PLT
 465      00
 466              	.LVL46:
 411:src/main.c    **** 
 467              		.loc 1 411 0
 468 01fa 4883C420 		addq	$32, %rsp
 469              	.LCFI39:
 470              		.cfi_def_cfa_offset 384
 471 01fe 4885C0   		testq	%rax, %rax
GAS LISTING /tmp/cco7wVnW.s 			page 22


 472 0201 74B1     		je	.L13
 413:src/main.c    **** 
 473              		.loc 1 413 0
 474 0203 488D3D00 		leaq	outp_lock(%rip), %rdi
 474      000000
 475 020a E8000000 		call	pthread_mutex_lock@PLT
 475      00
 476              	.LVL47:
 416:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
 477              		.loc 1 416 0
 478 020f FF942428 		call	*296(%rsp)
 478      010000
 479              	.LVL48:
 417:src/main.c    ****                     hnd.disable_buff();
 480              		.loc 1 417 0
 481 0216 488B9C24 		movq	328(%rsp), %rbx
 481      48010000 
 482              	.LVL49:
 483 021e FFB42488 		pushq	136(%rsp)
 483      000000
 484              	.LCFI40:
 485              		.cfi_def_cfa_offset 392
 486 0225 FFB42488 		pushq	136(%rsp)
 486      000000
 487              	.LCFI41:
 488              		.cfi_def_cfa_offset 400
 489 022c FFB42488 		pushq	136(%rsp)
 489      000000
 490              	.LCFI42:
 491              		.cfi_def_cfa_offset 408
 492 0233 FFB42488 		pushq	136(%rsp)
 492      000000
 493              	.LCFI43:
 494              		.cfi_def_cfa_offset 416
 495 023a FFD3     		call	*%rbx
 496              	.LVL50:
 418:src/main.c    **** 
 497              		.loc 1 418 0
 498 023c 4883C420 		addq	$32, %rsp
 499              	.LCFI44:
 500              		.cfi_def_cfa_offset 384
 501 0240 FF942430 		call	*304(%rsp)
 501      010000
 502              	.LVL51:
 503              	.LBB200:
 504              	.LBB201:
 505              		.loc 2 104 0
 506 0247 488D3500 		leaq	.LC11(%rip), %rsi
 506      000000
 507 024e BF010000 		movl	$1, %edi
 507      00
 508 0253 B8000000 		movl	$0, %eax
 508      00
 509 0258 E8000000 		call	__printf_chk@PLT
 509      00
 510              	.LVL52:
 511              	.LBE201:
GAS LISTING /tmp/cco7wVnW.s 			page 23


 512              	.LBE200:
 422:src/main.c    ****                     printf("\n");
 513              		.loc 1 422 0
 514 025d FFB42488 		pushq	136(%rsp)
 514      000000
 515              	.LCFI45:
 516              		.cfi_def_cfa_offset 392
 517 0264 FFB42488 		pushq	136(%rsp)
 517      000000
 518              	.LCFI46:
 519              		.cfi_def_cfa_offset 400
 520 026b FFB42488 		pushq	136(%rsp)
 520      000000
 521              	.LCFI47:
 522              		.cfi_def_cfa_offset 408
 523 0272 FFB42488 		pushq	136(%rsp)
 523      000000
 524              	.LCFI48:
 525              		.cfi_def_cfa_offset 416
 526 0279 FFD3     		call	*%rbx
 527              	.LVL53:
 528              	.LBB202:
 529              	.LBB203:
 530              		.loc 2 104 0
 531 027b 4883C420 		addq	$32, %rsp
 532              	.LCFI49:
 533              		.cfi_def_cfa_offset 384
 534 027f BF0A0000 		movl	$10, %edi
 534      00
 535 0284 E8000000 		call	putchar@PLT
 535      00
 536              	.LVL54:
 537              	.LBE203:
 538              	.LBE202:
 425:src/main.c    **** 
 539              		.loc 1 425 0
 540 0289 488D3D00 		leaq	outp_lock(%rip), %rdi
 540      000000
 541 0290 E8000000 		call	pthread_mutex_unlock@PLT
 541      00
 542              	.LVL55:
 431:src/main.c    ****         }
 432:src/main.c    **** 
 433:src/main.c    ****         return;
 434:src/main.c    **** 
 435:src/main.c    **** }...
 543              		.loc 1 435 0
 544 0295 488B9424 		movq	344(%rsp), %rdx
 544      58010000 
 545 029d 64483314 		xorq	%fs:40, %rdx
 545      25280000 
 545      00
 546 02a6 750A     		jne	.L18
 547 02a8 4881C468 		addq	$360, %rsp
 547      010000
 548              	.LCFI50:
 549              		.cfi_remember_state
GAS LISTING /tmp/cco7wVnW.s 			page 24


 550              		.cfi_def_cfa_offset 24
 551 02af 5B       		popq	%rbx
 552              	.LCFI51:
 553              		.cfi_def_cfa_offset 16
 554 02b0 5D       		popq	%rbp
 555              	.LCFI52:
 556              		.cfi_def_cfa_offset 8
 557 02b1 C3       		ret
 558              	.L18:
 559              	.LCFI53:
 560              		.cfi_restore_state
 561 02b2 E8000000 		call	__stack_chk_fail@PLT
 561      00
 562              	.LVL56:
 563              		.cfi_endproc
 564              	.LFE70:
 566              		.section	.rodata.main.str1.1,"aMS",@progbits,1
 567              	.LC12:
 568 0000 54727565 		.string	"True"
 568      00
 569              	.LC13:
 570 0005 46616C73 		.string	"False"
 570      6500
 571              	.LC14:
 572 000b 54455354 		.string	"TEST mcu-msg-parser"
 572      206D6375 
 572      2D6D7367 
 572      2D706172 
 572      73657200 
 573              	.LC15:
 574 001f 3D3D3D3D 		.string	"==================="
 574      3D3D3D3D 
 574      3D3D3D3D 
 574      3D3D3D3D 
 574      3D3D3D00 
 575              	.LC16:
 576 0033 74657374 		.string	"test_str1 = \"%s\"\n\n"
 576      5F737472 
 576      31203D20 
 576      22257322 
 576      0A0A00
 577              	.LC17:
 578 0046 3E3E2067 		.string	">> getting test_msg..."
 578      65747469 
 578      6E672074 
 578      6573745F 
 578      6D73672E 
 579              	.LC18:
 580 005d 74657374 		.string	"test_msg"
 580      5F6D7367 
 580      00
 581              		.section	.rodata.main.str1.8,"aMS",@progbits,1
 582              		.align 8
 583              	.LC19:
 584 0000 6D73672E 		.string	"msg.id_len: %d msg.content_len: %d\n"
 584      69645F6C 
 584      656E3A20 
GAS LISTING /tmp/cco7wVnW.s 			page 25


 584      2564206D 
 584      73672E63 
 585              		.section	.rodata.main.str1.1
 586              	.LC20:
 587 0066 0A00     		.string	"\n"
 588              	.LC21:
 589 0068 6D657373 		.string	"message not found!\n"
 589      61676520 
 589      6E6F7420 
 589      666F756E 
 589      64210A00 
 590              	.LC22:
 591 007c 3E3E2067 		.string	">> getting CMD1 cmd..."
 591      65747469 
 591      6E672043 
 591      4D443120 
 591      636D642E 
 592              	.LC23:
 593 0093 434D4431 		.string	"CMD1"
 593      00
 594              	.LC24:
 595 0098 25730A0A 		.string	"%s\n\n"
 595      00
 596              	.LC25:
 597 009d 3E3E2067 		.string	">> getting CMD2 cmd..."
 597      65747469 
 597      6E672043 
 597      4D443220 
 597      636D642E 
 598              	.LC26:
 599 00b4 434D4432 		.string	"CMD2"
 599      00
 600              	.LC27:
 601 00b9 3E3E2067 		.string	">> getting CMD_last cmd..."
 601      65747469 
 601      6E672043 
 601      4D445F6C 
 601      61737420 
 602              	.LC28:
 603 00d4 434D445F 		.string	"CMD_last"
 603      6C617374 
 603      00
 604              	.LC29:
 605 00dd 3E3E2067 		.string	">> getting obj1..."
 605      65747469 
 605      6E67206F 
 605      626A312E 
 605      2E2E00
 606              	.LC30:
 607 00f0 6F626A31 		.string	"obj1"
 607      00
 608              		.section	.rodata.main.str1.8
 609 0024 00000000 		.align 8
 610              	.LC31:
 611 0028 6F626A31 		.string	"obj1.id_len: %d obj1.content_len: %d\n"
 611      2E69645F 
 611      6C656E3A 
GAS LISTING /tmp/cco7wVnW.s 			page 26


 611      20256420 
 611      6F626A31 
 612              		.section	.rodata.main.str1.1
 613              	.LC32:
 614 00f5 3E3E2067 		.string	">> getting obj2..."
 614      65747469 
 614      6E67206F 
 614      626A322E 
 614      2E2E00
 615              	.LC33:
 616 0108 6F626A32 		.string	"obj2"
 616      00
 617              		.section	.rodata.main.str1.8
 618 004e 0000     		.align 8
 619              	.LC34:
 620 0050 6F626A32 		.string	"obj2.id_len: %d obj2.content_len: %d\n"
 620      2E69645F 
 620      6C656E3A 
 620      20256420 
 620      6F626A32 
 621 0076 0000     		.align 8
 622              	.LC35:
 623 0078 3E3E2067 		.string	">> getting obj1->key11 integer..."
 623      65747469 
 623      6E67206F 
 623      626A312D 
 623      3E6B6579 
 624              		.section	.rodata.main.str1.1
 625              	.LC37:
 626 010d 6B657931 		.string	"key11"
 626      3100
 627              	.LC38:
 628 0113 72203D20 		.string	"r = %d ival = %d\n\n"
 628      25642069 
 628      76616C20 
 628      3D202564 
 628      0A0A00
 629              		.section	.rodata.main.str1.8
 630 009a 00000000 		.align 8
 630      0000
 631              	.LC39:
 632 00a0 3E3E2067 		.string	">> getting obj2->key21 float..."
 632      65747469 
 632      6E67206F 
 632      626A322D 
 632      3E6B6579 
 633              		.section	.rodata.main.str1.1
 634              	.LC40:
 635 0126 6B657932 		.string	"key21"
 635      3100
 636              	.LC41:
 637 012c 72203D20 		.string	"r = %d fval = %.11f\n\n"
 637      25642066 
 637      76616C20 
 637      3D20252E 
 637      3131660A 
 638              		.section	.rodata.main.str1.8
GAS LISTING /tmp/cco7wVnW.s 			page 27


 639              		.align 8
 640              	.LC42:
 641 00c0 3E3E2067 		.string	">> getting obj1->key12 string..."
 641      65747469 
 641      6E67206F 
 641      626A312D 
 641      3E6B6579 
 642              		.section	.rodata.main.str1.1
 643              	.LC43:
 644 0142 6B657931 		.string	"key12"
 644      3200
 645              	.LC44:
 646 0148 206C656E 		.string	" len: %d\n\n"
 646      3A202564 
 646      0A0A00
 647              	.LC45:
 648 0153 6572726F 		.string	"error getting string\n"
 648      72206765 
 648      7474696E 
 648      67207374 
 648      72696E67 
 649              	.LC46:
 650 0169 54455354 		.string	"TEST mcu-msg-wrapper"
 650      206D6375 
 650      2D6D7367 
 650      2D777261 
 650      70706572 
 651              	.LC47:
 652 017e 3D3D3D3D 		.string	"===================="
 652      3D3D3D3D 
 652      3D3D3D3D 
 652      3D3D3D3D 
 652      3D3D3D3D 
 653              	.LC48:
 654 0193 77726170 		.string	"wrapped_msg"
 654      7065645F 
 654      6D736700 
 655              	.LC49:
 656 019f 496E6974 		.string	"Initialized msg: #"
 656      69616C69 
 656      7A656420 
 656      6D73673A 
 656      202300
 657              	.LC50:
 658 01b2 77726170 		.string	"wrapped_obj1"
 658      7065645F 
 658      6F626A31 
 658      00
 659              	.LC51:
 660 01bf 496E6974 		.string	"Initialized obj: @"
 660      69616C69 
 660      7A656420 
 660      6F626A3A 
 660      204000
 661              	.LC52:
 662 01d2 54686973 		.string	"This is \"string 1\""
 662      20697320 
GAS LISTING /tmp/cco7wVnW.s 			page 28


 662      22737472 
 662      696E6720 
 662      312200
 663              	.LC53:
 664 01e5 73747231 		.string	"str1"
 664      00
 665              	.LC54:
 666 01ea 496E6974 		.string	"Initialized str: $"
 666      69616C69 
 666      7A656420 
 666      7374723A 
 666      202400
 667              	.LC55:
 668 01fd 54686973 		.string	"This is 'string 2'"
 668      20697320 
 668      27737472 
 668      696E6720 
 668      322700
 669              	.LC56:
 670 0210 73747232 		.string	"str2"
 670      00
 671              	.LC57:
 672 0215 2E2E2E2E 		.string	".... \"string 3\""
 672      20227374 
 672      72696E67 
 672      20332200 
 673              	.LC58:
 674 0225 73747233 		.string	"str3"
 674      00
 675              		.section	.rodata.main.str1.8
 676 00e1 00000000 		.align 8
 676      000000
 677              	.LC59:
 678 00e8 41646420 		.string	"Add '$str2', '$str3' to '@wrapped_obj1'...\n"
 678      27247374 
 678      7232272C 
 678      20272473 
 678      74723327 
 679 0114 00000000 		.align 8
 680              	.LC60:
 681 0118 41646420 		.string	"Add '@wrapped_obj1' to '#wrapped_msg'...\n"
 681      27407772 
 681      61707065 
 681      645F6F62 
 681      6A312720 
 682              		.section	.rodata.main.str1.1
 683              	.LC61:
 684 022a 434D445F 		.string	"CMD_WRAP"
 684      57524150 
 684      00
 685              	.LC62:
 686 0233 496E6974 		.string	"Initialized cmd: <"
 686      69616C69 
 686      7A656420 
 686      636D643A 
 686      203C00
 687              	.LC63:
GAS LISTING /tmp/cco7wVnW.s 			page 29


 688 0246 3E0A00   		.string	">\n"
 689              	.LC64:
 690 0249 434D445F 		.string	"CMD_REMOVEABLE"
 690      52454D4F 
 690      56454142 
 690      4C4500
 691              	.LC65:
 692 0258 693100   		.string	"i1"
 693              	.LC66:
 694 025b 496E6974 		.string	"Initialized int: $"
 694      69616C69 
 694      7A656420 
 694      696E743A 
 694      202400
 695              	.LC67:
 696 026e 3D25640A 		.string	"=%d\n\n"
 696      0A00
 697              	.LC68:
 698 0274 693200   		.string	"i2"
 699              	.LC69:
 700 0277 663100   		.string	"f1"
 701              	.LC71:
 702 027a 496E6974 		.string	"Initialized float: $"
 702      69616C69 
 702      7A656420 
 702      666C6F61 
 702      743A2024 
 703              	.LC72:
 704 028f 3D252E36 		.string	"=%.6f\n\n"
 704      660A0A00 
 705              	.LC73:
 706 0297 663200   		.string	"f2"
 707              	.LC75:
 708 029a 77726170 		.string	"wrapped_obj2"
 708      7065645F 
 708      6F626A32 
 708      00
 709              		.section	.rodata.main.str1.8
 710 0142 00000000 		.align 8
 710      0000
 711              	.LC76:
 712 0148 41646420 		.string	"Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n"
 712      27246931 
 712      272C2027 
 712      24693227 
 712      2C202724 
 713 0187 00       		.align 8
 714              	.LC77:
 715 0188 41646420 		.string	"Add '<CMD_WRAP>' to '#wrapped_msg'...\n"
 715      273C434D 
 715      445F5752 
 715      41503E27 
 715      20746F20 
 716 01af 00       		.align 8
 717              	.LC78:
 718 01b0 41646420 		.string	"Add '@wrapped_obj2' to '#wrapped_msg'...\n"
 718      27407772 
GAS LISTING /tmp/cco7wVnW.s 			page 30


 718      61707065 
 718      645F6F62 
 718      6A322720 
 719 01da 00000000 		.align 8
 719      0000
 720              	.LC79:
 721 01e0 41646420 		.string	"Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n"
 721      273C434D 
 721      445F5245 
 721      4D4F5641 
 721      424C453E 
 722 020c 00000000 		.align 8
 723              	.LC80:
 724 0210 52656D6F 		.string	"Removing $str2 from @wrapped_obj1...\n"
 724      76696E67 
 724      20247374 
 724      72322066 
 724      726F6D20 
 725 0236 0000     		.align 8
 726              	.LC81:
 727 0238 52656D6F 		.string	"Removing $str1 from @wrapped_obj2...\n"
 727      76696E67 
 727      20247374 
 727      72312066 
 727      726F6D20 
 728 025e 0000     		.align 8
 729              	.LC82:
 730 0260 52656D6F 		.string	"Removing $f1 from @wrapped_obj2...\n"
 730      76696E67 
 730      20246631 
 730      2066726F 
 730      6D204077 
 731 0284 00000000 		.align 8
 732              	.LC83:
 733 0288 52656D6F 		.string	"Removing $i2 from @wrapped_obj2...\n"
 733      76696E67 
 733      20246932 
 733      2066726F 
 733      6D204077 
 734 02ac 00000000 		.align 8
 735              	.LC84:
 736 02b0 52656D6F 		.string	"Removing @wrapped_obj1 from #wrapped_msg...\n"
 736      76696E67 
 736      20407772 
 736      61707065 
 736      645F6F62 
 737 02dd 000000   		.align 8
 738              	.LC85:
 739 02e0 52656D6F 		.string	"Removing <CMD_REMOVABLE> from #wrapped_msg...\n"
 739      76696E67 
 739      203C434D 
 739      445F5245 
 739      4D4F5641 
 740 030f 00       		.align 8
 741              	.LC86:
 742 0310 41646420 		.string	"Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n"
 742      27407772 
GAS LISTING /tmp/cco7wVnW.s 			page 31


 742      61707065 
 742      645F6F62 
 742      6A312720 
 743              		.section	.rodata.main.str1.1
 744              	.LC87:
 745 02a7 57726170 		.string	"Wrapped message:"
 745      70656420 
 745      6D657373 
 745      6167653A 
 745      00
 746              	.LC88:
 747 02b8 2D2D2D2D 		.string	"---------------\n"
 747      2D2D2D2D 
 747      2D2D2D2D 
 747      2D2D2D0A 
 747      00
 748              	.LC89:
 749 02c9 57726170 		.string	"Wrapped message buffered"
 749      70656420 
 749      6D657373 
 749      61676520 
 749      62756666 
 750              		.section	.rodata.main.str1.8
 751              		.align 8
 752              	.LC90:
 753 0340 57726170 		.string	"Wrapped message (buffered again)"
 753      70656420 
 753      6D657373 
 753      61676520 
 753      28627566 
 754              		.section	.rodata.main.str1.1
 755              	.LC91:
 756 02e2 42756666 		.string	"Buffer content:"
 756      65722063 
 756      6F6E7465 
 756      6E743A00 
 757              		.section	.rodata.main.str1.8
 758 0361 00000000 		.align 8
 758      000000
 759              	.LC92:
 760 0368 52657061 		.string	"Reparsing '#wrapped_msg' '@wrapped_obj2'...\n"
 760      7273696E 
 760      67202723 
 760      77726170 
 760      7065645F 
 761              		.section	.rodata.main.str1.1
 762              	.LC93:
 763 02f2 72657061 		.string	"reparsed $i = %d $f2 = %f\n\n"
 763      72736564 
 763      20246920 
 763      3D202564 
 763      20246632 
 764              		.section	.rodata.main.str1.8
 765 0395 000000   		.align 8
 766              	.LC94:
 767 0398 456D756C 		.string	"Emulating a master - slave communaication:"
 767      6174696E 
GAS LISTING /tmp/cco7wVnW.s 			page 32


 767      67206120 
 767      6D617374 
 767      6572202D 
 768 03c3 00000000 		.align 8
 768      00
 769              	.LC95:
 770 03c8 2D2D2D2D 		.string	"-----------------------------------------\n"
 770      2D2D2D2D 
 770      2D2D2D2D 
 770      2D2D2D2D 
 770      2D2D2D2D 
 771              		.section	.rodata.main.str1.1
 772              	.LC97:
 773 030e 45786563 		.string	"Execution time: %f s\n"
 773      7574696F 
 773      6E207469 
 773      6D653A20 
 773      25662073 
 774              		.section	.text.main,"ax",@progbits
 775              		.globl	main
 777              	main:
 778              	.LFB68:
  44:src/main.c    **** {
 779              		.loc 1 44 0
 780              		.cfi_startproc
 781 0000 4157     		pushq	%r15
 782              	.LCFI54:
 783              		.cfi_def_cfa_offset 16
 784              		.cfi_offset 15, -16
 785 0002 4156     		pushq	%r14
 786              	.LCFI55:
 787              		.cfi_def_cfa_offset 24
 788              		.cfi_offset 14, -24
 789 0004 4155     		pushq	%r13
 790              	.LCFI56:
 791              		.cfi_def_cfa_offset 32
 792              		.cfi_offset 13, -32
 793 0006 4154     		pushq	%r12
 794              	.LCFI57:
 795              		.cfi_def_cfa_offset 40
 796              		.cfi_offset 12, -40
 797 0008 55       		pushq	%rbp
 798              	.LCFI58:
 799              		.cfi_def_cfa_offset 48
 800              		.cfi_offset 6, -48
 801 0009 53       		pushq	%rbx
 802              	.LCFI59:
 803              		.cfi_def_cfa_offset 56
 804              		.cfi_offset 3, -56
 805 000a 4881EC38 		subq	$1848, %rsp
 805      070000
 806              	.LCFI60:
 807              		.cfi_def_cfa_offset 1904
  44:src/main.c    **** {
 808              		.loc 1 44 0
 809 0011 64488B04 		movq	%fs:40, %rax
 809      25280000 
GAS LISTING /tmp/cco7wVnW.s 			page 33


 809      00
 810 001a 48898424 		movq	%rax, 1832(%rsp)
 810      28070000 
 811 0022 31C0     		xorl	%eax, %eax
  46:src/main.c    ****     clock_t begin = clock();
 812              		.loc 1 46 0
 813 0024 E8000000 		call	clock@PLT
 813      00
 814              	.LVL57:
 815 0029 48894424 		movq	%rax, 24(%rsp)
 815      18
 816              	.LVL58:
  58:src/main.c    ****     msg_hnd_t hnd = msg_hnd_create(putchar);
 817              		.loc 1 58 0
 818 002e 488DBC24 		leaq	752(%rsp), %rdi
 818      F0020000 
 819 0036 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 819      000000
 820 003d E8000000 		call	msg_hnd_create@PLT
 820      00
 821              	.LVL59:
 822              	.LBB204:
 823              	.LBB205:
 824              		.loc 2 104 0
 825 0042 488D3D00 		leaq	.LC14(%rip), %rdi
 825      000000
 826 0049 E8000000 		call	puts@PLT
 826      00
 827              	.LVL60:
 828              	.LBE205:
 829              	.LBE204:
 830              	.LBB206:
 831              	.LBB207:
 832 004e 488D3D00 		leaq	.LC15(%rip), %rdi
 832      000000
 833 0055 E8000000 		call	puts@PLT
 833      00
 834              	.LVL61:
 835              	.LBE207:
 836              	.LBE206:
 837              	.LBB208:
 838              	.LBB209:
 839 005a 488D1500 		leaq	test_str1(%rip), %rdx
 839      000000
 840 0061 488D3500 		leaq	.LC16(%rip), %rsi
 840      000000
 841 0068 BF010000 		movl	$1, %edi
 841      00
 842 006d B8000000 		movl	$0, %eax
 842      00
 843 0072 E8000000 		call	__printf_chk@PLT
 843      00
 844              	.LVL62:
 845              	.LBE209:
 846              	.LBE208:
 847              	.LBB210:
 848              	.LBB211:
GAS LISTING /tmp/cco7wVnW.s 			page 34


 849 0077 488D3D00 		leaq	.LC17(%rip), %rdi
 849      000000
 850 007e E8000000 		call	puts@PLT
 850      00
 851              	.LVL63:
 852              	.LBE211:
 853              	.LBE210:
  67:src/main.c    ****     msg = msg_get(test_str1, "test_msg", sizeof(test_str1));
 854              		.loc 1 67 0
 855 0083 488DBC24 		leaq	192(%rsp), %rdi
 855      C0000000 
 856 008b B9AA0000 		movl	$170, %ecx
 856      00
 857 0090 488D1500 		leaq	.LC18(%rip), %rdx
 857      000000
 858 0097 488D3500 		leaq	test_str1(%rip), %rsi
 858      000000
 859 009e E8000000 		call	msg_get@PLT
 859      00
 860              	.LVL64:
  68:src/main.c    ****     if(msg_get_content(msg) != NULL) {
 861              		.loc 1 68 0
 862 00a3 4883BC24 		cmpq	$0, 208(%rsp)
 862      D0000000 
 862      00
 863 00ac 0F849C0F 		je	.L20
 863      0000
  69:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
 864              		.loc 1 69 0
 865 00b2 0FB78C24 		movzwl	216(%rsp), %ecx
 865      D8000000 
 866 00ba 0FB79424 		movzwl	200(%rsp), %edx
 866      C8000000 
 867              	.LVL65:
 868              	.LBB212:
 869              	.LBB213:
 870              		.loc 2 104 0
 871 00c2 488D3500 		leaq	.LC19(%rip), %rsi
 871      000000
 872 00c9 BF010000 		movl	$1, %edi
 872      00
 873 00ce B8000000 		movl	$0, %eax
 873      00
 874 00d3 E8000000 		call	__printf_chk@PLT
 874      00
 875              	.LVL66:
 876              	.LBE213:
 877              	.LBE212:
  70:src/main.c    ****         hnd.print_str(msg.id);
 878              		.loc 1 70 0
 879 00d8 488B9C24 		movq	768(%rsp), %rbx
 879      00030000 
 880 00e0 488BBC24 		movq	192(%rsp), %rdi
 880      C0000000 
 881 00e8 488BB424 		movq	200(%rsp), %rsi
 881      C8000000 
 882 00f0 FFD3     		call	*%rbx
GAS LISTING /tmp/cco7wVnW.s 			page 35


 883              	.LVL67:
 884              	.LBB214:
 885              	.LBB215:
 886              		.loc 2 104 0
 887 00f2 BF3A0000 		movl	$58, %edi
 887      00
 888 00f7 E8000000 		call	putchar@PLT
 888      00
 889              	.LVL68:
 890              	.LBE215:
 891              	.LBE214:
  72:src/main.c    ****         hnd.print_str(msg.content);
 892              		.loc 1 72 0
 893 00fc 488BBC24 		movq	208(%rsp), %rdi
 893      D0000000 
 894 0104 488BB424 		movq	216(%rsp), %rsi
 894      D8000000 
 895 010c FFD3     		call	*%rbx
 896              	.LVL69:
 897              	.LBB216:
 898              	.LBB217:
 899              		.loc 2 104 0
 900 010e 488D3D00 		leaq	.LC20(%rip), %rdi
 900      000000
 901 0115 E8000000 		call	puts@PLT
 901      00
 902              	.LVL70:
 903              	.L21:
 904              	.LBE217:
 905              	.LBE216:
 906              	.LBB218:
 907              	.LBB219:
 908 011a 488D3D00 		leaq	.LC22(%rip), %rdi
 908      000000
 909 0121 E8000000 		call	puts@PLT
 909      00
 910              	.LVL71:
 911              	.LBE219:
 912              	.LBE218:
  80:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
 913              		.loc 1 80 0
 914 0126 FFB424D8 		pushq	216(%rsp)
 914      000000
 915              	.LCFI61:
 916              		.cfi_def_cfa_offset 1912
 917 012d FFB424D8 		pushq	216(%rsp)
 917      000000
 918              	.LCFI62:
 919              		.cfi_def_cfa_offset 1920
 920 0134 FFB424D8 		pushq	216(%rsp)
 920      000000
 921              	.LCFI63:
 922              		.cfi_def_cfa_offset 1928
 923 013b FFB424D8 		pushq	216(%rsp)
 923      000000
 924              	.LCFI64:
 925              		.cfi_def_cfa_offset 1936
GAS LISTING /tmp/cco7wVnW.s 			page 36


 926 0142 488D3D00 		leaq	.LC23(%rip), %rdi
 926      000000
 927 0149 E8000000 		call	msg_parser_get_cmd@PLT
 927      00
 928              	.LVL72:
  81:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 929              		.loc 1 81 0
 930 014e 4883C420 		addq	$32, %rsp
 931              	.LCFI65:
 932              		.cfi_def_cfa_offset 1904
 933              	.LVL73:
 934 0152 4885C0   		testq	%rax, %rax
 935 0155 0F84040F 		je	.L29
 935      0000
 936 015b 488D1500 		leaq	.LC12(%rip), %rdx
 936      000000
 937              	.L22:
 938              	.LVL74:
 939              	.LBB220:
 940              	.LBB221:
 941              		.loc 2 104 0 discriminator 4
 942 0162 488D3500 		leaq	.LC24(%rip), %rsi
 942      000000
 943 0169 BF010000 		movl	$1, %edi
 943      00
 944 016e B8000000 		movl	$0, %eax
 944      00
 945 0173 E8000000 		call	__printf_chk@PLT
 945      00
 946              	.LVL75:
 947              	.LBE221:
 948              	.LBE220:
 949              	.LBB222:
 950              	.LBB223:
 951 0178 488D3D00 		leaq	.LC25(%rip), %rdi
 951      000000
 952 017f E8000000 		call	puts@PLT
 952      00
 953              	.LVL76:
 954              	.LBE223:
 955              	.LBE222:
  84:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
 956              		.loc 1 84 0 discriminator 4
 957 0184 FFB424D8 		pushq	216(%rsp)
 957      000000
 958              	.LCFI66:
 959              		.cfi_def_cfa_offset 1912
 960 018b FFB424D8 		pushq	216(%rsp)
 960      000000
 961              	.LCFI67:
 962              		.cfi_def_cfa_offset 1920
 963 0192 FFB424D8 		pushq	216(%rsp)
 963      000000
 964              	.LCFI68:
 965              		.cfi_def_cfa_offset 1928
 966 0199 FFB424D8 		pushq	216(%rsp)
 966      000000
GAS LISTING /tmp/cco7wVnW.s 			page 37


 967              	.LCFI69:
 968              		.cfi_def_cfa_offset 1936
 969 01a0 488D3D00 		leaq	.LC26(%rip), %rdi
 969      000000
 970 01a7 E8000000 		call	msg_parser_get_cmd@PLT
 970      00
 971              	.LVL77:
  85:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 972              		.loc 1 85 0 discriminator 4
 973 01ac 4883C420 		addq	$32, %rsp
 974              	.LCFI70:
 975              		.cfi_def_cfa_offset 1904
 976 01b0 4885C0   		testq	%rax, %rax
 977 01b3 0F84B20E 		je	.L30
 977      0000
  85:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 978              		.loc 1 85 0 is_stmt 0
 979 01b9 488D1500 		leaq	.LC12(%rip), %rdx
 979      000000
 980              	.L23:
 981              	.LVL78:
 982              	.LBB224:
 983              	.LBB225:
 984              		.loc 2 104 0 is_stmt 1 discriminator 4
 985 01c0 488D3500 		leaq	.LC24(%rip), %rsi
 985      000000
 986 01c7 BF010000 		movl	$1, %edi
 986      00
 987 01cc B8000000 		movl	$0, %eax
 987      00
 988 01d1 E8000000 		call	__printf_chk@PLT
 988      00
 989              	.LVL79:
 990              	.LBE225:
 991              	.LBE224:
 992              	.LBB226:
 993              	.LBB227:
 994 01d6 488D3D00 		leaq	.LC27(%rip), %rdi
 994      000000
 995 01dd E8000000 		call	puts@PLT
 995      00
 996              	.LVL80:
 997              	.LBE227:
 998              	.LBE226:
  88:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
 999              		.loc 1 88 0 discriminator 4
 1000 01e2 FFB424D8 		pushq	216(%rsp)
 1000      000000
 1001              	.LCFI71:
 1002              		.cfi_def_cfa_offset 1912
 1003 01e9 FFB424D8 		pushq	216(%rsp)
 1003      000000
 1004              	.LCFI72:
 1005              		.cfi_def_cfa_offset 1920
 1006 01f0 FFB424D8 		pushq	216(%rsp)
 1006      000000
 1007              	.LCFI73:
GAS LISTING /tmp/cco7wVnW.s 			page 38


 1008              		.cfi_def_cfa_offset 1928
 1009 01f7 FFB424D8 		pushq	216(%rsp)
 1009      000000
 1010              	.LCFI74:
 1011              		.cfi_def_cfa_offset 1936
 1012 01fe 488D3D00 		leaq	.LC28(%rip), %rdi
 1012      000000
 1013 0205 E8000000 		call	msg_parser_get_cmd@PLT
 1013      00
 1014              	.LVL81:
  89:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 1015              		.loc 1 89 0 discriminator 4
 1016 020a 4883C420 		addq	$32, %rsp
 1017              	.LCFI75:
 1018              		.cfi_def_cfa_offset 1904
 1019 020e 4885C0   		testq	%rax, %rax
 1020 0211 0F84600E 		je	.L31
 1020      0000
  89:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 1021              		.loc 1 89 0 is_stmt 0
 1022 0217 488D1500 		leaq	.LC12(%rip), %rdx
 1022      000000
 1023              	.L24:
 1024              	.LVL82:
 1025              	.LBB228:
 1026              	.LBB229:
 1027              		.loc 2 104 0 is_stmt 1 discriminator 4
 1028 021e 488D3500 		leaq	.LC24(%rip), %rsi
 1028      000000
 1029 0225 BF010000 		movl	$1, %edi
 1029      00
 1030 022a B8000000 		movl	$0, %eax
 1030      00
 1031 022f E8000000 		call	__printf_chk@PLT
 1031      00
 1032              	.LVL83:
 1033              	.LBE229:
 1034              	.LBE228:
 1035              	.LBB230:
 1036              	.LBB231:
 1037 0234 488D3D00 		leaq	.LC29(%rip), %rdi
 1037      000000
 1038 023b E8000000 		call	puts@PLT
 1038      00
 1039              	.LVL84:
 1040              	.LBE231:
 1041              	.LBE230:
  93:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
 1042              		.loc 1 93 0 discriminator 4
 1043 0240 488DBC24 		leaq	224(%rsp), %rdi
 1043      E0000000 
 1044 0248 FFB424D8 		pushq	216(%rsp)
 1044      000000
 1045              	.LCFI76:
 1046              		.cfi_def_cfa_offset 1912
 1047 024f FFB424D8 		pushq	216(%rsp)
 1047      000000
GAS LISTING /tmp/cco7wVnW.s 			page 39


 1048              	.LCFI77:
 1049              		.cfi_def_cfa_offset 1920
 1050 0256 FFB424D8 		pushq	216(%rsp)
 1050      000000
 1051              	.LCFI78:
 1052              		.cfi_def_cfa_offset 1928
 1053 025d FFB424D8 		pushq	216(%rsp)
 1053      000000
 1054              	.LCFI79:
 1055              		.cfi_def_cfa_offset 1936
 1056 0264 488D3500 		leaq	.LC30(%rip), %rsi
 1056      000000
 1057 026b E8000000 		call	msg_parser_get_obj@PLT
 1057      00
 1058              	.LVL85:
  94:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
 1059              		.loc 1 94 0 discriminator 4
 1060 0270 0FB78C24 		movzwl	280(%rsp), %ecx
 1060      18010000 
 1061 0278 0FB79424 		movzwl	264(%rsp), %edx
 1061      08010000 
 1062              	.LVL86:
 1063              	.LBB232:
 1064              	.LBB233:
 1065              		.loc 2 104 0 discriminator 4
 1066 0280 4883C420 		addq	$32, %rsp
 1067              	.LCFI80:
 1068              		.cfi_def_cfa_offset 1904
 1069 0284 488D3500 		leaq	.LC31(%rip), %rsi
 1069      000000
 1070 028b BF010000 		movl	$1, %edi
 1070      00
 1071 0290 B8000000 		movl	$0, %eax
 1071      00
 1072 0295 E8000000 		call	__printf_chk@PLT
 1072      00
 1073              	.LVL87:
 1074              	.LBE233:
 1075              	.LBE232:
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
 1076              		.loc 1 95 0 discriminator 4
 1077 029a 488B9C24 		movq	768(%rsp), %rbx
 1077      00030000 
 1078 02a2 488BBC24 		movq	224(%rsp), %rdi
 1078      E0000000 
 1079 02aa 488BB424 		movq	232(%rsp), %rsi
 1079      E8000000 
 1080 02b2 FFD3     		call	*%rbx
 1081              	.LVL88:
 1082              	.LBB234:
 1083              	.LBB235:
 1084              		.loc 2 104 0 discriminator 4
 1085 02b4 BF3A0000 		movl	$58, %edi
 1085      00
 1086 02b9 E8000000 		call	putchar@PLT
 1086      00
 1087              	.LVL89:
GAS LISTING /tmp/cco7wVnW.s 			page 40


 1088              	.LBE235:
 1089              	.LBE234:
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
 1090              		.loc 1 95 0 discriminator 4
 1091 02be 488BBC24 		movq	240(%rsp), %rdi
 1091      F0000000 
 1092 02c6 488BB424 		movq	248(%rsp), %rsi
 1092      F8000000 
 1093 02ce FFD3     		call	*%rbx
 1094              	.LVL90:
 1095              	.LBB236:
 1096              	.LBB237:
 1097              		.loc 2 104 0 discriminator 4
 1098 02d0 488D3D00 		leaq	.LC20(%rip), %rdi
 1098      000000
 1099 02d7 E8000000 		call	puts@PLT
 1099      00
 1100              	.LVL91:
 1101              	.LBE237:
 1102              	.LBE236:
 1103              	.LBB238:
 1104              	.LBB239:
 1105 02dc 488D3D00 		leaq	.LC32(%rip), %rdi
 1105      000000
 1106 02e3 E8000000 		call	puts@PLT
 1106      00
 1107              	.LVL92:
 1108              	.LBE239:
 1109              	.LBE238:
 100:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 1110              		.loc 1 100 0 discriminator 4
 1111 02e8 488DBC24 		leaq	256(%rsp), %rdi
 1111      00010000 
 1112 02f0 FFB424D8 		pushq	216(%rsp)
 1112      000000
 1113              	.LCFI81:
 1114              		.cfi_def_cfa_offset 1912
 1115 02f7 FFB424D8 		pushq	216(%rsp)
 1115      000000
 1116              	.LCFI82:
 1117              		.cfi_def_cfa_offset 1920
 1118 02fe FFB424D8 		pushq	216(%rsp)
 1118      000000
 1119              	.LCFI83:
 1120              		.cfi_def_cfa_offset 1928
 1121 0305 FFB424D8 		pushq	216(%rsp)
 1121      000000
 1122              	.LCFI84:
 1123              		.cfi_def_cfa_offset 1936
 1124 030c 488D3500 		leaq	.LC33(%rip), %rsi
 1124      000000
 1125 0313 E8000000 		call	msg_parser_get_obj@PLT
 1125      00
 1126              	.LVL93:
 101:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 1127              		.loc 1 101 0 discriminator 4
 1128 0318 0FB78C24 		movzwl	312(%rsp), %ecx
GAS LISTING /tmp/cco7wVnW.s 			page 41


 1128      38010000 
 1129 0320 0FB79424 		movzwl	296(%rsp), %edx
 1129      28010000 
 1130              	.LVL94:
 1131              	.LBB240:
 1132              	.LBB241:
 1133              		.loc 2 104 0 discriminator 4
 1134 0328 4883C420 		addq	$32, %rsp
 1135              	.LCFI85:
 1136              		.cfi_def_cfa_offset 1904
 1137 032c 488D3500 		leaq	.LC34(%rip), %rsi
 1137      000000
 1138 0333 BF010000 		movl	$1, %edi
 1138      00
 1139 0338 B8000000 		movl	$0, %eax
 1139      00
 1140 033d E8000000 		call	__printf_chk@PLT
 1140      00
 1141              	.LVL95:
 1142              	.LBE241:
 1143              	.LBE240:
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 1144              		.loc 1 102 0 discriminator 4
 1145 0342 488BBC24 		movq	256(%rsp), %rdi
 1145      00010000 
 1146 034a 488BB424 		movq	264(%rsp), %rsi
 1146      08010000 
 1147 0352 FFD3     		call	*%rbx
 1148              	.LVL96:
 1149              	.LBB242:
 1150              	.LBB243:
 1151              		.loc 2 104 0 discriminator 4
 1152 0354 BF3A0000 		movl	$58, %edi
 1152      00
 1153 0359 E8000000 		call	putchar@PLT
 1153      00
 1154              	.LVL97:
 1155              	.LBE243:
 1156              	.LBE242:
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 1157              		.loc 1 102 0 discriminator 4
 1158 035e 488BBC24 		movq	272(%rsp), %rdi
 1158      10010000 
 1159 0366 488BB424 		movq	280(%rsp), %rsi
 1159      18010000 
 1160 036e FFD3     		call	*%rbx
 1161              	.LVL98:
 1162              	.LBB244:
 1163              	.LBB245:
 1164              		.loc 2 104 0 discriminator 4
 1165 0370 488D3D00 		leaq	.LC20(%rip), %rdi
 1165      000000
 1166 0377 E8000000 		call	puts@PLT
 1166      00
 1167              	.LVL99:
 1168              	.LBE245:
 1169              	.LBE244:
GAS LISTING /tmp/cco7wVnW.s 			page 42


 1170              	.LBB246:
 1171              	.LBB247:
 1172 037c 488D3D00 		leaq	.LC35(%rip), %rdi
 1172      000000
 1173 0383 E8000000 		call	puts@PLT
 1173      00
 1174              	.LVL100:
 1175              	.LBE247:
 1176              	.LBE246:
 107:src/main.c    ****     int ival = 0, res;
 1177              		.loc 1 107 0 discriminator 4
 1178 0388 C7442470 		movl	$0, 112(%rsp)
 1178      00000000 
 108:src/main.c    ****     float fval = 0.0;
 1179              		.loc 1 108 0 discriminator 4
 1180 0390 C7442474 		movl	$0x00000000, 116(%rsp)
 1180      00000000 
 109:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 1181              		.loc 1 109 0 discriminator 4
 1182 0398 488D7C24 		leaq	112(%rsp), %rdi
 1182      70
 1183 039d FFB424F8 		pushq	248(%rsp)
 1183      000000
 1184              	.LCFI86:
 1185              		.cfi_def_cfa_offset 1912
 1186 03a4 FFB424F8 		pushq	248(%rsp)
 1186      000000
 1187              	.LCFI87:
 1188              		.cfi_def_cfa_offset 1920
 1189 03ab FFB424F8 		pushq	248(%rsp)
 1189      000000
 1190              	.LCFI88:
 1191              		.cfi_def_cfa_offset 1928
 1192 03b2 FFB424F8 		pushq	248(%rsp)
 1192      000000
 1193              	.LCFI89:
 1194              		.cfi_def_cfa_offset 1936
 1195 03b9 488D3500 		leaq	.LC37(%rip), %rsi
 1195      000000
 1196 03c0 E8000000 		call	msg_parser_get_int@PLT
 1196      00
 1197              	.LVL101:
 1198 03c5 0FBED0   		movsbl	%al, %edx
 1199              	.LVL102:
 1200              	.LBB248:
 1201              	.LBB249:
 1202              		.loc 2 104 0 discriminator 4
 1203 03c8 4883C420 		addq	$32, %rsp
 1204              	.LCFI90:
 1205              		.cfi_def_cfa_offset 1904
 1206 03cc 8B4C2470 		movl	112(%rsp), %ecx
 1207 03d0 488D3500 		leaq	.LC38(%rip), %rsi
 1207      000000
 1208 03d7 BF010000 		movl	$1, %edi
 1208      00
 1209 03dc B8000000 		movl	$0, %eax
 1209      00
GAS LISTING /tmp/cco7wVnW.s 			page 43


 1210 03e1 E8000000 		call	__printf_chk@PLT
 1210      00
 1211              	.LVL103:
 1212              	.LBE249:
 1213              	.LBE248:
 1214              	.LBB250:
 1215              	.LBB251:
 1216 03e6 488D3D00 		leaq	.LC39(%rip), %rdi
 1216      000000
 1217 03ed E8000000 		call	puts@PLT
 1217      00
 1218              	.LVL104:
 1219              	.LBE251:
 1220              	.LBE250:
 114:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 1221              		.loc 1 114 0 discriminator 4
 1222 03f2 488D7C24 		leaq	116(%rsp), %rdi
 1222      74
 1223 03f7 FFB42418 		pushq	280(%rsp)
 1223      010000
 1224              	.LCFI91:
 1225              		.cfi_def_cfa_offset 1912
 1226 03fe FFB42418 		pushq	280(%rsp)
 1226      010000
 1227              	.LCFI92:
 1228              		.cfi_def_cfa_offset 1920
 1229 0405 FFB42418 		pushq	280(%rsp)
 1229      010000
 1230              	.LCFI93:
 1231              		.cfi_def_cfa_offset 1928
 1232 040c FFB42418 		pushq	280(%rsp)
 1232      010000
 1233              	.LCFI94:
 1234              		.cfi_def_cfa_offset 1936
 1235 0413 488D3500 		leaq	.LC40(%rip), %rsi
 1235      000000
 1236 041a E8000000 		call	msg_parser_get_float@PLT
 1236      00
 1237              	.LVL105:
 1238 041f 0FBED0   		movsbl	%al, %edx
 1239              	.LVL106:
 115:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 1240              		.loc 1 115 0 discriminator 4
 1241 0422 660FEFC0 		pxor	%xmm0, %xmm0
 1242 0426 F30F5A84 		cvtss2sd	148(%rsp), %xmm0
 1242      24940000 
 1242      00
 1243              	.LVL107:
 1244              	.LBB252:
 1245              	.LBB253:
 1246              		.loc 2 104 0 discriminator 4
 1247 042f 4883C420 		addq	$32, %rsp
 1248              	.LCFI95:
 1249              		.cfi_def_cfa_offset 1904
 1250 0433 488D3500 		leaq	.LC41(%rip), %rsi
 1250      000000
 1251 043a BF010000 		movl	$1, %edi
GAS LISTING /tmp/cco7wVnW.s 			page 44


 1251      00
 1252 043f B8010000 		movl	$1, %eax
 1252      00
 1253 0444 E8000000 		call	__printf_chk@PLT
 1253      00
 1254              	.LVL108:
 1255              	.LBE253:
 1256              	.LBE252:
 1257              	.LBB254:
 1258              	.LBB255:
 1259 0449 488D3D00 		leaq	.LC42(%rip), %rdi
 1259      000000
 1260 0450 E8000000 		call	puts@PLT
 1260      00
 1261              	.LVL109:
 1262              	.LBE255:
 1263              	.LBE254:
 119:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 1264              		.loc 1 119 0 discriminator 4
 1265 0455 FFB424F8 		pushq	248(%rsp)
 1265      000000
 1266              	.LCFI96:
 1267              		.cfi_def_cfa_offset 1912
 1268 045c FFB424F8 		pushq	248(%rsp)
 1268      000000
 1269              	.LCFI97:
 1270              		.cfi_def_cfa_offset 1920
 1271 0463 FFB424F8 		pushq	248(%rsp)
 1271      000000
 1272              	.LCFI98:
 1273              		.cfi_def_cfa_offset 1928
 1274 046a FFB424F8 		pushq	248(%rsp)
 1274      000000
 1275              	.LCFI99:
 1276              		.cfi_def_cfa_offset 1936
 1277 0471 488D3D00 		leaq	.LC43(%rip), %rdi
 1277      000000
 1278 0478 E8000000 		call	msg_parser_get_string@PLT
 1278      00
 1279              	.LVL110:
 1280 047d 4889D5   		movq	%rdx, %rbp
 1281              	.LVL111:
 120:src/main.c    ****     if(msg_str_p(str) != NULL) {
 1282              		.loc 1 120 0 discriminator 4
 1283 0480 4883C420 		addq	$32, %rsp
 1284              	.LCFI100:
 1285              		.cfi_def_cfa_offset 1904
 1286 0484 4885C0   		testq	%rax, %rax
 1287 0487 0F84F60B 		je	.L25
 1287      0000
 121:src/main.c    ****         hnd.print_str(str); printf(" len: %d\n\n", str.len);
 1288              		.loc 1 121 0
 1289 048d 4889C7   		movq	%rax, %rdi
 1290              	.LVL112:
 1291 0490 4889D6   		movq	%rdx, %rsi
 1292 0493 FFD3     		call	*%rbx
 1293              	.LVL113:
GAS LISTING /tmp/cco7wVnW.s 			page 45


 1294 0495 0FB7D5   		movzwl	%bp, %edx
 1295              	.LVL114:
 1296              	.LBB256:
 1297              	.LBB257:
 1298              		.loc 2 104 0
 1299 0498 488D3500 		leaq	.LC44(%rip), %rsi
 1299      000000
 1300 049f BF010000 		movl	$1, %edi
 1300      00
 1301 04a4 B8000000 		movl	$0, %eax
 1301      00
 1302 04a9 E8000000 		call	__printf_chk@PLT
 1302      00
 1303              	.LVL115:
 1304              	.L26:
 1305              	.LBE257:
 1306              	.LBE256:
 1307              	.LBB258:
 1308              	.LBB259:
 1309 04ae 488D3D00 		leaq	.LC46(%rip), %rdi
 1309      000000
 1310 04b5 E8000000 		call	puts@PLT
 1310      00
 1311              	.LVL116:
 1312              	.LBE259:
 1313              	.LBE258:
 1314              	.LBB260:
 1315              	.LBB261:
 1316 04ba 488D3D00 		leaq	.LC47(%rip), %rdi
 1316      000000
 1317 04c1 E8000000 		call	puts@PLT
 1317      00
 1318              	.LVL117:
 1319              	.LBE261:
 1320              	.LBE260:
 149:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 1321              		.loc 1 149 0
 1322 04c6 488D7C24 		leaq	80(%rsp), %rdi
 1322      50
 1323 04cb 488D3500 		leaq	.LC48(%rip), %rsi
 1323      000000
 1324 04d2 E8000000 		call	msg_wrapper_init_msg@PLT
 1324      00
 1325              	.LVL118:
 1326 04d7 488B4424 		movq	80(%rsp), %rax
 1326      50
 1327 04dc 488B5424 		movq	88(%rsp), %rdx
 1327      58
 1328 04e1 48898424 		movq	%rax, 288(%rsp)
 1328      20010000 
 1329 04e9 48899424 		movq	%rdx, 296(%rsp)
 1329      28010000 
 1330 04f1 488B4424 		movq	96(%rsp), %rax
 1330      60
 1331 04f6 488B5424 		movq	104(%rsp), %rdx
 1331      68
 1332 04fb 48898424 		movq	%rax, 304(%rsp)
GAS LISTING /tmp/cco7wVnW.s 			page 46


 1332      30010000 
 1333 0503 48899424 		movq	%rdx, 312(%rsp)
 1333      38010000 
 1334              	.LVL119:
 1335              	.LBB262:
 1336              	.LBB263:
 1337              		.loc 2 104 0
 1338 050b 488D3500 		leaq	.LC49(%rip), %rsi
 1338      000000
 1339 0512 BF010000 		movl	$1, %edi
 1339      00
 1340 0517 B8000000 		movl	$0, %eax
 1340      00
 1341 051c E8000000 		call	__printf_chk@PLT
 1341      00
 1342              	.LVL120:
 1343              	.LBE263:
 1344              	.LBE262:
 150:src/main.c    ****     printf("Initialized msg: #"); hnd.print_str(msg_wrap.id); printf("\n\n");
 1345              		.loc 1 150 0
 1346 0521 488B9C24 		movq	768(%rsp), %rbx
 1346      00030000 
 1347 0529 488BBC24 		movq	288(%rsp), %rdi
 1347      20010000 
 1348 0531 488BB424 		movq	296(%rsp), %rsi
 1348      28010000 
 1349 0539 FFD3     		call	*%rbx
 1350              	.LVL121:
 1351              	.LBB264:
 1352              	.LBB265:
 1353              		.loc 2 104 0
 1354 053b 488D3D00 		leaq	.LC20(%rip), %rdi
 1354      000000
 1355 0542 E8000000 		call	puts@PLT
 1355      00
 1356              	.LVL122:
 1357              	.LBE265:
 1358              	.LBE264:
 152:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 1359              		.loc 1 152 0
 1360 0547 488D6C24 		leaq	32(%rsp), %rbp
 1360      20
 1361 054c 488D3500 		leaq	.LC50(%rip), %rsi
 1361      000000
 1362 0553 4889EF   		movq	%rbp, %rdi
 1363 0556 E8000000 		call	msg_wrapper_init_obj@PLT
 1363      00
 1364              	.LVL123:
 1365 055b 488B4424 		movq	32(%rsp), %rax
 1365      20
 1366 0560 488B5424 		movq	40(%rsp), %rdx
 1366      28
 1367 0565 48898424 		movq	%rax, 656(%rsp)
 1367      90020000 
 1368 056d 48899424 		movq	%rdx, 664(%rsp)
 1368      98020000 
 1369 0575 488B4424 		movq	48(%rsp), %rax
GAS LISTING /tmp/cco7wVnW.s 			page 47


 1369      30
 1370 057a 488B5424 		movq	56(%rsp), %rdx
 1370      38
 1371 057f 48898424 		movq	%rax, 672(%rsp)
 1371      A0020000 
 1372 0587 48899424 		movq	%rdx, 680(%rsp)
 1372      A8020000 
 1373 058f 488B4424 		movq	64(%rsp), %rax
 1373      40
 1374 0594 488B5424 		movq	72(%rsp), %rdx
 1374      48
 1375 0599 48898424 		movq	%rax, 688(%rsp)
 1375      B0020000 
 1376 05a1 48899424 		movq	%rdx, 696(%rsp)
 1376      B8020000 
 1377              	.LVL124:
 1378              	.LBB266:
 1379              	.LBB267:
 1380              		.loc 2 104 0
 1381 05a9 488D3500 		leaq	.LC51(%rip), %rsi
 1381      000000
 1382 05b0 BF010000 		movl	$1, %edi
 1382      00
 1383 05b5 B8000000 		movl	$0, %eax
 1383      00
 1384 05ba E8000000 		call	__printf_chk@PLT
 1384      00
 1385              	.LVL125:
 1386              	.LBE267:
 1387              	.LBE266:
 153:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj1_wrap.id); printf("\n\n");
 1388              		.loc 1 153 0
 1389 05bf 488BBC24 		movq	656(%rsp), %rdi
 1389      90020000 
 1390 05c7 488BB424 		movq	664(%rsp), %rsi
 1390      98020000 
 1391 05cf FFD3     		call	*%rbx
 1392              	.LVL126:
 1393              	.LBB268:
 1394              	.LBB269:
 1395              		.loc 2 104 0
 1396 05d1 488D3D00 		leaq	.LC20(%rip), %rdi
 1396      000000
 1397 05d8 E8000000 		call	puts@PLT
 1397      00
 1398              	.LVL127:
 1399              	.LBE269:
 1400              	.LBE268:
 156:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 1401              		.loc 1 156 0
 1402 05dd 488D1500 		leaq	.LC52(%rip), %rdx
 1402      000000
 1403 05e4 488D3500 		leaq	.LC53(%rip), %rsi
 1403      000000
 1404 05eb 4889EF   		movq	%rbp, %rdi
 1405 05ee E8000000 		call	msg_wrapper_init_string@PLT
 1405      00
GAS LISTING /tmp/cco7wVnW.s 			page 48


 1406              	.LVL128:
 1407 05f3 488B4424 		movq	32(%rsp), %rax
 1407      20
 1408 05f8 488B5424 		movq	40(%rsp), %rdx
 1408      28
 1409 05fd 48898424 		movq	%rax, 512(%rsp)
 1409      00020000 
 1410 0605 48899424 		movq	%rdx, 520(%rsp)
 1410      08020000 
 1411 060d 488B4424 		movq	48(%rsp), %rax
 1411      30
 1412 0612 488B5424 		movq	56(%rsp), %rdx
 1412      38
 1413 0617 48898424 		movq	%rax, 528(%rsp)
 1413      10020000 
 1414 061f 48899424 		movq	%rdx, 536(%rsp)
 1414      18020000 
 1415 0627 488B4424 		movq	64(%rsp), %rax
 1415      40
 1416 062c 48898424 		movq	%rax, 544(%rsp)
 1416      20020000 
 1417              	.LVL129:
 1418              	.LBB270:
 1419              	.LBB271:
 1420              		.loc 2 104 0
 1421 0634 488D3500 		leaq	.LC54(%rip), %rsi
 1421      000000
 1422 063b BF010000 		movl	$1, %edi
 1422      00
 1423 0640 B8000000 		movl	$0, %eax
 1423      00
 1424 0645 E8000000 		call	__printf_chk@PLT
 1424      00
 1425              	.LVL130:
 1426              	.LBE271:
 1427              	.LBE270:
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 1428              		.loc 1 157 0
 1429 064a 488BBC24 		movq	512(%rsp), %rdi
 1429      00020000 
 1430 0652 488BB424 		movq	520(%rsp), %rsi
 1430      08020000 
 1431 065a FFD3     		call	*%rbx
 1432              	.LVL131:
 1433              	.LBB272:
 1434              	.LBB273:
 1435              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Optimizing macros and inline functions for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Copyright (C) 1998-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is distributed in the hope that it will be useful,
GAS LISTING /tmp/cco7wVnW.s 			page 49


  11:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # error "Never include <bits/stdio.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef __extern_inline
  24:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE inline
  25:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #else
  26:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE __extern_inline
  27:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  28:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifdef __USE_EXTERN_INLINES
  31:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
  32:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    inline.  */
  33:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
  34:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write formatted output to stdout from argument list ARG.  */
  35:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  36:/usr/include/x86_64-linux-gnu/bits/stdio.h **** vprintf (const char *__restrict __fmt, _G_va_list __arg)
  37:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  38:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return vfprintf (stdout, __fmt, __arg);
  39:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  40:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Read a character from stdin.  */
  43:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  44:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar (void)
  45:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc (stdin);
  47:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  48:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_MISC
  51:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Faster version when locking is not necessary.  */
  52:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  53:/usr/include/x86_64-linux-gnu/bits/stdio.h **** fgetc_unlocked (FILE *__fp)
  54:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  55:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  56:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  57:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif /* misc */
  58:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_POSIX
  61:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  62:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  63:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getc_unlocked (FILE *__fp)
  64:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  66:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
GAS LISTING /tmp/cco7wVnW.s 			page 50


  68:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  69:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  70:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar_unlocked (void)
  71:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  72:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (stdin);
  73:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  74:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif	/* POSIX */
  75:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  77:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write a character to stdout.  */
  78:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  79:/usr/include/x86_64-linux-gnu/bits/stdio.h **** putchar (int __c)
  80:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  81:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_putc (__c, stdout);
 1436              		.loc 3 81 0
 1437 065c 488B3500 		movq	stdout(%rip), %rsi
 1437      000000
 1438 0663 BF3D0000 		movl	$61, %edi
 1438      00
 1439 0668 E8000000 		call	_IO_putc@PLT
 1439      00
 1440              	.LVL132:
 1441              	.LBE273:
 1442              	.LBE272:
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 1443              		.loc 1 157 0
 1444 066d 488BBC24 		movq	528(%rsp), %rdi
 1444      10020000 
 1445 0675 488BB424 		movq	536(%rsp), %rsi
 1445      18020000 
 1446 067d FFD3     		call	*%rbx
 1447              	.LVL133:
 1448              	.LBB274:
 1449              	.LBB275:
 1450              		.loc 2 104 0
 1451 067f 488D3D00 		leaq	.LC20(%rip), %rdi
 1451      000000
 1452 0686 E8000000 		call	puts@PLT
 1452      00
 1453              	.LVL134:
 1454              	.LBE275:
 1455              	.LBE274:
 159:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 1456              		.loc 1 159 0
 1457 068b 488D1500 		leaq	.LC55(%rip), %rdx
 1457      000000
 1458 0692 488D3500 		leaq	.LC56(%rip), %rsi
 1458      000000
 1459 0699 4889EF   		movq	%rbp, %rdi
 1460 069c E8000000 		call	msg_wrapper_init_string@PLT
 1460      00
 1461              	.LVL135:
 1462 06a1 488B4424 		movq	32(%rsp), %rax
 1462      20
 1463 06a6 488B5424 		movq	40(%rsp), %rdx
 1463      28
 1464 06ab 48898424 		movq	%rax, 560(%rsp)
GAS LISTING /tmp/cco7wVnW.s 			page 51


 1464      30020000 
 1465 06b3 48899424 		movq	%rdx, 568(%rsp)
 1465      38020000 
 1466 06bb 488B4424 		movq	48(%rsp), %rax
 1466      30
 1467 06c0 488B5424 		movq	56(%rsp), %rdx
 1467      38
 1468 06c5 48898424 		movq	%rax, 576(%rsp)
 1468      40020000 
 1469 06cd 48899424 		movq	%rdx, 584(%rsp)
 1469      48020000 
 1470 06d5 488B4424 		movq	64(%rsp), %rax
 1470      40
 1471 06da 48898424 		movq	%rax, 592(%rsp)
 1471      50020000 
 1472              	.LVL136:
 1473              	.LBB276:
 1474              	.LBB277:
 1475              		.loc 2 104 0
 1476 06e2 488D3500 		leaq	.LC54(%rip), %rsi
 1476      000000
 1477 06e9 BF010000 		movl	$1, %edi
 1477      00
 1478 06ee B8000000 		movl	$0, %eax
 1478      00
 1479 06f3 E8000000 		call	__printf_chk@PLT
 1479      00
 1480              	.LVL137:
 1481              	.LBE277:
 1482              	.LBE276:
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 1483              		.loc 1 160 0
 1484 06f8 488BBC24 		movq	560(%rsp), %rdi
 1484      30020000 
 1485 0700 488BB424 		movq	568(%rsp), %rsi
 1485      38020000 
 1486 0708 FFD3     		call	*%rbx
 1487              	.LVL138:
 1488              	.LBB278:
 1489              	.LBB279:
 1490              		.loc 3 81 0
 1491 070a 488B3500 		movq	stdout(%rip), %rsi
 1491      000000
 1492 0711 BF3D0000 		movl	$61, %edi
 1492      00
 1493 0716 E8000000 		call	_IO_putc@PLT
 1493      00
 1494              	.LVL139:
 1495              	.LBE279:
 1496              	.LBE278:
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 1497              		.loc 1 160 0
 1498 071b 488BBC24 		movq	576(%rsp), %rdi
 1498      40020000 
 1499 0723 488BB424 		movq	584(%rsp), %rsi
 1499      48020000 
 1500 072b FFD3     		call	*%rbx
GAS LISTING /tmp/cco7wVnW.s 			page 52


 1501              	.LVL140:
 1502              	.LBB280:
 1503              	.LBB281:
 1504              		.loc 2 104 0
 1505 072d 488D3D00 		leaq	.LC20(%rip), %rdi
 1505      000000
 1506 0734 E8000000 		call	puts@PLT
 1506      00
 1507              	.LVL141:
 1508              	.LBE281:
 1509              	.LBE280:
 162:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 1510              		.loc 1 162 0
 1511 0739 488D1500 		leaq	.LC57(%rip), %rdx
 1511      000000
 1512 0740 488D3500 		leaq	.LC58(%rip), %rsi
 1512      000000
 1513 0747 4889EF   		movq	%rbp, %rdi
 1514 074a E8000000 		call	msg_wrapper_init_string@PLT
 1514      00
 1515              	.LVL142:
 1516 074f 488B4424 		movq	32(%rsp), %rax
 1516      20
 1517 0754 488B5424 		movq	40(%rsp), %rdx
 1517      28
 1518 0759 48898424 		movq	%rax, 608(%rsp)
 1518      60020000 
 1519 0761 48899424 		movq	%rdx, 616(%rsp)
 1519      68020000 
 1520 0769 488B4424 		movq	48(%rsp), %rax
 1520      30
 1521 076e 488B5424 		movq	56(%rsp), %rdx
 1521      38
 1522 0773 48898424 		movq	%rax, 624(%rsp)
 1522      70020000 
 1523 077b 48899424 		movq	%rdx, 632(%rsp)
 1523      78020000 
 1524 0783 488B4424 		movq	64(%rsp), %rax
 1524      40
 1525 0788 48898424 		movq	%rax, 640(%rsp)
 1525      80020000 
 1526              	.LVL143:
 1527              	.LBB282:
 1528              	.LBB283:
 1529              		.loc 2 104 0
 1530 0790 488D3500 		leaq	.LC54(%rip), %rsi
 1530      000000
 1531 0797 BF010000 		movl	$1, %edi
 1531      00
 1532 079c B8000000 		movl	$0, %eax
 1532      00
 1533 07a1 E8000000 		call	__printf_chk@PLT
 1533      00
 1534              	.LVL144:
 1535              	.LBE283:
 1536              	.LBE282:
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
GAS LISTING /tmp/cco7wVnW.s 			page 53


 1537              		.loc 1 163 0
 1538 07a6 488BBC24 		movq	608(%rsp), %rdi
 1538      60020000 
 1539 07ae 488BB424 		movq	616(%rsp), %rsi
 1539      68020000 
 1540 07b6 FFD3     		call	*%rbx
 1541              	.LVL145:
 1542              	.LBB284:
 1543              	.LBB285:
 1544              		.loc 3 81 0
 1545 07b8 488B3500 		movq	stdout(%rip), %rsi
 1545      000000
 1546 07bf BF3D0000 		movl	$61, %edi
 1546      00
 1547 07c4 E8000000 		call	_IO_putc@PLT
 1547      00
 1548              	.LVL146:
 1549              	.LBE285:
 1550              	.LBE284:
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 1551              		.loc 1 163 0
 1552 07c9 488BBC24 		movq	624(%rsp), %rdi
 1552      70020000 
 1553 07d1 488BB424 		movq	632(%rsp), %rsi
 1553      78020000 
 1554 07d9 FFD3     		call	*%rbx
 1555              	.LVL147:
 1556              	.LBB286:
 1557              	.LBB287:
 1558              		.loc 2 104 0
 1559 07db 488D3D00 		leaq	.LC20(%rip), %rdi
 1559      000000
 1560 07e2 E8000000 		call	puts@PLT
 1560      00
 1561              	.LVL148:
 1562              	.LBE287:
 1563              	.LBE286:
 1564              	.LBB288:
 1565              	.LBB289:
 1566 07e7 488D3D00 		leaq	.LC59(%rip), %rdi
 1566      000000
 1567 07ee E8000000 		call	puts@PLT
 1567      00
 1568              	.LVL149:
 1569              	.LBE289:
 1570              	.LBE288:
 167:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 1571              		.loc 1 167 0
 1572 07f3 4C8DBC24 		leaq	560(%rsp), %r15
 1572      30020000 
 1573 07fb 4C8DAC24 		leaq	656(%rsp), %r13
 1573      90020000 
 1574 0803 4C89FE   		movq	%r15, %rsi
 1575 0806 4C89EF   		movq	%r13, %rdi
 1576 0809 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1576      00
 1577              	.LVL150:
GAS LISTING /tmp/cco7wVnW.s 			page 54


 168:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 1578              		.loc 1 168 0
 1579 080e 488DB424 		leaq	608(%rsp), %rsi
 1579      60020000 
 1580 0816 4C89EF   		movq	%r13, %rdi
 1581 0819 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1581      00
 1582              	.LVL151:
 1583              	.LBB290:
 1584              	.LBB291:
 1585              		.loc 2 104 0
 1586 081e 488D3D00 		leaq	.LC60(%rip), %rdi
 1586      000000
 1587 0825 E8000000 		call	puts@PLT
 1587      00
 1588              	.LVL152:
 1589              	.LBE291:
 1590              	.LBE290:
 171:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1591              		.loc 1 171 0
 1592 082a 4C8DA424 		leaq	288(%rsp), %r12
 1592      20010000 
 1593 0832 4C89EE   		movq	%r13, %rsi
 1594 0835 4C89E7   		movq	%r12, %rdi
 1595 0838 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1595      00
 1596              	.LVL153:
 173:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 1597              		.loc 1 173 0
 1598 083d 488D3500 		leaq	.LC61(%rip), %rsi
 1598      000000
 1599 0844 4889EF   		movq	%rbp, %rdi
 1600 0847 E8000000 		call	msg_wrapper_init_cmd@PLT
 1600      00
 1601              	.LVL154:
 1602 084c 488B4424 		movq	32(%rsp), %rax
 1602      20
 1603 0851 488B5424 		movq	40(%rsp), %rdx
 1603      28
 1604 0856 48898424 		movq	%rax, 128(%rsp)
 1604      80000000 
 1605 085e 48899424 		movq	%rdx, 136(%rsp)
 1605      88000000 
 1606 0866 488B4424 		movq	48(%rsp), %rax
 1606      30
 1607 086b 48898424 		movq	%rax, 144(%rsp)
 1607      90000000 
 1608              	.LVL155:
 1609              	.LBB292:
 1610              	.LBB293:
 1611              		.loc 2 104 0
 1612 0873 488D3500 		leaq	.LC62(%rip), %rsi
 1612      000000
 1613 087a BF010000 		movl	$1, %edi
 1613      00
 1614 087f B8000000 		movl	$0, %eax
 1614      00
GAS LISTING /tmp/cco7wVnW.s 			page 55


 1615 0884 E8000000 		call	__printf_chk@PLT
 1615      00
 1616              	.LVL156:
 1617              	.LBE293:
 1618              	.LBE292:
 174:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_wrap.cmd); printf(">\n\n");
 1619              		.loc 1 174 0
 1620 0889 488BBC24 		movq	128(%rsp), %rdi
 1620      80000000 
 1621 0891 488BB424 		movq	136(%rsp), %rsi
 1621      88000000 
 1622 0899 FFD3     		call	*%rbx
 1623              	.LVL157:
 1624              	.LBB294:
 1625              	.LBB295:
 1626              		.loc 2 104 0
 1627 089b 488D3D00 		leaq	.LC63(%rip), %rdi
 1627      000000
 1628 08a2 E8000000 		call	puts@PLT
 1628      00
 1629              	.LVL158:
 1630              	.LBE295:
 1631              	.LBE294:
 176:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 1632              		.loc 1 176 0
 1633 08a7 488D3500 		leaq	.LC64(%rip), %rsi
 1633      000000
 1634 08ae 4889EF   		movq	%rbp, %rdi
 1635 08b1 E8000000 		call	msg_wrapper_init_cmd@PLT
 1635      00
 1636              	.LVL159:
 1637 08b6 488B4424 		movq	32(%rsp), %rax
 1637      20
 1638 08bb 488B5424 		movq	40(%rsp), %rdx
 1638      28
 1639 08c0 48898424 		movq	%rax, 160(%rsp)
 1639      A0000000 
 1640 08c8 48899424 		movq	%rdx, 168(%rsp)
 1640      A8000000 
 1641 08d0 488B4424 		movq	48(%rsp), %rax
 1641      30
 1642 08d5 48898424 		movq	%rax, 176(%rsp)
 1642      B0000000 
 1643              	.LVL160:
 1644              	.LBB296:
 1645              	.LBB297:
 1646              		.loc 2 104 0
 1647 08dd 488D3500 		leaq	.LC62(%rip), %rsi
 1647      000000
 1648 08e4 BF010000 		movl	$1, %edi
 1648      00
 1649 08e9 B8000000 		movl	$0, %eax
 1649      00
 1650 08ee E8000000 		call	__printf_chk@PLT
 1650      00
 1651              	.LVL161:
 1652              	.LBE297:
GAS LISTING /tmp/cco7wVnW.s 			page 56


 1653              	.LBE296:
 177:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_rem.cmd); printf(">\n\n");
 1654              		.loc 1 177 0
 1655 08f3 488BBC24 		movq	160(%rsp), %rdi
 1655      A0000000 
 1656 08fb 488BB424 		movq	168(%rsp), %rsi
 1656      A8000000 
 1657 0903 FFD3     		call	*%rbx
 1658              	.LVL162:
 1659              	.LBB298:
 1660              	.LBB299:
 1661              		.loc 2 104 0
 1662 0905 488D3D00 		leaq	.LC63(%rip), %rdi
 1662      000000
 1663 090c E8000000 		call	puts@PLT
 1663      00
 1664              	.LVL163:
 1665              	.LBE299:
 1666              	.LBE298:
 179:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
 1667              		.loc 1 179 0
 1668 0911 BA54F3FF 		movl	$-3244, %edx
 1668      FF
 1669 0916 488D3500 		leaq	.LC65(%rip), %rsi
 1669      000000
 1670 091d 4889EF   		movq	%rbp, %rdi
 1671 0920 E8000000 		call	msg_wrapper_init_int@PLT
 1671      00
 1672              	.LVL164:
 1673 0925 488B4424 		movq	32(%rsp), %rax
 1673      20
 1674 092a 488B5424 		movq	40(%rsp), %rdx
 1674      28
 1675 092f 48898424 		movq	%rax, 320(%rsp)
 1675      40010000 
 1676 0937 48899424 		movq	%rdx, 328(%rsp)
 1676      48010000 
 1677 093f 488B4424 		movq	48(%rsp), %rax
 1677      30
 1678 0944 488B5424 		movq	56(%rsp), %rdx
 1678      38
 1679 0949 48898424 		movq	%rax, 336(%rsp)
 1679      50010000 
 1680 0951 48899424 		movq	%rdx, 344(%rsp)
 1680      58010000 
 1681              	.LVL165:
 1682              	.LBB300:
 1683              	.LBB301:
 1684              		.loc 2 104 0
 1685 0959 488D3500 		leaq	.LC66(%rip), %rsi
 1685      000000
 1686 0960 BF010000 		movl	$1, %edi
 1686      00
 1687 0965 B8000000 		movl	$0, %eax
 1687      00
 1688 096a E8000000 		call	__printf_chk@PLT
 1688      00
GAS LISTING /tmp/cco7wVnW.s 			page 57


 1689              	.LVL166:
 1690              	.LBE301:
 1691              	.LBE300:
 180:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i1.id); printf("=%d\n\n", i1.val);
 1692              		.loc 1 180 0
 1693 096f 488BBC24 		movq	320(%rsp), %rdi
 1693      40010000 
 1694 0977 488BB424 		movq	328(%rsp), %rsi
 1694      48010000 
 1695 097f FFD3     		call	*%rbx
 1696              	.LVL167:
 1697              	.LBB302:
 1698              	.LBB303:
 1699              		.loc 2 104 0
 1700 0981 8B942450 		movl	336(%rsp), %edx
 1700      010000
 1701 0988 488D3500 		leaq	.LC67(%rip), %rsi
 1701      000000
 1702 098f BF010000 		movl	$1, %edi
 1702      00
 1703 0994 B8000000 		movl	$0, %eax
 1703      00
 1704 0999 E8000000 		call	__printf_chk@PLT
 1704      00
 1705              	.LVL168:
 1706              	.LBE303:
 1707              	.LBE302:
 182:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 1708              		.loc 1 182 0
 1709 099e BA55F806 		movl	$456789, %edx
 1709      00
 1710 09a3 488D3500 		leaq	.LC68(%rip), %rsi
 1710      000000
 1711 09aa 4889EF   		movq	%rbp, %rdi
 1712 09ad E8000000 		call	msg_wrapper_init_int@PLT
 1712      00
 1713              	.LVL169:
 1714 09b2 488B4424 		movq	32(%rsp), %rax
 1714      20
 1715 09b7 488B5424 		movq	40(%rsp), %rdx
 1715      28
 1716 09bc 48898424 		movq	%rax, 352(%rsp)
 1716      60010000 
 1717 09c4 48899424 		movq	%rdx, 360(%rsp)
 1717      68010000 
 1718 09cc 488B4424 		movq	48(%rsp), %rax
 1718      30
 1719 09d1 488B5424 		movq	56(%rsp), %rdx
 1719      38
 1720 09d6 48898424 		movq	%rax, 368(%rsp)
 1720      70010000 
 1721 09de 48899424 		movq	%rdx, 376(%rsp)
 1721      78010000 
 1722              	.LVL170:
 1723              	.LBB304:
 1724              	.LBB305:
 1725              		.loc 2 104 0
GAS LISTING /tmp/cco7wVnW.s 			page 58


 1726 09e6 488D3500 		leaq	.LC66(%rip), %rsi
 1726      000000
 1727 09ed BF010000 		movl	$1, %edi
 1727      00
 1728 09f2 B8000000 		movl	$0, %eax
 1728      00
 1729 09f7 E8000000 		call	__printf_chk@PLT
 1729      00
 1730              	.LVL171:
 1731              	.LBE305:
 1732              	.LBE304:
 183:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i2.id); printf("=%d\n\n", i2.val);
 1733              		.loc 1 183 0
 1734 09fc 488BBC24 		movq	352(%rsp), %rdi
 1734      60010000 
 1735 0a04 488BB424 		movq	360(%rsp), %rsi
 1735      68010000 
 1736 0a0c FFD3     		call	*%rbx
 1737              	.LVL172:
 1738              	.LBB306:
 1739              	.LBB307:
 1740              		.loc 2 104 0
 1741 0a0e 8B942470 		movl	368(%rsp), %edx
 1741      010000
 1742 0a15 488D3500 		leaq	.LC67(%rip), %rsi
 1742      000000
 1743 0a1c BF010000 		movl	$1, %edi
 1743      00
 1744 0a21 B8000000 		movl	$0, %eax
 1744      00
 1745 0a26 E8000000 		call	__printf_chk@PLT
 1745      00
 1746              	.LVL173:
 1747              	.LBE307:
 1748              	.LBE306:
 185:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 1749              		.loc 1 185 0
 1750 0a2b BA060000 		movl	$6, %edx
 1750      00
 1751 0a30 F30F1005 		movss	.LC70(%rip), %xmm0
 1751      00000000 
 1752 0a38 488D3500 		leaq	.LC69(%rip), %rsi
 1752      000000
 1753 0a3f 4889EF   		movq	%rbp, %rdi
 1754 0a42 E8000000 		call	msg_wrapper_init_float@PLT
 1754      00
 1755              	.LVL174:
 1756 0a47 488B4424 		movq	32(%rsp), %rax
 1756      20
 1757 0a4c 488B5424 		movq	40(%rsp), %rdx
 1757      28
 1758 0a51 48898424 		movq	%rax, 384(%rsp)
 1758      80010000 
 1759 0a59 48899424 		movq	%rdx, 392(%rsp)
 1759      88010000 
 1760 0a61 488B4424 		movq	48(%rsp), %rax
 1760      30
GAS LISTING /tmp/cco7wVnW.s 			page 59


 1761 0a66 488B5424 		movq	56(%rsp), %rdx
 1761      38
 1762 0a6b 48898424 		movq	%rax, 400(%rsp)
 1762      90010000 
 1763 0a73 48899424 		movq	%rdx, 408(%rsp)
 1763      98010000 
 1764              	.LVL175:
 1765              	.LBB308:
 1766              	.LBB309:
 1767              		.loc 2 104 0
 1768 0a7b 488D3500 		leaq	.LC71(%rip), %rsi
 1768      000000
 1769 0a82 BF010000 		movl	$1, %edi
 1769      00
 1770 0a87 B8000000 		movl	$0, %eax
 1770      00
 1771 0a8c E8000000 		call	__printf_chk@PLT
 1771      00
 1772              	.LVL176:
 1773              	.LBE309:
 1774              	.LBE308:
 186:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f1.id); printf("=%.6f\n\n", f1.val);
 1775              		.loc 1 186 0
 1776 0a91 488BBC24 		movq	384(%rsp), %rdi
 1776      80010000 
 1777 0a99 488BB424 		movq	392(%rsp), %rsi
 1777      88010000 
 1778 0aa1 FFD3     		call	*%rbx
 1779              	.LVL177:
 1780 0aa3 660FEFC0 		pxor	%xmm0, %xmm0
 1781 0aa7 F30F5A84 		cvtss2sd	400(%rsp), %xmm0
 1781      24900100 
 1781      00
 1782              	.LVL178:
 1783              	.LBB310:
 1784              	.LBB311:
 1785              		.loc 2 104 0
 1786 0ab0 488D3500 		leaq	.LC72(%rip), %rsi
 1786      000000
 1787 0ab7 BF010000 		movl	$1, %edi
 1787      00
 1788 0abc B8010000 		movl	$1, %eax
 1788      00
 1789 0ac1 E8000000 		call	__printf_chk@PLT
 1789      00
 1790              	.LVL179:
 1791              	.LBE311:
 1792              	.LBE310:
 188:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 1793              		.loc 1 188 0
 1794 0ac6 BA060000 		movl	$6, %edx
 1794      00
 1795 0acb F30F1005 		movss	.LC74(%rip), %xmm0
 1795      00000000 
 1796 0ad3 488D3500 		leaq	.LC73(%rip), %rsi
 1796      000000
 1797 0ada 4889EF   		movq	%rbp, %rdi
GAS LISTING /tmp/cco7wVnW.s 			page 60


 1798 0add E8000000 		call	msg_wrapper_init_float@PLT
 1798      00
 1799              	.LVL180:
 1800 0ae2 488B4424 		movq	32(%rsp), %rax
 1800      20
 1801 0ae7 488B5424 		movq	40(%rsp), %rdx
 1801      28
 1802 0aec 48898424 		movq	%rax, 416(%rsp)
 1802      A0010000 
 1803 0af4 48899424 		movq	%rdx, 424(%rsp)
 1803      A8010000 
 1804 0afc 488B4424 		movq	48(%rsp), %rax
 1804      30
 1805 0b01 488B5424 		movq	56(%rsp), %rdx
 1805      38
 1806 0b06 48898424 		movq	%rax, 432(%rsp)
 1806      B0010000 
 1807 0b0e 48899424 		movq	%rdx, 440(%rsp)
 1807      B8010000 
 1808              	.LVL181:
 1809              	.LBB312:
 1810              	.LBB313:
 1811              		.loc 2 104 0
 1812 0b16 488D3500 		leaq	.LC71(%rip), %rsi
 1812      000000
 1813 0b1d BF010000 		movl	$1, %edi
 1813      00
 1814 0b22 B8000000 		movl	$0, %eax
 1814      00
 1815 0b27 E8000000 		call	__printf_chk@PLT
 1815      00
 1816              	.LVL182:
 1817              	.LBE313:
 1818              	.LBE312:
 189:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f2.id); printf("=%.6f\n\n", f2.val);
 1819              		.loc 1 189 0
 1820 0b2c 488BBC24 		movq	416(%rsp), %rdi
 1820      A0010000 
 1821 0b34 488BB424 		movq	424(%rsp), %rsi
 1821      A8010000 
 1822 0b3c FFD3     		call	*%rbx
 1823              	.LVL183:
 1824 0b3e 660FEFC0 		pxor	%xmm0, %xmm0
 1825 0b42 F30F5A84 		cvtss2sd	432(%rsp), %xmm0
 1825      24B00100 
 1825      00
 1826              	.LVL184:
 1827              	.LBB314:
 1828              	.LBB315:
 1829              		.loc 2 104 0
 1830 0b4b 488D3500 		leaq	.LC72(%rip), %rsi
 1830      000000
 1831 0b52 BF010000 		movl	$1, %edi
 1831      00
 1832 0b57 B8010000 		movl	$1, %eax
 1832      00
 1833 0b5c E8000000 		call	__printf_chk@PLT
GAS LISTING /tmp/cco7wVnW.s 			page 61


 1833      00
 1834              	.LVL185:
 1835              	.LBE315:
 1836              	.LBE314:
 191:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 1837              		.loc 1 191 0
 1838 0b61 488D3500 		leaq	.LC75(%rip), %rsi
 1838      000000
 1839 0b68 4889EF   		movq	%rbp, %rdi
 1840 0b6b E8000000 		call	msg_wrapper_init_obj@PLT
 1840      00
 1841              	.LVL186:
 1842 0b70 488B4424 		movq	32(%rsp), %rax
 1842      20
 1843 0b75 488B5424 		movq	40(%rsp), %rdx
 1843      28
 1844 0b7a 48898424 		movq	%rax, 704(%rsp)
 1844      C0020000 
 1845 0b82 48899424 		movq	%rdx, 712(%rsp)
 1845      C8020000 
 1846 0b8a 488B4424 		movq	48(%rsp), %rax
 1846      30
 1847 0b8f 488B5424 		movq	56(%rsp), %rdx
 1847      38
 1848 0b94 48898424 		movq	%rax, 720(%rsp)
 1848      D0020000 
 1849 0b9c 48899424 		movq	%rdx, 728(%rsp)
 1849      D8020000 
 1850 0ba4 488B4424 		movq	64(%rsp), %rax
 1850      40
 1851 0ba9 488B5424 		movq	72(%rsp), %rdx
 1851      48
 1852 0bae 48898424 		movq	%rax, 736(%rsp)
 1852      E0020000 
 1853 0bb6 48899424 		movq	%rdx, 744(%rsp)
 1853      E8020000 
 1854              	.LVL187:
 1855              	.LBB316:
 1856              	.LBB317:
 1857              		.loc 2 104 0
 1858 0bbe 488D3500 		leaq	.LC51(%rip), %rsi
 1858      000000
 1859 0bc5 BF010000 		movl	$1, %edi
 1859      00
 1860 0bca B8000000 		movl	$0, %eax
 1860      00
 1861 0bcf E8000000 		call	__printf_chk@PLT
 1861      00
 1862              	.LVL188:
 1863              	.LBE317:
 1864              	.LBE316:
 192:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj2_wrap.id); printf("\n\n");
 1865              		.loc 1 192 0
 1866 0bd4 488BBC24 		movq	704(%rsp), %rdi
 1866      C0020000 
 1867 0bdc 488BB424 		movq	712(%rsp), %rsi
 1867      C8020000 
GAS LISTING /tmp/cco7wVnW.s 			page 62


 1868 0be4 FFD3     		call	*%rbx
 1869              	.LVL189:
 1870              	.LBB318:
 1871              	.LBB319:
 1872              		.loc 2 104 0
 1873 0be6 488D3D00 		leaq	.LC20(%rip), %rdi
 1873      000000
 1874 0bed E8000000 		call	puts@PLT
 1874      00
 1875              	.LVL190:
 1876              	.LBE319:
 1877              	.LBE318:
 1878              	.LBB320:
 1879              	.LBB321:
 1880 0bf2 488D3D00 		leaq	.LC76(%rip), %rdi
 1880      000000
 1881 0bf9 E8000000 		call	puts@PLT
 1881      00
 1882              	.LVL191:
 1883              	.LBE321:
 1884              	.LBE320:
 195:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 1885              		.loc 1 195 0
 1886 0bfe 488DB424 		leaq	320(%rsp), %rsi
 1886      40010000 
 1887 0c06 488DAC24 		leaq	704(%rsp), %rbp
 1887      C0020000 
 1888 0c0e 4889EF   		movq	%rbp, %rdi
 1889 0c11 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1889      00
 1890              	.LVL192:
 196:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 1891              		.loc 1 196 0
 1892 0c16 488D8424 		leaq	352(%rsp), %rax
 1892      60010000 
 1893 0c1e 48890424 		movq	%rax, (%rsp)
 1894 0c22 4889C6   		movq	%rax, %rsi
 1895 0c25 4889EF   		movq	%rbp, %rdi
 1896 0c28 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1896      00
 1897              	.LVL193:
 197:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 1898              		.loc 1 197 0
 1899 0c2d 488D8C24 		leaq	384(%rsp), %rcx
 1899      80010000 
 1900 0c35 48894C24 		movq	%rcx, 8(%rsp)
 1900      08
 1901 0c3a 4889CE   		movq	%rcx, %rsi
 1902 0c3d 4889EF   		movq	%rbp, %rdi
 1903 0c40 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1903      00
 1904              	.LVL194:
 198:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 1905              		.loc 1 198 0
 1906 0c45 488DB424 		leaq	416(%rsp), %rsi
 1906      A0010000 
 1907 0c4d 4889EF   		movq	%rbp, %rdi
GAS LISTING /tmp/cco7wVnW.s 			page 63


 1908 0c50 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1908      00
 1909              	.LVL195:
 199:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 1910              		.loc 1 199 0
 1911 0c55 4C8DB424 		leaq	512(%rsp), %r14
 1911      00020000 
 1912 0c5d 4C89F6   		movq	%r14, %rsi
 1913 0c60 4889EF   		movq	%rbp, %rdi
 1914 0c63 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1914      00
 1915              	.LVL196:
 1916              	.LBB322:
 1917              	.LBB323:
 1918              		.loc 2 104 0
 1919 0c68 488D3D00 		leaq	.LC77(%rip), %rdi
 1919      000000
 1920 0c6f E8000000 		call	puts@PLT
 1920      00
 1921              	.LVL197:
 1922              	.LBE323:
 1923              	.LBE322:
 202:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 1924              		.loc 1 202 0
 1925 0c74 488DB424 		leaq	128(%rsp), %rsi
 1925      80000000 
 1926 0c7c 4C89E7   		movq	%r12, %rdi
 1927 0c7f E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1927      00
 1928              	.LVL198:
 1929              	.LBB324:
 1930              	.LBB325:
 1931              		.loc 2 104 0
 1932 0c84 488D3D00 		leaq	.LC78(%rip), %rdi
 1932      000000
 1933 0c8b E8000000 		call	puts@PLT
 1933      00
 1934              	.LVL199:
 1935              	.LBE325:
 1936              	.LBE324:
 205:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 1937              		.loc 1 205 0
 1938 0c90 4889EE   		movq	%rbp, %rsi
 1939 0c93 4C89E7   		movq	%r12, %rdi
 1940 0c96 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1940      00
 1941              	.LVL200:
 1942              	.LBB326:
 1943              	.LBB327:
 1944              		.loc 2 104 0
 1945 0c9b 488D3D00 		leaq	.LC79(%rip), %rdi
 1945      000000
 1946 0ca2 E8000000 		call	puts@PLT
 1946      00
 1947              	.LVL201:
 1948              	.LBE327:
 1949              	.LBE326:
GAS LISTING /tmp/cco7wVnW.s 			page 64


 208:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 1950              		.loc 1 208 0
 1951 0ca7 488D9424 		leaq	160(%rsp), %rdx
 1951      A0000000 
 1952 0caf 48895424 		movq	%rdx, 16(%rsp)
 1952      10
 1953 0cb4 4889D6   		movq	%rdx, %rsi
 1954 0cb7 4C89E7   		movq	%r12, %rdi
 1955 0cba E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1955      00
 1956              	.LVL202:
 1957              	.LBB328:
 1958              	.LBB329:
 1959              		.loc 2 104 0
 1960 0cbf 488D3D00 		leaq	.LC80(%rip), %rdi
 1960      000000
 1961 0cc6 E8000000 		call	puts@PLT
 1961      00
 1962              	.LVL203:
 1963              	.LBE329:
 1964              	.LBE328:
 211:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 1965              		.loc 1 211 0
 1966 0ccb 4C89FE   		movq	%r15, %rsi
 1967 0cce 4C89EF   		movq	%r13, %rdi
 1968 0cd1 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1968      00
 1969              	.LVL204:
 1970              	.LBB330:
 1971              	.LBB331:
 1972              		.loc 2 104 0
 1973 0cd6 488D3D00 		leaq	.LC81(%rip), %rdi
 1973      000000
 1974 0cdd E8000000 		call	puts@PLT
 1974      00
 1975              	.LVL205:
 1976              	.LBE331:
 1977              	.LBE330:
 214:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 1978              		.loc 1 214 0
 1979 0ce2 4C89F6   		movq	%r14, %rsi
 1980 0ce5 4889EF   		movq	%rbp, %rdi
 1981 0ce8 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1981      00
 1982              	.LVL206:
 1983              	.LBB332:
 1984              	.LBB333:
 1985              		.loc 2 104 0
 1986 0ced 488D3D00 		leaq	.LC82(%rip), %rdi
 1986      000000
 1987 0cf4 E8000000 		call	puts@PLT
 1987      00
 1988              	.LVL207:
 1989              	.LBE333:
 1990              	.LBE332:
 217:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 1991              		.loc 1 217 0
GAS LISTING /tmp/cco7wVnW.s 			page 65


 1992 0cf9 488B7424 		movq	8(%rsp), %rsi
 1992      08
 1993 0cfe 4889EF   		movq	%rbp, %rdi
 1994 0d01 E8000000 		call	msg_wrapper_rm_float_from_obj@PLT
 1994      00
 1995              	.LVL208:
 1996              	.LBB334:
 1997              	.LBB335:
 1998              		.loc 2 104 0
 1999 0d06 488D3D00 		leaq	.LC83(%rip), %rdi
 1999      000000
 2000 0d0d E8000000 		call	puts@PLT
 2000      00
 2001              	.LVL209:
 2002              	.LBE335:
 2003              	.LBE334:
 220:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 2004              		.loc 1 220 0
 2005 0d12 488B3424 		movq	(%rsp), %rsi
 2006 0d16 4889EF   		movq	%rbp, %rdi
 2007 0d19 E8000000 		call	msg_wrapper_rm_int_from_obj@PLT
 2007      00
 2008              	.LVL210:
 2009              	.LBB336:
 2010              	.LBB337:
 2011              		.loc 2 104 0
 2012 0d1e 488D3D00 		leaq	.LC84(%rip), %rdi
 2012      000000
 2013 0d25 E8000000 		call	puts@PLT
 2013      00
 2014              	.LVL211:
 2015              	.LBE337:
 2016              	.LBE336:
 223:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 2017              		.loc 1 223 0
 2018 0d2a 4C89EE   		movq	%r13, %rsi
 2019 0d2d 4C89E7   		movq	%r12, %rdi
 2020 0d30 E8000000 		call	msg_wrapper_rm_obj_from_msg@PLT
 2020      00
 2021              	.LVL212:
 2022              	.LBB338:
 2023              	.LBB339:
 2024              		.loc 2 104 0
 2025 0d35 488D3D00 		leaq	.LC85(%rip), %rdi
 2025      000000
 2026 0d3c E8000000 		call	puts@PLT
 2026      00
 2027              	.LVL213:
 2028              	.LBE339:
 2029              	.LBE338:
 226:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 2030              		.loc 1 226 0
 2031 0d41 488B7424 		movq	16(%rsp), %rsi
 2031      10
 2032 0d46 4C89E7   		movq	%r12, %rdi
 2033 0d49 E8000000 		call	msg_wrapper_rm_cmd_from_msg@PLT
 2033      00
GAS LISTING /tmp/cco7wVnW.s 			page 66


 2034              	.LVL214:
 2035              	.LBB340:
 2036              	.LBB341:
 2037              		.loc 2 104 0
 2038 0d4e 488D3D00 		leaq	.LC86(%rip), %rdi
 2038      000000
 2039 0d55 E8000000 		call	puts@PLT
 2039      00
 2040              	.LVL215:
 2041              	.LBE341:
 2042              	.LBE340:
 229:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 2043              		.loc 1 229 0
 2044 0d5a 4C89EE   		movq	%r13, %rsi
 2045 0d5d 4C89E7   		movq	%r12, %rdi
 2046 0d60 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 2046      00
 2047              	.LVL216:
 2048              	.LBB342:
 2049              	.LBB343:
 2050              		.loc 2 104 0
 2051 0d65 488D3D00 		leaq	.LC87(%rip), %rdi
 2051      000000
 2052 0d6c E8000000 		call	puts@PLT
 2052      00
 2053              	.LVL217:
 2054              	.LBE343:
 2055              	.LBE342:
 2056              	.LBB344:
 2057              	.LBB345:
 2058 0d71 488D3D00 		leaq	.LC88(%rip), %rdi
 2058      000000
 2059 0d78 E8000000 		call	puts@PLT
 2059      00
 2060              	.LVL218:
 2061              	.LBE345:
 2062              	.LBE344:
 233:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2063              		.loc 1 233 0
 2064 0d7d 4C8BA424 		movq	824(%rsp), %r12
 2064      38030000 
 2065 0d85 FFB42438 		pushq	312(%rsp)
 2065      010000
 2066              	.LCFI101:
 2067              		.cfi_def_cfa_offset 1912
 2068 0d8c FFB42438 		pushq	312(%rsp)
 2068      010000
 2069              	.LCFI102:
 2070              		.cfi_def_cfa_offset 1920
 2071 0d93 FFB42438 		pushq	312(%rsp)
 2071      010000
 2072              	.LCFI103:
 2073              		.cfi_def_cfa_offset 1928
 2074 0d9a FFB42438 		pushq	312(%rsp)
 2074      010000
 2075              	.LCFI104:
 2076              		.cfi_def_cfa_offset 1936
GAS LISTING /tmp/cco7wVnW.s 			page 67


 2077 0da1 41FFD4   		call	*%r12
 2078              	.LVL219:
 2079              	.LBB346:
 2080              	.LBB347:
 2081              		.loc 2 104 0
 2082 0da4 4883C420 		addq	$32, %rsp
 2083              	.LCFI105:
 2084              		.cfi_def_cfa_offset 1904
 2085 0da8 488D3D00 		leaq	.LC20(%rip), %rdi
 2085      000000
 2086 0daf E8000000 		call	puts@PLT
 2086      00
 2087              	.LVL220:
 2088              	.LBE347:
 2089              	.LBE346:
 238:src/main.c    ****     char buff[1000] = {0};
 2090              		.loc 1 238 0
 2091 0db4 488DBC24 		leaq	832(%rsp), %rdi
 2091      40030000 
 2092 0dbc 41BD0000 		movl	$0, %r13d
 2092      0000
 2093 0dc2 B97D0000 		movl	$125, %ecx
 2093      00
 2094 0dc7 4C89E8   		movq	%r13, %rax
 2095 0dca F348AB   		rep stosq
 239:src/main.c    ****     hnd.init_str_buff(buff, 1000);
 2096              		.loc 1 239 0
 2097 0dcd 488DAC24 		leaq	832(%rsp), %rbp
 2097      40030000 
 2098 0dd5 BEE80300 		movl	$1000, %esi
 2098      00
 2099 0dda 4889EF   		movq	%rbp, %rdi
 2100 0ddd FF942428 		call	*808(%rsp)
 2100      030000
 2101              	.LVL221:
 240:src/main.c    ****     hnd.enable_buff();
 2102              		.loc 1 240 0
 2103 0de4 FF942418 		call	*792(%rsp)
 2103      030000
 2104              	.LVL222:
 241:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2105              		.loc 1 241 0
 2106 0deb FFB42438 		pushq	312(%rsp)
 2106      010000
 2107              	.LCFI106:
 2108              		.cfi_def_cfa_offset 1912
 2109 0df2 FFB42438 		pushq	312(%rsp)
 2109      010000
 2110              	.LCFI107:
 2111              		.cfi_def_cfa_offset 1920
 2112 0df9 FFB42438 		pushq	312(%rsp)
 2112      010000
 2113              	.LCFI108:
 2114              		.cfi_def_cfa_offset 1928
 2115 0e00 FFB42438 		pushq	312(%rsp)
 2115      010000
 2116              	.LCFI109:
GAS LISTING /tmp/cco7wVnW.s 			page 68


 2117              		.cfi_def_cfa_offset 1936
 2118 0e07 41FFD4   		call	*%r12
 2119              	.LVL223:
 2120              	.LBB348:
 2121              	.LBB349:
 2122              		.loc 2 104 0
 2123 0e0a 4883C420 		addq	$32, %rsp
 2124              	.LCFI110:
 2125              		.cfi_def_cfa_offset 1904
 2126 0e0e 488D3D00 		leaq	.LC89(%rip), %rdi
 2126      000000
 2127 0e15 E8000000 		call	puts@PLT
 2127      00
 2128              	.LVL224:
 2129              	.LBE349:
 2130              	.LBE348:
 243:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2131              		.loc 1 243 0
 2132 0e1a FFB42438 		pushq	312(%rsp)
 2132      010000
 2133              	.LCFI111:
 2134              		.cfi_def_cfa_offset 1912
 2135 0e21 FFB42438 		pushq	312(%rsp)
 2135      010000
 2136              	.LCFI112:
 2137              		.cfi_def_cfa_offset 1920
 2138 0e28 FFB42438 		pushq	312(%rsp)
 2138      010000
 2139              	.LCFI113:
 2140              		.cfi_def_cfa_offset 1928
 2141 0e2f FFB42438 		pushq	312(%rsp)
 2141      010000
 2142              	.LCFI114:
 2143              		.cfi_def_cfa_offset 1936
 2144 0e36 41FFD4   		call	*%r12
 2145              	.LVL225:
 2146              	.LBB350:
 2147              	.LBB351:
 2148              		.loc 2 104 0
 2149 0e39 4883C420 		addq	$32, %rsp
 2150              	.LCFI115:
 2151              		.cfi_def_cfa_offset 1904
 2152 0e3d 488D3D00 		leaq	.LC90(%rip), %rdi
 2152      000000
 2153 0e44 E8000000 		call	puts@PLT
 2153      00
 2154              	.LVL226:
 2155              	.LBE351:
 2156              	.LBE350:
 245:src/main.c    ****     hnd.disable_buff();
 2157              		.loc 1 245 0
 2158 0e49 FF942420 		call	*800(%rsp)
 2158      030000
 2159              	.LVL227:
 2160              	.LBB352:
 2161              	.LBB353:
 2162              		.loc 2 104 0
GAS LISTING /tmp/cco7wVnW.s 			page 69


 2163 0e50 488D3D00 		leaq	.LC20(%rip), %rdi
 2163      000000
 2164 0e57 E8000000 		call	puts@PLT
 2164      00
 2165              	.LVL228:
 2166              	.LBE353:
 2167              	.LBE352:
 2168              	.LBB354:
 2169              	.LBB355:
 2170 0e5c 488D3D00 		leaq	.LC91(%rip), %rdi
 2170      000000
 2171 0e63 E8000000 		call	puts@PLT
 2171      00
 2172              	.LVL229:
 2173              	.LBE355:
 2174              	.LBE354:
 2175              	.LBB356:
 2176              	.LBB357:
 2177 0e68 4889EA   		movq	%rbp, %rdx
 2178 0e6b 488D3500 		leaq	.LC24(%rip), %rsi
 2178      000000
 2179 0e72 BF010000 		movl	$1, %edi
 2179      00
 2180 0e77 B8000000 		movl	$0, %eax
 2180      00
 2181 0e7c E8000000 		call	__printf_chk@PLT
 2181      00
 2182              	.LVL230:
 2183              	.LBE357:
 2184              	.LBE356:
 2185              	.LBB358:
 2186              	.LBB359:
 2187 0e81 488D3D00 		leaq	.LC92(%rip), %rdi
 2187      000000
 2188 0e88 E8000000 		call	puts@PLT
 2188      00
 2189              	.LVL231:
 2190              	.LBE359:
 2191              	.LBE358:
 252:src/main.c    ****     msg_reparsed = msg_get(buff, "wrapped_msg", 1000);
 2192              		.loc 1 252 0
 2193 0e8d 488DBC24 		leaq	448(%rsp), %rdi
 2193      C0010000 
 2194 0e95 B9E80300 		movl	$1000, %ecx
 2194      00
 2195 0e9a 488D1500 		leaq	.LC48(%rip), %rdx
 2195      000000
 2196 0ea1 4889EE   		movq	%rbp, %rsi
 2197 0ea4 E8000000 		call	msg_get@PLT
 2197      00
 2198              	.LVL232:
 253:src/main.c    ****     hnd.print_msg(msg_reparsed); printf("\n\n");
 2199              		.loc 1 253 0
 2200 0ea9 FFB424D8 		pushq	472(%rsp)
 2200      010000
 2201              	.LCFI116:
 2202              		.cfi_def_cfa_offset 1912
GAS LISTING /tmp/cco7wVnW.s 			page 70


 2203 0eb0 FFB424D8 		pushq	472(%rsp)
 2203      010000
 2204              	.LCFI117:
 2205              		.cfi_def_cfa_offset 1920
 2206 0eb7 FFB424D8 		pushq	472(%rsp)
 2206      010000
 2207              	.LCFI118:
 2208              		.cfi_def_cfa_offset 1928
 2209 0ebe FFB424D8 		pushq	472(%rsp)
 2209      010000
 2210              	.LCFI119:
 2211              		.cfi_def_cfa_offset 1936
 2212 0ec5 FF942418 		call	*792(%rsp)
 2212      030000
 2213              	.LVL233:
 2214              	.LBB360:
 2215              	.LBB361:
 2216              		.loc 2 104 0
 2217 0ecc 4883C420 		addq	$32, %rsp
 2218              	.LCFI120:
 2219              		.cfi_def_cfa_offset 1904
 2220 0ed0 488D3D00 		leaq	.LC20(%rip), %rdi
 2220      000000
 2221 0ed7 E8000000 		call	puts@PLT
 2221      00
 2222              	.LVL234:
 2223              	.LBE361:
 2224              	.LBE360:
 254:src/main.c    ****     obj_reparsed = msg_parser_get_obj(msg_reparsed, "wrapped_obj2");
 2225              		.loc 1 254 0
 2226 0edc 488DBC24 		leaq	480(%rsp), %rdi
 2226      E0010000 
 2227 0ee4 FFB424D8 		pushq	472(%rsp)
 2227      010000
 2228              	.LCFI121:
 2229              		.cfi_def_cfa_offset 1912
 2230 0eeb FFB424D8 		pushq	472(%rsp)
 2230      010000
 2231              	.LCFI122:
 2232              		.cfi_def_cfa_offset 1920
 2233 0ef2 FFB424D8 		pushq	472(%rsp)
 2233      010000
 2234              	.LCFI123:
 2235              		.cfi_def_cfa_offset 1928
 2236 0ef9 FFB424D8 		pushq	472(%rsp)
 2236      010000
 2237              	.LCFI124:
 2238              		.cfi_def_cfa_offset 1936
 2239 0f00 488D3500 		leaq	.LC75(%rip), %rsi
 2239      000000
 2240 0f07 E8000000 		call	msg_parser_get_obj@PLT
 2240      00
 2241              	.LVL235:
 255:src/main.c    ****     hnd.print_str(obj_reparsed.content); printf(" len: %d\n\n", obj_reparsed.content.len);
 2242              		.loc 1 255 0
 2243 0f0c 4883C420 		addq	$32, %rsp
 2244              	.LCFI125:
GAS LISTING /tmp/cco7wVnW.s 			page 71


 2245              		.cfi_def_cfa_offset 1904
 2246 0f10 488BBC24 		movq	496(%rsp), %rdi
 2246      F0010000 
 2247 0f18 488BB424 		movq	504(%rsp), %rsi
 2247      F8010000 
 2248 0f20 FFD3     		call	*%rbx
 2249              	.LVL236:
 2250 0f22 0FB79424 		movzwl	504(%rsp), %edx
 2250      F8010000 
 2251              	.LVL237:
 2252              	.LBB362:
 2253              	.LBB363:
 2254              		.loc 2 104 0
 2255 0f2a 488D3500 		leaq	.LC44(%rip), %rsi
 2255      000000
 2256 0f31 BF010000 		movl	$1, %edi
 2256      00
 2257 0f36 B8000000 		movl	$0, %eax
 2257      00
 2258 0f3b E8000000 		call	__printf_chk@PLT
 2258      00
 2259              	.LVL238:
 2260              	.LBE363:
 2261              	.LBE362:
 258:src/main.c    ****     msg_parser_get_float(&f_val, obj_reparsed, "f2");
 2262              		.loc 1 258 0
 2263 0f40 488D7C24 		leaq	120(%rsp), %rdi
 2263      78
 2264 0f45 FFB424F8 		pushq	504(%rsp)
 2264      010000
 2265              	.LCFI126:
 2266              		.cfi_def_cfa_offset 1912
 2267 0f4c FFB424F8 		pushq	504(%rsp)
 2267      010000
 2268              	.LCFI127:
 2269              		.cfi_def_cfa_offset 1920
 2270 0f53 FFB424F8 		pushq	504(%rsp)
 2270      010000
 2271              	.LCFI128:
 2272              		.cfi_def_cfa_offset 1928
 2273 0f5a FFB424F8 		pushq	504(%rsp)
 2273      010000
 2274              	.LCFI129:
 2275              		.cfi_def_cfa_offset 1936
 2276 0f61 488D3500 		leaq	.LC73(%rip), %rsi
 2276      000000
 2277 0f68 E8000000 		call	msg_parser_get_float@PLT
 2277      00
 2278              	.LVL239:
 259:src/main.c    ****     msg_parser_get_int(&i_val, obj_reparsed, "i1");
 2279              		.loc 1 259 0
 2280 0f6d 4883C420 		addq	$32, %rsp
 2281              	.LCFI130:
 2282              		.cfi_def_cfa_offset 1904
 2283 0f71 488D7C24 		leaq	124(%rsp), %rdi
 2283      7C
 2284 0f76 FFB424F8 		pushq	504(%rsp)
GAS LISTING /tmp/cco7wVnW.s 			page 72


 2284      010000
 2285              	.LCFI131:
 2286              		.cfi_def_cfa_offset 1912
 2287 0f7d FFB424F8 		pushq	504(%rsp)
 2287      010000
 2288              	.LCFI132:
 2289              		.cfi_def_cfa_offset 1920
 2290 0f84 FFB424F8 		pushq	504(%rsp)
 2290      010000
 2291              	.LCFI133:
 2292              		.cfi_def_cfa_offset 1928
 2293 0f8b FFB424F8 		pushq	504(%rsp)
 2293      010000
 2294              	.LCFI134:
 2295              		.cfi_def_cfa_offset 1936
 2296 0f92 488D3500 		leaq	.LC65(%rip), %rsi
 2296      000000
 2297 0f99 E8000000 		call	msg_parser_get_int@PLT
 2297      00
 2298              	.LVL240:
 260:src/main.c    ****     printf("reparsed $i = %d $f2 = %f\n\n", i_val, f_val);
 2299              		.loc 1 260 0
 2300 0f9e 660FEFC0 		pxor	%xmm0, %xmm0
 2301 0fa2 F30F5A84 		cvtss2sd	152(%rsp), %xmm0
 2301      24980000 
 2301      00
 2302              	.LVL241:
 2303              	.LBB364:
 2304              	.LBB365:
 2305              		.loc 2 104 0
 2306 0fab 4883C420 		addq	$32, %rsp
 2307              	.LCFI135:
 2308              		.cfi_def_cfa_offset 1904
 2309 0faf 8B54247C 		movl	124(%rsp), %edx
 2310 0fb3 488D3500 		leaq	.LC93(%rip), %rsi
 2310      000000
 2311 0fba BF010000 		movl	$1, %edi
 2311      00
 2312 0fbf B8010000 		movl	$1, %eax
 2312      00
 2313 0fc4 E8000000 		call	__printf_chk@PLT
 2313      00
 2314              	.LVL242:
 2315              	.LBE365:
 2316              	.LBE364:
 2317              	.LBB366:
 2318              	.LBB367:
 2319 0fc9 488D3D00 		leaq	.LC20(%rip), %rdi
 2319      000000
 2320 0fd0 E8000000 		call	puts@PLT
 2320      00
 2321              	.LVL243:
 2322              	.LBE367:
 2323              	.LBE366:
 2324              	.LBB368:
 2325              	.LBB369:
 2326 0fd5 488D3D00 		leaq	.LC94(%rip), %rdi
GAS LISTING /tmp/cco7wVnW.s 			page 73


 2326      000000
 2327 0fdc E8000000 		call	puts@PLT
 2327      00
 2328              	.LVL244:
 2329              	.LBE369:
 2330              	.LBE368:
 2331              	.LBB370:
 2332              	.LBB371:
 2333 0fe1 488D3D00 		leaq	.LC95(%rip), %rdi
 2333      000000
 2334 0fe8 E8000000 		call	puts@PLT
 2334      00
 2335              	.LVL245:
 2336              	.LBE371:
 2337              	.LBE370:
 2338              	.LBB372:
 2339              	.LBB373:
 2340              		.file 4 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2018 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
GAS LISTING /tmp/cco7wVnW.s 			page 74


  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 2341              		.loc 4 71 0
 2342 0fed B97D0000 		movl	$125, %ecx
 2342      00
 2343 0ff2 4889EF   		movq	%rbp, %rdi
 2344 0ff5 4C89E8   		movq	%r13, %rax
 2345 0ff8 F348AB   		rep stosq
 2346              	.LVL246:
 2347              	.LBE373:
 2348              	.LBE372:
 269:src/main.c    ****     common_buff.buff = buff;
 2349              		.loc 1 269 0
 2350 0ffb 48892D00 		movq	%rbp, common_buff(%rip)
 2350      000000
 270:src/main.c    ****     common_buff.buff_size = 1000;
 2351              		.loc 1 270 0
 2352 1002 66C70500 		movw	$1000, 8+common_buff(%rip)
 2352      000000E8 
 2352      03
 272:src/main.c    ****     if(pthread_mutex_init(&outp_lock, NULL)) return 0;
 2353              		.loc 1 272 0
 2354 100b BE000000 		movl	$0, %esi
 2354      00
 2355 1010 488D3D00 		leaq	outp_lock(%rip), %rdi
 2355      000000
 2356 1017 E8000000 		call	pthread_mutex_init@PLT
GAS LISTING /tmp/cco7wVnW.s 			page 75


 2356      00
 2357              	.LVL247:
 2358 101c 85C0     		testl	%eax, %eax
 2359 101e 7474     		je	.L33
 2360              	.LVL248:
 2361              	.L27:
 289:src/main.c    **** }
 2362              		.loc 1 289 0
 2363 1020 B8000000 		movl	$0, %eax
 2363      00
 2364 1025 488B8C24 		movq	1832(%rsp), %rcx
 2364      28070000 
 2365 102d 6448330C 		xorq	%fs:40, %rcx
 2365      25280000 
 2365      00
 2366 1036 0F850601 		jne	.L34
 2366      0000
 2367 103c 4881C438 		addq	$1848, %rsp
 2367      070000
 2368              	.LCFI136:
 2369              		.cfi_remember_state
 2370              		.cfi_def_cfa_offset 56
 2371 1043 5B       		popq	%rbx
 2372              	.LCFI137:
 2373              		.cfi_def_cfa_offset 48
 2374 1044 5D       		popq	%rbp
 2375              	.LCFI138:
 2376              		.cfi_def_cfa_offset 40
 2377 1045 415C     		popq	%r12
 2378              	.LCFI139:
 2379              		.cfi_def_cfa_offset 32
 2380 1047 415D     		popq	%r13
 2381              	.LCFI140:
 2382              		.cfi_def_cfa_offset 24
 2383 1049 415E     		popq	%r14
 2384              	.LCFI141:
 2385              		.cfi_def_cfa_offset 16
 2386 104b 415F     		popq	%r15
 2387              	.LCFI142:
 2388              		.cfi_def_cfa_offset 8
 2389 104d C3       		ret
 2390              	.LVL249:
 2391              	.L20:
 2392              	.LCFI143:
 2393              		.cfi_restore_state
 2394              	.LBB374:
 2395              	.LBB375:
 2396              		.loc 2 104 0
 2397 104e 488D3D00 		leaq	.LC21(%rip), %rdi
 2397      000000
 2398 1055 E8000000 		call	puts@PLT
 2398      00
 2399              	.LVL250:
 2400 105a E9BBF0FF 		jmp	.L21
 2400      FF
 2401              	.LVL251:
 2402              	.L29:
GAS LISTING /tmp/cco7wVnW.s 			page 76


 2403              	.LBE375:
 2404              	.LBE374:
  81:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 2405              		.loc 1 81 0
 2406 105f 488D1500 		leaq	.LC13(%rip), %rdx
 2406      000000
 2407 1066 E9F7F0FF 		jmp	.L22
 2407      FF
 2408              	.L30:
  85:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 2409              		.loc 1 85 0
 2410 106b 488D1500 		leaq	.LC13(%rip), %rdx
 2410      000000
 2411 1072 E949F1FF 		jmp	.L23
 2411      FF
 2412              	.L31:
  89:src/main.c    ****     printf("%s\n\n", msg_get_cmd_content(cmd) ? "True" : "False");
 2413              		.loc 1 89 0
 2414 1077 488D1500 		leaq	.LC13(%rip), %rdx
 2414      000000
 2415 107e E99BF1FF 		jmp	.L24
 2415      FF
 2416              	.L25:
 2417              	.LVL252:
 2418              	.LBB376:
 2419              	.LBB377:
 2420              		.loc 2 104 0
 2421 1083 488D3D00 		leaq	.LC45(%rip), %rdi
 2421      000000
 2422 108a E8000000 		call	puts@PLT
 2422      00
 2423              	.LVL253:
 2424 108f E91AF4FF 		jmp	.L26
 2424      FF
 2425              	.LVL254:
 2426              	.L33:
 2427              	.LBE377:
 2428              	.LBE376:
 274:src/main.c    ****     pthread_create(&thr_master, NULL, thread_mcu_master_fnc, (void *) &common_buff);
 2429              		.loc 1 274 0
 2430 1094 488D0D00 		leaq	common_buff(%rip), %rcx
 2430      000000
 2431 109b 488D1500 		leaq	thread_mcu_master_fnc(%rip), %rdx
 2431      000000
 2432 10a2 BE000000 		movl	$0, %esi
 2432      00
 2433 10a7 488D3D00 		leaq	thr_master(%rip), %rdi
 2433      000000
 2434 10ae E8000000 		call	pthread_create@PLT
 2434      00
 2435              	.LVL255:
 275:src/main.c    ****     pthread_create(&thr_slave, NULL, thread_mcu_slave_fnc, (void *) &common_buff);
 2436              		.loc 1 275 0
 2437 10b3 488D0D00 		leaq	common_buff(%rip), %rcx
 2437      000000
 2438 10ba 488D1500 		leaq	thread_mcu_slave_fnc(%rip), %rdx
 2438      000000
GAS LISTING /tmp/cco7wVnW.s 			page 77


 2439 10c1 BE000000 		movl	$0, %esi
 2439      00
 2440 10c6 488D3D00 		leaq	thr_slave(%rip), %rdi
 2440      000000
 2441 10cd E8000000 		call	pthread_create@PLT
 2441      00
 2442              	.LVL256:
 278:src/main.c    ****     pthread_join(thr_master, NULL);
 2443              		.loc 1 278 0
 2444 10d2 BE000000 		movl	$0, %esi
 2444      00
 2445 10d7 488B3D00 		movq	thr_master(%rip), %rdi
 2445      000000
 2446 10de E8000000 		call	pthread_join@PLT
 2446      00
 2447              	.LVL257:
 279:src/main.c    ****     pthread_join(thr_slave, NULL);
 2448              		.loc 1 279 0
 2449 10e3 BE000000 		movl	$0, %esi
 2449      00
 2450 10e8 488B3D00 		movq	thr_slave(%rip), %rdi
 2450      000000
 2451 10ef E8000000 		call	pthread_join@PLT
 2451      00
 2452              	.LVL258:
 280:src/main.c    ****     pthread_mutex_destroy(&outp_lock);
 2453              		.loc 1 280 0
 2454 10f4 488D3D00 		leaq	outp_lock(%rip), %rdi
 2454      000000
 2455 10fb E8000000 		call	pthread_mutex_destroy@PLT
 2455      00
 2456              	.LVL259:
 2457              	.LBB378:
 2458              	.LBB379:
 2459              		.loc 2 104 0
 2460 1100 488D3D00 		leaq	.LC20(%rip), %rdi
 2460      000000
 2461 1107 E8000000 		call	puts@PLT
 2461      00
 2462              	.LVL260:
 2463              	.LBE379:
 2464              	.LBE378:
 285:src/main.c    ****     end = clock();
 2465              		.loc 1 285 0
 2466 110c E8000000 		call	clock@PLT
 2466      00
 2467              	.LVL261:
 286:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 2468              		.loc 1 286 0
 2469 1111 482B4424 		subq	24(%rsp), %rax
 2469      18
 2470              	.LVL262:
 2471 1116 660FEFC0 		pxor	%xmm0, %xmm0
 2472 111a F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2472      C0
 2473 111f F20F5E05 		divsd	.LC96(%rip), %xmm0
 2473      00000000 
GAS LISTING /tmp/cco7wVnW.s 			page 78


 2474              	.LVL263:
 2475              	.LBB380:
 2476              	.LBB381:
 2477              		.loc 2 104 0
 2478 1127 488D3500 		leaq	.LC97(%rip), %rsi
 2478      000000
 2479 112e BF010000 		movl	$1, %edi
 2479      00
 2480 1133 B8010000 		movl	$1, %eax
 2480      00
 2481 1138 E8000000 		call	__printf_chk@PLT
 2481      00
 2482              	.LVL264:
 2483              	.LBE381:
 2484              	.LBE380:
 288:src/main.c    ****     return 0;
 2485              		.loc 1 288 0
 2486 113d E9DEFEFF 		jmp	.L27
 2486      FF
 2487              	.L34:
 289:src/main.c    **** }
 2488              		.loc 1 289 0
 2489 1142 E8000000 		call	__stack_chk_fail@PLT
 2489      00
 2490              	.LVL265:
 2491              		.cfi_endproc
 2492              	.LFE68:
 2494              		.comm	common_buff,16,16
 2495              		.comm	thr_slave,8,8
 2496              		.comm	thr_master,8,8
 2497              		.comm	outp_lock,40,32
 2498              		.globl	test_str1
 2499              		.section	.data.test_str1,"aw",@progbits
 2500              		.align 32
 2503              	test_str1:
 2504 0000 23746573 		.string	"#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n\r@obj2  (
 2504      745F6D73 
 2504      677B3C43 
 2504      4D44313E 
 2504      09092040 
 2505              		.section	.rodata.cst4,"aM",@progbits,4
 2506              		.align 4
 2507              	.LC9:
 2508 0000 CDCC0142 		.long	1107414221
 2509              		.align 4
 2510              	.LC10:
 2511 0004 52B8EA41 		.long	1105901650
 2512              		.align 4
 2513              	.LC70:
 2514 0008 10069E3F 		.long	1067320848
 2515              		.align 4
 2516              	.LC74:
 2517 000c 9643ABBE 		.long	3198894998
 2518              		.section	.rodata.cst8,"aM",@progbits,8
 2519              		.align 8
 2520              	.LC96:
 2521 0000 00000000 		.long	0
GAS LISTING /tmp/cco7wVnW.s 			page 79


 2522 0004 80842E41 		.long	1093567616
 2523              		.text
 2524              	.Letext0:
 2525              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 2526              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2527              		.file 7 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 2528              		.file 8 "/usr/include/stdio.h"
 2529              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2530              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 2531              		.file 11 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
 2532              		.file 12 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
 2533              		.file 13 "/usr/include/time.h"
 2534              		.file 14 "/usr/include/unistd.h"
 2535              		.file 15 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h"
 2536              		.file 16 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 2537              		.file 17 "inc/mcu_msg_cfg.h"
 2538              		.file 18 "inc/mcu_msg.h"
 2539              		.file 19 "/usr/include/pthread.h"
 2540              		.file 20 "<built-in>"
GAS LISTING /tmp/cco7wVnW.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cco7wVnW.s:31     .text.thread_mcu_master_fnc:0000000000000000 thread_mcu_master_fnc
                            *COM*:0000000000000028 outp_lock
     /tmp/cco7wVnW.s:323    .text.thread_mcu_slave_fnc:0000000000000000 thread_mcu_slave_fnc
     /tmp/cco7wVnW.s:777    .text.main:0000000000000000 main
     /tmp/cco7wVnW.s:2503   .data.test_str1:0000000000000000 test_str1
                            *COM*:0000000000000010 common_buff
                            *COM*:0000000000000008 thr_master
                            *COM*:0000000000000008 thr_slave
     /tmp/cco7wVnW.s:5      .rodata.thread_mcu_master_fnc.str1.1:0000000000000000 .LC0
     /tmp/cco7wVnW.s:7      .rodata.thread_mcu_master_fnc.str1.1:000000000000000b .LC1
     /tmp/cco7wVnW.s:9      .rodata.thread_mcu_master_fnc.str1.1:0000000000000014 .LC2
     /tmp/cco7wVnW.s:11     .rodata.thread_mcu_master_fnc.str1.1:000000000000001f .LC3
     /tmp/cco7wVnW.s:13     .rodata.thread_mcu_master_fnc.str1.1:0000000000000029 .LC4
     /tmp/cco7wVnW.s:15     .rodata.thread_mcu_master_fnc.str1.1:000000000000002e .LC5
     /tmp/cco7wVnW.s:22     .rodata.thread_mcu_master_fnc.str1.1:0000000000000031 .LC7
     /tmp/cco7wVnW.s:26     .rodata.thread_mcu_master_fnc.str1.8:0000000000000020 .LC8
     /tmp/cco7wVnW.s:19     .rodata.thread_mcu_master_fnc.str1.8:0000000000000000 .LC6
     /tmp/cco7wVnW.s:2507   .rodata.cst4:0000000000000000 .LC9
     /tmp/cco7wVnW.s:2510   .rodata.cst4:0000000000000004 .LC10
     /tmp/cco7wVnW.s:318    .rodata.thread_mcu_slave_fnc.str1.1:0000000000000000 .LC11
     /tmp/cco7wVnW.s:571    .rodata.main.str1.1:000000000000000b .LC14
     /tmp/cco7wVnW.s:573    .rodata.main.str1.1:000000000000001f .LC15
     /tmp/cco7wVnW.s:575    .rodata.main.str1.1:0000000000000033 .LC16
     /tmp/cco7wVnW.s:577    .rodata.main.str1.1:0000000000000046 .LC17
     /tmp/cco7wVnW.s:579    .rodata.main.str1.1:000000000000005d .LC18
     /tmp/cco7wVnW.s:583    .rodata.main.str1.8:0000000000000000 .LC19
     /tmp/cco7wVnW.s:586    .rodata.main.str1.1:0000000000000066 .LC20
     /tmp/cco7wVnW.s:590    .rodata.main.str1.1:000000000000007c .LC22
     /tmp/cco7wVnW.s:592    .rodata.main.str1.1:0000000000000093 .LC23
     /tmp/cco7wVnW.s:567    .rodata.main.str1.1:0000000000000000 .LC12
     /tmp/cco7wVnW.s:594    .rodata.main.str1.1:0000000000000098 .LC24
     /tmp/cco7wVnW.s:596    .rodata.main.str1.1:000000000000009d .LC25
     /tmp/cco7wVnW.s:598    .rodata.main.str1.1:00000000000000b4 .LC26
     /tmp/cco7wVnW.s:600    .rodata.main.str1.1:00000000000000b9 .LC27
     /tmp/cco7wVnW.s:602    .rodata.main.str1.1:00000000000000d4 .LC28
     /tmp/cco7wVnW.s:604    .rodata.main.str1.1:00000000000000dd .LC29
     /tmp/cco7wVnW.s:606    .rodata.main.str1.1:00000000000000f0 .LC30
     /tmp/cco7wVnW.s:610    .rodata.main.str1.8:0000000000000028 .LC31
     /tmp/cco7wVnW.s:613    .rodata.main.str1.1:00000000000000f5 .LC32
     /tmp/cco7wVnW.s:615    .rodata.main.str1.1:0000000000000108 .LC33
     /tmp/cco7wVnW.s:619    .rodata.main.str1.8:0000000000000050 .LC34
     /tmp/cco7wVnW.s:622    .rodata.main.str1.8:0000000000000078 .LC35
     /tmp/cco7wVnW.s:625    .rodata.main.str1.1:000000000000010d .LC37
     /tmp/cco7wVnW.s:627    .rodata.main.str1.1:0000000000000113 .LC38
     /tmp/cco7wVnW.s:631    .rodata.main.str1.8:00000000000000a0 .LC39
     /tmp/cco7wVnW.s:634    .rodata.main.str1.1:0000000000000126 .LC40
     /tmp/cco7wVnW.s:636    .rodata.main.str1.1:000000000000012c .LC41
     /tmp/cco7wVnW.s:640    .rodata.main.str1.8:00000000000000c0 .LC42
     /tmp/cco7wVnW.s:643    .rodata.main.str1.1:0000000000000142 .LC43
     /tmp/cco7wVnW.s:645    .rodata.main.str1.1:0000000000000148 .LC44
     /tmp/cco7wVnW.s:649    .rodata.main.str1.1:0000000000000169 .LC46
     /tmp/cco7wVnW.s:651    .rodata.main.str1.1:000000000000017e .LC47
     /tmp/cco7wVnW.s:653    .rodata.main.str1.1:0000000000000193 .LC48
     /tmp/cco7wVnW.s:655    .rodata.main.str1.1:000000000000019f .LC49
     /tmp/cco7wVnW.s:657    .rodata.main.str1.1:00000000000001b2 .LC50
GAS LISTING /tmp/cco7wVnW.s 			page 81


     /tmp/cco7wVnW.s:659    .rodata.main.str1.1:00000000000001bf .LC51
     /tmp/cco7wVnW.s:661    .rodata.main.str1.1:00000000000001d2 .LC52
     /tmp/cco7wVnW.s:663    .rodata.main.str1.1:00000000000001e5 .LC53
     /tmp/cco7wVnW.s:665    .rodata.main.str1.1:00000000000001ea .LC54
     /tmp/cco7wVnW.s:667    .rodata.main.str1.1:00000000000001fd .LC55
     /tmp/cco7wVnW.s:669    .rodata.main.str1.1:0000000000000210 .LC56
     /tmp/cco7wVnW.s:671    .rodata.main.str1.1:0000000000000215 .LC57
     /tmp/cco7wVnW.s:673    .rodata.main.str1.1:0000000000000225 .LC58
     /tmp/cco7wVnW.s:677    .rodata.main.str1.8:00000000000000e8 .LC59
     /tmp/cco7wVnW.s:680    .rodata.main.str1.8:0000000000000118 .LC60
     /tmp/cco7wVnW.s:683    .rodata.main.str1.1:000000000000022a .LC61
     /tmp/cco7wVnW.s:685    .rodata.main.str1.1:0000000000000233 .LC62
     /tmp/cco7wVnW.s:687    .rodata.main.str1.1:0000000000000246 .LC63
     /tmp/cco7wVnW.s:689    .rodata.main.str1.1:0000000000000249 .LC64
     /tmp/cco7wVnW.s:691    .rodata.main.str1.1:0000000000000258 .LC65
     /tmp/cco7wVnW.s:693    .rodata.main.str1.1:000000000000025b .LC66
     /tmp/cco7wVnW.s:695    .rodata.main.str1.1:000000000000026e .LC67
     /tmp/cco7wVnW.s:697    .rodata.main.str1.1:0000000000000274 .LC68
     /tmp/cco7wVnW.s:2513   .rodata.cst4:0000000000000008 .LC70
     /tmp/cco7wVnW.s:699    .rodata.main.str1.1:0000000000000277 .LC69
     /tmp/cco7wVnW.s:701    .rodata.main.str1.1:000000000000027a .LC71
     /tmp/cco7wVnW.s:703    .rodata.main.str1.1:000000000000028f .LC72
     /tmp/cco7wVnW.s:2516   .rodata.cst4:000000000000000c .LC74
     /tmp/cco7wVnW.s:705    .rodata.main.str1.1:0000000000000297 .LC73
     /tmp/cco7wVnW.s:707    .rodata.main.str1.1:000000000000029a .LC75
     /tmp/cco7wVnW.s:711    .rodata.main.str1.8:0000000000000148 .LC76
     /tmp/cco7wVnW.s:714    .rodata.main.str1.8:0000000000000188 .LC77
     /tmp/cco7wVnW.s:717    .rodata.main.str1.8:00000000000001b0 .LC78
     /tmp/cco7wVnW.s:720    .rodata.main.str1.8:00000000000001e0 .LC79
     /tmp/cco7wVnW.s:723    .rodata.main.str1.8:0000000000000210 .LC80
     /tmp/cco7wVnW.s:726    .rodata.main.str1.8:0000000000000238 .LC81
     /tmp/cco7wVnW.s:729    .rodata.main.str1.8:0000000000000260 .LC82
     /tmp/cco7wVnW.s:732    .rodata.main.str1.8:0000000000000288 .LC83
     /tmp/cco7wVnW.s:735    .rodata.main.str1.8:00000000000002b0 .LC84
     /tmp/cco7wVnW.s:738    .rodata.main.str1.8:00000000000002e0 .LC85
     /tmp/cco7wVnW.s:741    .rodata.main.str1.8:0000000000000310 .LC86
     /tmp/cco7wVnW.s:744    .rodata.main.str1.1:00000000000002a7 .LC87
     /tmp/cco7wVnW.s:746    .rodata.main.str1.1:00000000000002b8 .LC88
     /tmp/cco7wVnW.s:748    .rodata.main.str1.1:00000000000002c9 .LC89
     /tmp/cco7wVnW.s:752    .rodata.main.str1.8:0000000000000340 .LC90
     /tmp/cco7wVnW.s:755    .rodata.main.str1.1:00000000000002e2 .LC91
     /tmp/cco7wVnW.s:759    .rodata.main.str1.8:0000000000000368 .LC92
     /tmp/cco7wVnW.s:762    .rodata.main.str1.1:00000000000002f2 .LC93
     /tmp/cco7wVnW.s:766    .rodata.main.str1.8:0000000000000398 .LC94
     /tmp/cco7wVnW.s:769    .rodata.main.str1.8:00000000000003c8 .LC95
     /tmp/cco7wVnW.s:588    .rodata.main.str1.1:0000000000000068 .LC21
     /tmp/cco7wVnW.s:569    .rodata.main.str1.1:0000000000000005 .LC13
     /tmp/cco7wVnW.s:647    .rodata.main.str1.1:0000000000000153 .LC45
     /tmp/cco7wVnW.s:2520   .rodata.cst8:0000000000000000 .LC96
     /tmp/cco7wVnW.s:772    .rodata.main.str1.1:000000000000030e .LC97

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
putchar
msg_hnd_create
msg_wrapper_init_msg
msg_wrapper_init_cmd
GAS LISTING /tmp/cco7wVnW.s 			page 82


msg_wrapper_add_cmd_to_msg
pthread_mutex_lock
__printf_chk
pthread_mutex_unlock
msg_get
usleep
msg_parser_get_obj
msg_parser_get_float
__stack_chk_fail
msg_wrapper_init_obj
msg_wrapper_init_float
msg_wrapper_add_float_to_obj
msg_wrapper_add_object_to_msg
msg_parser_get_cmd
clock
puts
msg_parser_get_int
msg_parser_get_string
msg_wrapper_init_string
stdout
_IO_putc
msg_wrapper_add_string_to_obj
msg_wrapper_init_int
msg_wrapper_add_int_to_obj
msg_wrapper_rm_string_from_obj
msg_wrapper_rm_float_from_obj
msg_wrapper_rm_int_from_obj
msg_wrapper_rm_obj_from_msg
msg_wrapper_rm_cmd_from_msg
pthread_mutex_init
pthread_create
pthread_join
pthread_mutex_destroy
