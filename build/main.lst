GAS LISTING /tmp/ccOo9gMI.s 			page 1


   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.main.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 54727565 		.string	"True"
   6      00
   7              	.LC1:
   8 0005 46616C73 		.string	"False"
   8      6500
   9              	.LC2:
  10 000b 54455354 		.string	"TEST mcu-msg-parser"
  10      206D6375 
  10      2D6D7367 
  10      2D706172 
  10      73657200 
  11              	.LC3:
  12 001f 3D3D3D3D 		.string	"==================="
  12      3D3D3D3D 
  12      3D3D3D3D 
  12      3D3D3D3D 
  12      3D3D3D00 
  13              	.LC4:
  14 0033 74657374 		.string	"test_str1 = \"%s\"\n\n"
  14      5F737472 
  14      31203D20 
  14      22257322 
  14      0A0A00
  15              	.LC5:
  16 0046 3E3E2067 		.string	">> getting test_msg..."
  16      65747469 
  16      6E672074 
  16      6573745F 
  16      6D73672E 
  17              	.LC6:
  18 005d 74657374 		.string	"test_msg"
  18      5F6D7367 
  18      00
  19              		.section	.rodata.main.str1.8,"aMS",@progbits,1
  20              		.align 8
  21              	.LC7:
  22 0000 6D73672E 		.string	"msg.id_len: %d msg.content_len: %d\n"
  22      69645F6C 
  22      656E3A20 
  22      2564206D 
  22      73672E63 
  23              		.section	.rodata.main.str1.1
  24              	.LC8:
  25 0066 0A00     		.string	"\n"
  26              	.LC9:
  27 0068 6D657373 		.string	"message not found!\n"
  27      61676520 
  27      6E6F7420 
  27      666F756E 
  27      64210A00 
  28              	.LC10:
  29 007c 3E3E2067 		.string	">> getting CMD1 cmd..."
GAS LISTING /tmp/ccOo9gMI.s 			page 2


  29      65747469 
  29      6E672043 
  29      4D443120 
  29      636D642E 
  30              	.LC11:
  31 0093 434D4431 		.string	"CMD1"
  31      00
  32              	.LC12:
  33 0098 25730A0A 		.string	"%s\n\n"
  33      00
  34              	.LC13:
  35 009d 3E3E2067 		.string	">> getting CMD2 cmd..."
  35      65747469 
  35      6E672043 
  35      4D443220 
  35      636D642E 
  36              	.LC14:
  37 00b4 434D4432 		.string	"CMD2"
  37      00
  38              	.LC15:
  39 00b9 3E3E2067 		.string	">> getting CMD_last cmd..."
  39      65747469 
  39      6E672043 
  39      4D445F6C 
  39      61737420 
  40              	.LC16:
  41 00d4 434D445F 		.string	"CMD_last"
  41      6C617374 
  41      00
  42              	.LC17:
  43 00dd 3E3E2067 		.string	">> getting obj1..."
  43      65747469 
  43      6E67206F 
  43      626A312E 
  43      2E2E00
  44              	.LC18:
  45 00f0 6F626A31 		.string	"obj1"
  45      00
  46              		.section	.rodata.main.str1.8
  47 0024 00000000 		.align 8
  48              	.LC19:
  49 0028 6F626A31 		.string	"obj1.id_len: %d obj1.content_len: %d\n"
  49      2E69645F 
  49      6C656E3A 
  49      20256420 
  49      6F626A31 
  50              		.section	.rodata.main.str1.1
  51              	.LC20:
  52 00f5 3E3E2067 		.string	">> getting obj2..."
  52      65747469 
  52      6E67206F 
  52      626A322E 
  52      2E2E00
  53              	.LC21:
  54 0108 6F626A32 		.string	"obj2"
  54      00
  55              		.section	.rodata.main.str1.8
GAS LISTING /tmp/ccOo9gMI.s 			page 3


  56 004e 0000     		.align 8
  57              	.LC22:
  58 0050 6F626A32 		.string	"obj2.id_len: %d obj2.content_len: %d\n"
  58      2E69645F 
  58      6C656E3A 
  58      20256420 
  58      6F626A32 
  59 0076 0000     		.align 8
  60              	.LC23:
  61 0078 3E3E2067 		.string	">> getting obj1->key11 integer..."
  61      65747469 
  61      6E67206F 
  61      626A312D 
  61      3E6B6579 
  62              		.section	.rodata.main.str1.1
  63              	.LC25:
  64 010d 6B657931 		.string	"key11"
  64      3100
  65              	.LC26:
  66 0113 72203D20 		.string	"r = %d ival = %d\n\n"
  66      25642069 
  66      76616C20 
  66      3D202564 
  66      0A0A00
  67              		.section	.rodata.main.str1.8
  68 009a 00000000 		.align 8
  68      0000
  69              	.LC27:
  70 00a0 3E3E2067 		.string	">> getting obj2->key21 float..."
  70      65747469 
  70      6E67206F 
  70      626A322D 
  70      3E6B6579 
  71              		.section	.rodata.main.str1.1
  72              	.LC28:
  73 0126 6B657932 		.string	"key21"
  73      3100
  74              	.LC29:
  75 012c 72203D20 		.string	"r = %d fval = %.11f\n\n"
  75      25642066 
  75      76616C20 
  75      3D20252E 
  75      3131660A 
  76              		.section	.rodata.main.str1.8
  77              		.align 8
  78              	.LC30:
  79 00c0 3E3E2067 		.string	">> getting obj1->key12 string..."
  79      65747469 
  79      6E67206F 
  79      626A312D 
  79      3E6B6579 
  80              		.section	.rodata.main.str1.1
  81              	.LC31:
  82 0142 6B657931 		.string	"key12"
  82      3200
  83              	.LC32:
  84 0148 206C656E 		.string	" len: %d\n\n"
GAS LISTING /tmp/ccOo9gMI.s 			page 4


  84      3A202564 
  84      0A0A00
  85              	.LC33:
  86 0153 6572726F 		.string	"error getting string\n"
  86      72206765 
  86      7474696E 
  86      67207374 
  86      72696E67 
  87              	.LC34:
  88 0169 54455354 		.string	"TEST mcu-msg-wrapper"
  88      206D6375 
  88      2D6D7367 
  88      2D777261 
  88      70706572 
  89              	.LC35:
  90 017e 3D3D3D3D 		.string	"===================="
  90      3D3D3D3D 
  90      3D3D3D3D 
  90      3D3D3D3D 
  90      3D3D3D3D 
  91              	.LC36:
  92 0193 77726170 		.string	"wrapped_msg"
  92      7065645F 
  92      6D736700 
  93              	.LC37:
  94 019f 496E6974 		.string	"Initialized msg: #"
  94      69616C69 
  94      7A656420 
  94      6D73673A 
  94      202300
  95              	.LC38:
  96 01b2 77726170 		.string	"wrapped_obj1"
  96      7065645F 
  96      6F626A31 
  96      00
  97              	.LC39:
  98 01bf 496E6974 		.string	"Initialized obj: @"
  98      69616C69 
  98      7A656420 
  98      6F626A3A 
  98      204000
  99              	.LC40:
 100 01d2 54686973 		.string	"This is \"string 1\""
 100      20697320 
 100      22737472 
 100      696E6720 
 100      312200
 101              	.LC41:
 102 01e5 73747231 		.string	"str1"
 102      00
 103              	.LC42:
 104 01ea 496E6974 		.string	"Initialized str: $"
 104      69616C69 
 104      7A656420 
 104      7374723A 
 104      202400
 105              	.LC43:
GAS LISTING /tmp/ccOo9gMI.s 			page 5


 106 01fd 54686973 		.string	"This is 'string 2'"
 106      20697320 
 106      27737472 
 106      696E6720 
 106      322700
 107              	.LC44:
 108 0210 73747232 		.string	"str2"
 108      00
 109              	.LC45:
 110 0215 2E2E2E2E 		.string	".... \"string 3\""
 110      20227374 
 110      72696E67 
 110      20332200 
 111              	.LC46:
 112 0225 73747233 		.string	"str3"
 112      00
 113              		.section	.rodata.main.str1.8
 114 00e1 00000000 		.align 8
 114      000000
 115              	.LC47:
 116 00e8 41646420 		.string	"Add '$str2', '$str3' to '@wrapped_obj1'...\n"
 116      27247374 
 116      7232272C 
 116      20272473 
 116      74723327 
 117 0114 00000000 		.align 8
 118              	.LC48:
 119 0118 41646420 		.string	"Add '@wrapped_obj1' to '#wrapped_msg'...\n"
 119      27407772 
 119      61707065 
 119      645F6F62 
 119      6A312720 
 120              		.section	.rodata.main.str1.1
 121              	.LC49:
 122 022a 434D445F 		.string	"CMD_WRAP"
 122      57524150 
 122      00
 123              	.LC50:
 124 0233 496E6974 		.string	"Initialized cmd: <"
 124      69616C69 
 124      7A656420 
 124      636D643A 
 124      203C00
 125              	.LC51:
 126 0246 3E0A00   		.string	">\n"
 127              	.LC52:
 128 0249 434D445F 		.string	"CMD_REMOVEABLE"
 128      52454D4F 
 128      56454142 
 128      4C4500
 129              	.LC53:
 130 0258 693100   		.string	"i1"
 131              	.LC54:
 132 025b 496E6974 		.string	"Initialized int: $"
 132      69616C69 
 132      7A656420 
 132      696E743A 
GAS LISTING /tmp/ccOo9gMI.s 			page 6


 132      202400
 133              	.LC55:
 134 026e 3D25640A 		.string	"=%d\n\n"
 134      0A00
 135              	.LC56:
 136 0274 693200   		.string	"i2"
 137              	.LC57:
 138 0277 663100   		.string	"f1"
 139              	.LC59:
 140 027a 496E6974 		.string	"Initialized float: $"
 140      69616C69 
 140      7A656420 
 140      666C6F61 
 140      743A2024 
 141              	.LC60:
 142 028f 3D252E36 		.string	"=%.6f\n\n"
 142      660A0A00 
 143              	.LC61:
 144 0297 663200   		.string	"f2"
 145              	.LC63:
 146 029a 77726170 		.string	"wrapped_obj2"
 146      7065645F 
 146      6F626A32 
 146      00
 147              		.section	.rodata.main.str1.8
 148 0142 00000000 		.align 8
 148      0000
 149              	.LC64:
 150 0148 41646420 		.string	"Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n"
 150      27246931 
 150      272C2027 
 150      24693227 
 150      2C202724 
 151 0187 00       		.align 8
 152              	.LC65:
 153 0188 41646420 		.string	"Add '<CMD_WRAP>' to '#wrapped_msg'...\n"
 153      273C434D 
 153      445F5752 
 153      41503E27 
 153      20746F20 
 154 01af 00       		.align 8
 155              	.LC66:
 156 01b0 41646420 		.string	"Add '@wrapped_obj2' to '#wrapped_msg'...\n"
 156      27407772 
 156      61707065 
 156      645F6F62 
 156      6A322720 
 157 01da 00000000 		.align 8
 157      0000
 158              	.LC67:
 159 01e0 41646420 		.string	"Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n"
 159      273C434D 
 159      445F5245 
 159      4D4F5641 
 159      424C453E 
 160 020c 00000000 		.align 8
 161              	.LC68:
GAS LISTING /tmp/ccOo9gMI.s 			page 7


 162 0210 52656D6F 		.string	"Removing $str2 from @wrapped_obj1...\n"
 162      76696E67 
 162      20247374 
 162      72322066 
 162      726F6D20 
 163 0236 0000     		.align 8
 164              	.LC69:
 165 0238 52656D6F 		.string	"Removing $str1 from @wrapped_obj2...\n"
 165      76696E67 
 165      20247374 
 165      72312066 
 165      726F6D20 
 166 025e 0000     		.align 8
 167              	.LC70:
 168 0260 52656D6F 		.string	"Removing $f1 from @wrapped_obj2...\n"
 168      76696E67 
 168      20246631 
 168      2066726F 
 168      6D204077 
 169 0284 00000000 		.align 8
 170              	.LC71:
 171 0288 52656D6F 		.string	"Removing $i2 from @wrapped_obj2...\n"
 171      76696E67 
 171      20246932 
 171      2066726F 
 171      6D204077 
 172 02ac 00000000 		.align 8
 173              	.LC72:
 174 02b0 52656D6F 		.string	"Removing @wrapped_obj1 from #wrapped_msg...\n"
 174      76696E67 
 174      20407772 
 174      61707065 
 174      645F6F62 
 175 02dd 000000   		.align 8
 176              	.LC73:
 177 02e0 52656D6F 		.string	"Removing <CMD_REMOVABLE> from #wrapped_msg...\n"
 177      76696E67 
 177      203C434D 
 177      445F5245 
 177      4D4F5641 
 178 030f 00       		.align 8
 179              	.LC74:
 180 0310 41646420 		.string	"Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n"
 180      27407772 
 180      61707065 
 180      645F6F62 
 180      6A312720 
 181              		.section	.rodata.main.str1.1
 182              	.LC75:
 183 02a7 57726170 		.string	"Wrapped message:"
 183      70656420 
 183      6D657373 
 183      6167653A 
 183      00
 184              	.LC76:
 185 02b8 2D2D2D2D 		.string	"---------------\n"
 185      2D2D2D2D 
GAS LISTING /tmp/ccOo9gMI.s 			page 8


 185      2D2D2D2D 
 185      2D2D2D0A 
 185      00
 186              		.section	.rodata.main.str1.8
 187              		.align 8
 188              	.LC77:
 189 0340 57726170 		.string	"Wrapped message (buffered, free space: %d)\n"
 189      70656420 
 189      6D657373 
 189      61676520 
 189      28627566 
 190 036c 00000000 		.align 8
 191              	.LC78:
 192 0370 57726170 		.string	"Wrapped message (buffered again, free space: %d)\n"
 192      70656420 
 192      6D657373 
 192      61676520 
 192      28627566 
 193              		.section	.rodata.main.str1.1
 194              	.LC79:
 195 02c9 42756666 		.string	"Buffer content:"
 195      65722063 
 195      6F6E7465 
 195      6E743A00 
 196              	.LC81:
 197 02d9 45786563 		.string	"Execution time: %f s\n"
 197      7574696F 
 197      6E207469 
 197      6D653A20 
 197      25662073 
 198              		.section	.text.main,"ax",@progbits
 199              		.globl	main
 201              	main:
 202              	.LFB56:
 203              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author Istvan Milak (istvan.milak@gmail.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2019-12-15
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright Copyright (c) 2019
   9:src/main.c    ****  * 
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stdio.h>
  13:src/main.c    **** #include <stdlib.h>
  14:src/main.c    **** #include <string.h>
  15:src/main.c    **** #include <time.h>
  16:src/main.c    **** #include "mcu_msg.h"
  17:src/main.c    **** 
  18:src/main.c    **** /*string printer on i386*/
  19:src/main.c    **** 
  20:src/main.c    **** char *test_str1 = "#test_msg{<CMD1>\t\t @obj1($key11 =\t-1123334567  ; $key12 = 'string \"value\"')
  21:src/main.c    **** \r@obj2  ($key21 =   -1.123456789; $key22   = 'val22'; $key23 = 1000; $key24 = 12.34)<CMD_last>}";
  22:src/main.c    **** 
GAS LISTING /tmp/ccOo9gMI.s 			page 9


  23:src/main.c    **** 
  24:src/main.c    **** void print_int(int i);
  25:src/main.c    **** void print_float(float f, uint8_t prec);
  26:src/main.c    **** 
  27:src/main.c    **** int main()
  28:src/main.c    **** {
 204              		.loc 1 28 0
 205              		.cfi_startproc
 206 0000 4157     		pushq	%r15
 207              	.LCFI0:
 208              		.cfi_def_cfa_offset 16
 209              		.cfi_offset 15, -16
 210 0002 4156     		pushq	%r14
 211              	.LCFI1:
 212              		.cfi_def_cfa_offset 24
 213              		.cfi_offset 14, -24
 214 0004 4155     		pushq	%r13
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 32
 217              		.cfi_offset 13, -32
 218 0006 4154     		pushq	%r12
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 40
 221              		.cfi_offset 12, -40
 222 0008 55       		pushq	%rbp
 223              	.LCFI4:
 224              		.cfi_def_cfa_offset 48
 225              		.cfi_offset 6, -48
 226 0009 53       		pushq	%rbx
 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 56
 229              		.cfi_offset 3, -56
 230 000a 4881EC08 		subq	$1800, %rsp
 230      070000
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 1856
 233              		.loc 1 28 0
 234 0011 64488B04 		movq	%fs:40, %rax
 234      25280000 
 234      00
 235 001a 48898424 		movq	%rax, 1784(%rsp)
 235      F8060000 
 236 0022 31C0     		xorl	%eax, %eax
  29:src/main.c    ****     /*start the clock*/
  30:src/main.c    ****     clock_t begin = clock();
 237              		.loc 1 30 0
 238 0024 E8000000 		call	clock@PLT
 238      00
 239              	.LVL0:
 240 0029 48894424 		movq	%rax, 8(%rsp)
 240      08
 241              	.LVL1:
  31:src/main.c    ****     clock_t end;
  32:src/main.c    ****     double exec_time = 0.0;
  33:src/main.c    **** 
  34:src/main.c    **** 
  35:src/main.c    **** 
GAS LISTING /tmp/ccOo9gMI.s 			page 10


  36:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  37:src/main.c    **** //                                 MCU-MSG Parser test                                       //
  38:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  39:src/main.c    **** 
  40:src/main.c    ****     msg_t msg;
  41:src/main.c    ****     msg_obj_t obj1, obj2;
  42:src/main.c    ****     msg_cmd_t cmd;
  43:src/main.c    ****     msg_string_hnd_t str_hnd = msg_string_hnd_create(putchar);
 242              		.loc 1 43 0
 243 002e 488DBC24 		leaq	320(%rsp), %rdi
 243      40010000 
 244 0036 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 244      000000
 245 003d E8000000 		call	msg_string_hnd_create@PLT
 245      00
 246              	.LVL2:
 247              	.LBB164:
 248              	.LBB165:
 249              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
GAS LISTING /tmp/ccOo9gMI.s 			page 11


  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
GAS LISTING /tmp/ccOo9gMI.s 			page 12


  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 250              		.loc 2 104 0
 251 0042 488D3D00 		leaq	.LC2(%rip), %rdi
 251      000000
 252 0049 E8000000 		call	puts@PLT
 252      00
 253              	.LVL3:
 254              	.LBE165:
 255              	.LBE164:
 256              	.LBB166:
 257              	.LBB167:
 258 004e 488D3D00 		leaq	.LC3(%rip), %rdi
 258      000000
 259 0055 E8000000 		call	puts@PLT
 259      00
 260              	.LVL4:
 261              	.LBE167:
 262              	.LBE166:
 263              	.LBB168:
 264              	.LBB169:
 265 005a 488B1500 		movq	test_str1(%rip), %rdx
 265      000000
 266 0061 488D3500 		leaq	.LC4(%rip), %rsi
 266      000000
 267 0068 BF010000 		movl	$1, %edi
 267      00
 268 006d B8000000 		movl	$0, %eax
 268      00
 269 0072 E8000000 		call	__printf_chk@PLT
 269      00
 270              	.LVL5:
 271              	.LBE169:
 272              	.LBE168:
 273              	.LBB170:
 274              	.LBB171:
 275 0077 488D3D00 		leaq	.LC5(%rip), %rdi
 275      000000
 276 007e E8000000 		call	puts@PLT
 276      00
 277              	.LVL6:
 278              	.LBE171:
 279              	.LBE170:
  44:src/main.c    ****     
  45:src/main.c    ****     printf("TEST mcu-msg-parser\n");
  46:src/main.c    ****     printf("===================\n");
  47:src/main.c    **** 
  48:src/main.c    ****     printf("test_str1 = \"%s\"\n\n", test_str1);
  49:src/main.c    **** 
  50:src/main.c    ****     //#############################################################################################
GAS LISTING /tmp/ccOo9gMI.s 			page 13


  51:src/main.c    ****     printf(">> getting test_msg...\n");
  52:src/main.c    ****     msg = msg_get(test_str1, "test_msg", strlen(test_str1));
 280              		.loc 1 52 0
 281 0083 488B3500 		movq	test_str1(%rip), %rsi
 281      000000
 282 008a 48C7C1FF 		movq	$-1, %rcx
 282      FFFFFF
 283 0091 B8000000 		movl	$0, %eax
 283      00
 284 0096 4889F7   		movq	%rsi, %rdi
 285 0099 F2AE     		repnz scasb
 286 009b 48F7D1   		notq	%rcx
 287 009e 4883E901 		subq	$1, %rcx
 288 00a2 0FB7C9   		movzwl	%cx, %ecx
 289 00a5 488DBC24 		leaq	224(%rsp), %rdi
 289      E0000000 
 290 00ad 488D1500 		leaq	.LC6(%rip), %rdx
 290      000000
 291 00b4 E8000000 		call	msg_get@PLT
 291      00
 292              	.LVL7:
  53:src/main.c    ****     if(msg.content.s != NULL) {
 293              		.loc 1 53 0
 294 00b9 4883BC24 		cmpq	$0, 240(%rsp)
 294      F0000000 
 294      00
 295 00c2 0F84600E 		je	.L2
 295      0000
  54:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
 296              		.loc 1 54 0
 297 00c8 0FB78C24 		movzwl	248(%rsp), %ecx
 297      F8000000 
 298 00d0 0FB79424 		movzwl	232(%rsp), %edx
 298      E8000000 
 299              	.LVL8:
 300              	.LBB172:
 301              	.LBB173:
 302              		.loc 2 104 0
 303 00d8 488D3500 		leaq	.LC7(%rip), %rsi
 303      000000
 304 00df BF010000 		movl	$1, %edi
 304      00
 305 00e4 B8000000 		movl	$0, %eax
 305      00
 306 00e9 E8000000 		call	__printf_chk@PLT
 306      00
 307              	.LVL9:
 308              	.LBE173:
 309              	.LBE172:
  55:src/main.c    ****         str_hnd.print(msg.id);
 310              		.loc 1 55 0
 311 00ee 488B9C24 		movq	344(%rsp), %rbx
 311      58010000 
 312 00f6 488BBC24 		movq	224(%rsp), %rdi
 312      E0000000 
 313 00fe 488BB424 		movq	232(%rsp), %rsi
 313      E8000000 
GAS LISTING /tmp/ccOo9gMI.s 			page 14


 314 0106 FFD3     		call	*%rbx
 315              	.LVL10:
 316              	.LBB174:
 317              	.LBB175:
 318              		.loc 2 104 0
 319 0108 BF3A0000 		movl	$58, %edi
 319      00
 320 010d E8000000 		call	putchar@PLT
 320      00
 321              	.LVL11:
 322              	.LBE175:
 323              	.LBE174:
  56:src/main.c    ****         printf(":");
  57:src/main.c    ****         str_hnd.print(msg.content);
 324              		.loc 1 57 0
 325 0112 488BBC24 		movq	240(%rsp), %rdi
 325      F0000000 
 326 011a 488BB424 		movq	248(%rsp), %rsi
 326      F8000000 
 327 0122 FFD3     		call	*%rbx
 328              	.LVL12:
 329              	.LBB176:
 330              	.LBB177:
 331              		.loc 2 104 0
 332 0124 488D3D00 		leaq	.LC8(%rip), %rdi
 332      000000
 333 012b E8000000 		call	puts@PLT
 333      00
 334              	.LVL13:
 335              	.L3:
 336              	.LBE177:
 337              	.LBE176:
 338              	.LBB178:
 339              	.LBB179:
 340 0130 488D3D00 		leaq	.LC10(%rip), %rdi
 340      000000
 341 0137 E8000000 		call	puts@PLT
 341      00
 342              	.LVL14:
 343              	.LBE179:
 344              	.LBE178:
  58:src/main.c    ****         printf("\n\n");
  59:src/main.c    ****     } else {
  60:src/main.c    ****         printf("message not found!\n\n");
  61:src/main.c    ****     }
  62:src/main.c    **** 
  63:src/main.c    ****     //#############################################################################################
  64:src/main.c    ****     printf(">> getting CMD1 cmd...\n");
  65:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
 345              		.loc 1 65 0
 346 013c FFB424F8 		pushq	248(%rsp)
 346      000000
 347              	.LCFI7:
 348              		.cfi_def_cfa_offset 1864
 349 0143 FFB424F8 		pushq	248(%rsp)
 349      000000
 350              	.LCFI8:
GAS LISTING /tmp/ccOo9gMI.s 			page 15


 351              		.cfi_def_cfa_offset 1872
 352 014a FFB424F8 		pushq	248(%rsp)
 352      000000
 353              	.LCFI9:
 354              		.cfi_def_cfa_offset 1880
 355 0151 FFB424F8 		pushq	248(%rsp)
 355      000000
 356              	.LCFI10:
 357              		.cfi_def_cfa_offset 1888
 358 0158 488D3D00 		leaq	.LC11(%rip), %rdi
 358      000000
 359 015f E8000000 		call	msg_parser_get_cmd@PLT
 359      00
 360              	.LVL15:
  66:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 361              		.loc 1 66 0
 362 0164 4883C420 		addq	$32, %rsp
 363              	.LCFI11:
 364              		.cfi_def_cfa_offset 1856
 365              	.LVL16:
 366 0168 4885C0   		testq	%rax, %rax
 367 016b 0F84C80D 		je	.L10
 367      0000
 368 0171 488D1500 		leaq	.LC0(%rip), %rdx
 368      000000
 369              	.L4:
 370              	.LVL17:
 371              	.LBB180:
 372              	.LBB181:
 373              		.loc 2 104 0 discriminator 4
 374 0178 488D3500 		leaq	.LC12(%rip), %rsi
 374      000000
 375 017f BF010000 		movl	$1, %edi
 375      00
 376 0184 B8000000 		movl	$0, %eax
 376      00
 377 0189 E8000000 		call	__printf_chk@PLT
 377      00
 378              	.LVL18:
 379              	.LBE181:
 380              	.LBE180:
 381              	.LBB182:
 382              	.LBB183:
 383 018e 488D3D00 		leaq	.LC13(%rip), %rdi
 383      000000
 384 0195 E8000000 		call	puts@PLT
 384      00
 385              	.LVL19:
 386              	.LBE183:
 387              	.LBE182:
  67:src/main.c    **** 
  68:src/main.c    ****     printf(">> getting CMD2 cmd...\n");
  69:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
 388              		.loc 1 69 0 discriminator 4
 389 019a FFB424F8 		pushq	248(%rsp)
 389      000000
 390              	.LCFI12:
GAS LISTING /tmp/ccOo9gMI.s 			page 16


 391              		.cfi_def_cfa_offset 1864
 392 01a1 FFB424F8 		pushq	248(%rsp)
 392      000000
 393              	.LCFI13:
 394              		.cfi_def_cfa_offset 1872
 395 01a8 FFB424F8 		pushq	248(%rsp)
 395      000000
 396              	.LCFI14:
 397              		.cfi_def_cfa_offset 1880
 398 01af FFB424F8 		pushq	248(%rsp)
 398      000000
 399              	.LCFI15:
 400              		.cfi_def_cfa_offset 1888
 401 01b6 488D3D00 		leaq	.LC14(%rip), %rdi
 401      000000
 402 01bd E8000000 		call	msg_parser_get_cmd@PLT
 402      00
 403              	.LVL20:
  70:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 404              		.loc 1 70 0 discriminator 4
 405 01c2 4883C420 		addq	$32, %rsp
 406              	.LCFI16:
 407              		.cfi_def_cfa_offset 1856
 408 01c6 4885C0   		testq	%rax, %rax
 409 01c9 0F84760D 		je	.L11
 409      0000
 410              		.loc 1 70 0 is_stmt 0
 411 01cf 488D1500 		leaq	.LC0(%rip), %rdx
 411      000000
 412              	.L5:
 413              	.LVL21:
 414              	.LBB184:
 415              	.LBB185:
 416              		.loc 2 104 0 is_stmt 1 discriminator 4
 417 01d6 488D3500 		leaq	.LC12(%rip), %rsi
 417      000000
 418 01dd BF010000 		movl	$1, %edi
 418      00
 419 01e2 B8000000 		movl	$0, %eax
 419      00
 420 01e7 E8000000 		call	__printf_chk@PLT
 420      00
 421              	.LVL22:
 422              	.LBE185:
 423              	.LBE184:
 424              	.LBB186:
 425              	.LBB187:
 426 01ec 488D3D00 		leaq	.LC15(%rip), %rdi
 426      000000
 427 01f3 E8000000 		call	puts@PLT
 427      00
 428              	.LVL23:
 429              	.LBE187:
 430              	.LBE186:
  71:src/main.c    **** 
  72:src/main.c    ****     printf(">> getting CMD_last cmd...\n");
  73:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
GAS LISTING /tmp/ccOo9gMI.s 			page 17


 431              		.loc 1 73 0 discriminator 4
 432 01f8 FFB424F8 		pushq	248(%rsp)
 432      000000
 433              	.LCFI17:
 434              		.cfi_def_cfa_offset 1864
 435 01ff FFB424F8 		pushq	248(%rsp)
 435      000000
 436              	.LCFI18:
 437              		.cfi_def_cfa_offset 1872
 438 0206 FFB424F8 		pushq	248(%rsp)
 438      000000
 439              	.LCFI19:
 440              		.cfi_def_cfa_offset 1880
 441 020d FFB424F8 		pushq	248(%rsp)
 441      000000
 442              	.LCFI20:
 443              		.cfi_def_cfa_offset 1888
 444 0214 488D3D00 		leaq	.LC16(%rip), %rdi
 444      000000
 445 021b E8000000 		call	msg_parser_get_cmd@PLT
 445      00
 446              	.LVL24:
  74:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 447              		.loc 1 74 0 discriminator 4
 448 0220 4883C420 		addq	$32, %rsp
 449              	.LCFI21:
 450              		.cfi_def_cfa_offset 1856
 451 0224 4885C0   		testq	%rax, %rax
 452 0227 0F84240D 		je	.L12
 452      0000
 453              		.loc 1 74 0 is_stmt 0
 454 022d 488D1500 		leaq	.LC0(%rip), %rdx
 454      000000
 455              	.L6:
 456              	.LVL25:
 457              	.LBB188:
 458              	.LBB189:
 459              		.loc 2 104 0 is_stmt 1 discriminator 4
 460 0234 488D3500 		leaq	.LC12(%rip), %rsi
 460      000000
 461 023b BF010000 		movl	$1, %edi
 461      00
 462 0240 B8000000 		movl	$0, %eax
 462      00
 463 0245 E8000000 		call	__printf_chk@PLT
 463      00
 464              	.LVL26:
 465              	.LBE189:
 466              	.LBE188:
 467              	.LBB190:
 468              	.LBB191:
 469 024a 488D3D00 		leaq	.LC17(%rip), %rdi
 469      000000
 470 0251 E8000000 		call	puts@PLT
 470      00
 471              	.LVL27:
 472              	.LBE191:
GAS LISTING /tmp/ccOo9gMI.s 			page 18


 473              	.LBE190:
  75:src/main.c    **** 
  76:src/main.c    ****     //#############################################################################################
  77:src/main.c    ****     printf(">> getting obj1...\n");
  78:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
 474              		.loc 1 78 0 discriminator 4
 475 0256 488DBC24 		leaq	256(%rsp), %rdi
 475      00010000 
 476 025e FFB424F8 		pushq	248(%rsp)
 476      000000
 477              	.LCFI22:
 478              		.cfi_def_cfa_offset 1864
 479 0265 FFB424F8 		pushq	248(%rsp)
 479      000000
 480              	.LCFI23:
 481              		.cfi_def_cfa_offset 1872
 482 026c FFB424F8 		pushq	248(%rsp)
 482      000000
 483              	.LCFI24:
 484              		.cfi_def_cfa_offset 1880
 485 0273 FFB424F8 		pushq	248(%rsp)
 485      000000
 486              	.LCFI25:
 487              		.cfi_def_cfa_offset 1888
 488 027a 488D3500 		leaq	.LC18(%rip), %rsi
 488      000000
 489 0281 E8000000 		call	msg_parser_get_obj@PLT
 489      00
 490              	.LVL28:
  79:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
 491              		.loc 1 79 0 discriminator 4
 492 0286 0FB78C24 		movzwl	312(%rsp), %ecx
 492      38010000 
 493 028e 0FB79424 		movzwl	296(%rsp), %edx
 493      28010000 
 494              	.LVL29:
 495              	.LBB192:
 496              	.LBB193:
 497              		.loc 2 104 0 discriminator 4
 498 0296 4883C420 		addq	$32, %rsp
 499              	.LCFI26:
 500              		.cfi_def_cfa_offset 1856
 501 029a 488D3500 		leaq	.LC19(%rip), %rsi
 501      000000
 502 02a1 BF010000 		movl	$1, %edi
 502      00
 503 02a6 B8000000 		movl	$0, %eax
 503      00
 504 02ab E8000000 		call	__printf_chk@PLT
 504      00
 505              	.LVL30:
 506              	.LBE193:
 507              	.LBE192:
  80:src/main.c    ****     str_hnd.print(obj1.id); printf(":"); str_hnd.print(obj1.content);
 508              		.loc 1 80 0 discriminator 4
 509 02b0 488B9C24 		movq	344(%rsp), %rbx
 509      58010000 
GAS LISTING /tmp/ccOo9gMI.s 			page 19


 510 02b8 488BBC24 		movq	256(%rsp), %rdi
 510      00010000 
 511 02c0 488BB424 		movq	264(%rsp), %rsi
 511      08010000 
 512 02c8 FFD3     		call	*%rbx
 513              	.LVL31:
 514              	.LBB194:
 515              	.LBB195:
 516              		.loc 2 104 0 discriminator 4
 517 02ca BF3A0000 		movl	$58, %edi
 517      00
 518 02cf E8000000 		call	putchar@PLT
 518      00
 519              	.LVL32:
 520              	.LBE195:
 521              	.LBE194:
 522              		.loc 1 80 0 discriminator 4
 523 02d4 488BBC24 		movq	272(%rsp), %rdi
 523      10010000 
 524 02dc 488BB424 		movq	280(%rsp), %rsi
 524      18010000 
 525 02e4 FFD3     		call	*%rbx
 526              	.LVL33:
 527              	.LBB196:
 528              	.LBB197:
 529              		.loc 2 104 0 discriminator 4
 530 02e6 488D3D00 		leaq	.LC8(%rip), %rdi
 530      000000
 531 02ed E8000000 		call	puts@PLT
 531      00
 532              	.LVL34:
 533              	.LBE197:
 534              	.LBE196:
 535              	.LBB198:
 536              	.LBB199:
 537 02f2 488D3D00 		leaq	.LC20(%rip), %rdi
 537      000000
 538 02f9 E8000000 		call	puts@PLT
 538      00
 539              	.LVL35:
 540              	.LBE199:
 541              	.LBE198:
  81:src/main.c    ****     printf("\n\n");
  82:src/main.c    **** 
  83:src/main.c    ****     //#############################################################################################
  84:src/main.c    ****     printf(">> getting obj2...\n");
  85:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 542              		.loc 1 85 0 discriminator 4
 543 02fe 488DBC24 		leaq	288(%rsp), %rdi
 543      20010000 
 544 0306 FFB424F8 		pushq	248(%rsp)
 544      000000
 545              	.LCFI27:
 546              		.cfi_def_cfa_offset 1864
 547 030d FFB424F8 		pushq	248(%rsp)
 547      000000
 548              	.LCFI28:
GAS LISTING /tmp/ccOo9gMI.s 			page 20


 549              		.cfi_def_cfa_offset 1872
 550 0314 FFB424F8 		pushq	248(%rsp)
 550      000000
 551              	.LCFI29:
 552              		.cfi_def_cfa_offset 1880
 553 031b FFB424F8 		pushq	248(%rsp)
 553      000000
 554              	.LCFI30:
 555              		.cfi_def_cfa_offset 1888
 556 0322 488D3500 		leaq	.LC21(%rip), %rsi
 556      000000
 557 0329 E8000000 		call	msg_parser_get_obj@PLT
 557      00
 558              	.LVL36:
  86:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 559              		.loc 1 86 0 discriminator 4
 560 032e 0FB78C24 		movzwl	344(%rsp), %ecx
 560      58010000 
 561 0336 0FB79424 		movzwl	328(%rsp), %edx
 561      48010000 
 562              	.LVL37:
 563              	.LBB200:
 564              	.LBB201:
 565              		.loc 2 104 0 discriminator 4
 566 033e 4883C420 		addq	$32, %rsp
 567              	.LCFI31:
 568              		.cfi_def_cfa_offset 1856
 569 0342 488D3500 		leaq	.LC22(%rip), %rsi
 569      000000
 570 0349 BF010000 		movl	$1, %edi
 570      00
 571 034e B8000000 		movl	$0, %eax
 571      00
 572 0353 E8000000 		call	__printf_chk@PLT
 572      00
 573              	.LVL38:
 574              	.LBE201:
 575              	.LBE200:
  87:src/main.c    ****     str_hnd.print(obj2.id); printf(":"); str_hnd.print(obj2.content);
 576              		.loc 1 87 0 discriminator 4
 577 0358 488BBC24 		movq	288(%rsp), %rdi
 577      20010000 
 578 0360 488BB424 		movq	296(%rsp), %rsi
 578      28010000 
 579 0368 FFD3     		call	*%rbx
 580              	.LVL39:
 581              	.LBB202:
 582              	.LBB203:
 583              		.loc 2 104 0 discriminator 4
 584 036a BF3A0000 		movl	$58, %edi
 584      00
 585 036f E8000000 		call	putchar@PLT
 585      00
 586              	.LVL40:
 587              	.LBE203:
 588              	.LBE202:
 589              		.loc 1 87 0 discriminator 4
GAS LISTING /tmp/ccOo9gMI.s 			page 21


 590 0374 488BBC24 		movq	304(%rsp), %rdi
 590      30010000 
 591 037c 488BB424 		movq	312(%rsp), %rsi
 591      38010000 
 592 0384 FFD3     		call	*%rbx
 593              	.LVL41:
 594              	.LBB204:
 595              	.LBB205:
 596              		.loc 2 104 0 discriminator 4
 597 0386 488D3D00 		leaq	.LC8(%rip), %rdi
 597      000000
 598 038d E8000000 		call	puts@PLT
 598      00
 599              	.LVL42:
 600              	.LBE205:
 601              	.LBE204:
 602              	.LBB206:
 603              	.LBB207:
 604 0392 488D3D00 		leaq	.LC23(%rip), %rdi
 604      000000
 605 0399 E8000000 		call	puts@PLT
 605      00
 606              	.LVL43:
 607              	.LBE207:
 608              	.LBE206:
  88:src/main.c    ****     printf("\n\n");
  89:src/main.c    ****     
  90:src/main.c    ****     //#############################################################################################
  91:src/main.c    ****     printf(">> getting obj1->key11 integer...\n");
  92:src/main.c    ****     int ival = 0, res;
 609              		.loc 1 92 0 discriminator 4
 610 039e C7442478 		movl	$0, 120(%rsp)
 610      00000000 
  93:src/main.c    ****     float fval = 0.0;
 611              		.loc 1 93 0 discriminator 4
 612 03a6 C744247C 		movl	$0x00000000, 124(%rsp)
 612      00000000 
  94:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 613              		.loc 1 94 0 discriminator 4
 614 03ae 488D7C24 		leaq	120(%rsp), %rdi
 614      78
 615 03b3 FFB42418 		pushq	280(%rsp)
 615      010000
 616              	.LCFI32:
 617              		.cfi_def_cfa_offset 1864
 618 03ba FFB42418 		pushq	280(%rsp)
 618      010000
 619              	.LCFI33:
 620              		.cfi_def_cfa_offset 1872
 621 03c1 FFB42418 		pushq	280(%rsp)
 621      010000
 622              	.LCFI34:
 623              		.cfi_def_cfa_offset 1880
 624 03c8 FFB42418 		pushq	280(%rsp)
 624      010000
 625              	.LCFI35:
 626              		.cfi_def_cfa_offset 1888
GAS LISTING /tmp/ccOo9gMI.s 			page 22


 627 03cf 488D3500 		leaq	.LC25(%rip), %rsi
 627      000000
 628 03d6 E8000000 		call	msg_parser_get_int@PLT
 628      00
 629              	.LVL44:
 630 03db 0FBED0   		movsbl	%al, %edx
 631              	.LVL45:
 632              	.LBB208:
 633              	.LBB209:
 634              		.loc 2 104 0 discriminator 4
 635 03de 4883C420 		addq	$32, %rsp
 636              	.LCFI36:
 637              		.cfi_def_cfa_offset 1856
 638 03e2 8B4C2478 		movl	120(%rsp), %ecx
 639 03e6 488D3500 		leaq	.LC26(%rip), %rsi
 639      000000
 640 03ed BF010000 		movl	$1, %edi
 640      00
 641 03f2 B8000000 		movl	$0, %eax
 641      00
 642 03f7 E8000000 		call	__printf_chk@PLT
 642      00
 643              	.LVL46:
 644              	.LBE209:
 645              	.LBE208:
 646              	.LBB210:
 647              	.LBB211:
 648 03fc 488D3D00 		leaq	.LC27(%rip), %rdi
 648      000000
 649 0403 E8000000 		call	puts@PLT
 649      00
 650              	.LVL47:
 651              	.LBE211:
 652              	.LBE210:
  95:src/main.c    ****     printf("r = %d ival = %d\n\n", res, ival);
  96:src/main.c    ****     
  97:src/main.c    ****     //#############################################################################################
  98:src/main.c    ****     printf(">> getting obj2->key21 float...\n");
  99:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 653              		.loc 1 99 0 discriminator 4
 654 0408 488D7C24 		leaq	124(%rsp), %rdi
 654      7C
 655 040d FFB42438 		pushq	312(%rsp)
 655      010000
 656              	.LCFI37:
 657              		.cfi_def_cfa_offset 1864
 658 0414 FFB42438 		pushq	312(%rsp)
 658      010000
 659              	.LCFI38:
 660              		.cfi_def_cfa_offset 1872
 661 041b FFB42438 		pushq	312(%rsp)
 661      010000
 662              	.LCFI39:
 663              		.cfi_def_cfa_offset 1880
 664 0422 FFB42438 		pushq	312(%rsp)
 664      010000
 665              	.LCFI40:
GAS LISTING /tmp/ccOo9gMI.s 			page 23


 666              		.cfi_def_cfa_offset 1888
 667 0429 488D3500 		leaq	.LC28(%rip), %rsi
 667      000000
 668 0430 E8000000 		call	msg_parser_get_float@PLT
 668      00
 669              	.LVL48:
 670 0435 0FBED0   		movsbl	%al, %edx
 671              	.LVL49:
 100:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 672              		.loc 1 100 0 discriminator 4
 673 0438 660FEFC0 		pxor	%xmm0, %xmm0
 674 043c F30F5A84 		cvtss2sd	156(%rsp), %xmm0
 674      249C0000 
 674      00
 675              	.LVL50:
 676              	.LBB212:
 677              	.LBB213:
 678              		.loc 2 104 0 discriminator 4
 679 0445 4883C420 		addq	$32, %rsp
 680              	.LCFI41:
 681              		.cfi_def_cfa_offset 1856
 682 0449 488D3500 		leaq	.LC29(%rip), %rsi
 682      000000
 683 0450 BF010000 		movl	$1, %edi
 683      00
 684 0455 B8010000 		movl	$1, %eax
 684      00
 685 045a E8000000 		call	__printf_chk@PLT
 685      00
 686              	.LVL51:
 687              	.LBE213:
 688              	.LBE212:
 689              	.LBB214:
 690              	.LBB215:
 691 045f 488D3D00 		leaq	.LC30(%rip), %rdi
 691      000000
 692 0466 E8000000 		call	puts@PLT
 692      00
 693              	.LVL52:
 694              	.LBE215:
 695              	.LBE214:
 101:src/main.c    **** 
 102:src/main.c    ****     //#############################################################################################
 103:src/main.c    ****     printf(">> getting obj1->key12 string...\n");
 104:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 696              		.loc 1 104 0 discriminator 4
 697 046b FFB42418 		pushq	280(%rsp)
 697      010000
 698              	.LCFI42:
 699              		.cfi_def_cfa_offset 1864
 700 0472 FFB42418 		pushq	280(%rsp)
 700      010000
 701              	.LCFI43:
 702              		.cfi_def_cfa_offset 1872
 703 0479 FFB42418 		pushq	280(%rsp)
 703      010000
 704              	.LCFI44:
GAS LISTING /tmp/ccOo9gMI.s 			page 24


 705              		.cfi_def_cfa_offset 1880
 706 0480 FFB42418 		pushq	280(%rsp)
 706      010000
 707              	.LCFI45:
 708              		.cfi_def_cfa_offset 1888
 709 0487 488D3D00 		leaq	.LC31(%rip), %rdi
 709      000000
 710 048e E8000000 		call	msg_parser_get_string@PLT
 710      00
 711              	.LVL53:
 712 0493 4889D5   		movq	%rdx, %rbp
 713              	.LVL54:
 105:src/main.c    ****     if(str.s != NULL) {
 714              		.loc 1 105 0 discriminator 4
 715 0496 4883C420 		addq	$32, %rsp
 716              	.LCFI46:
 717              		.cfi_def_cfa_offset 1856
 718 049a 4885C0   		testq	%rax, %rax
 719 049d 0F84BA0A 		je	.L7
 719      0000
 106:src/main.c    ****         str_hnd.print(str); printf(" len: %d\n\n", str.len);
 720              		.loc 1 106 0
 721 04a3 4889C7   		movq	%rax, %rdi
 722              	.LVL55:
 723 04a6 4889D6   		movq	%rdx, %rsi
 724 04a9 FFD3     		call	*%rbx
 725              	.LVL56:
 726 04ab 0FB7D5   		movzwl	%bp, %edx
 727              	.LVL57:
 728              	.LBB216:
 729              	.LBB217:
 730              		.loc 2 104 0
 731 04ae 488D3500 		leaq	.LC32(%rip), %rsi
 731      000000
 732 04b5 BF010000 		movl	$1, %edi
 732      00
 733 04ba B8000000 		movl	$0, %eax
 733      00
 734 04bf E8000000 		call	__printf_chk@PLT
 734      00
 735              	.LVL58:
 736              	.L8:
 737              	.LBE217:
 738              	.LBE216:
 739              	.LBB218:
 740              	.LBB219:
 741 04c4 488D3D00 		leaq	.LC34(%rip), %rdi
 741      000000
 742 04cb E8000000 		call	puts@PLT
 742      00
 743              	.LVL59:
 744              	.LBE219:
 745              	.LBE218:
 746              	.LBB220:
 747              	.LBB221:
 748 04d0 488D3D00 		leaq	.LC35(%rip), %rdi
 748      000000
GAS LISTING /tmp/ccOo9gMI.s 			page 25


 749 04d7 E8000000 		call	puts@PLT
 749      00
 750              	.LVL60:
 751              	.LBE221:
 752              	.LBE220:
 107:src/main.c    ****     } else {
 108:src/main.c    ****         printf("error getting string\n\n");
 109:src/main.c    ****     }
 110:src/main.c    ****     
 111:src/main.c    ****     
 112:src/main.c    **** 
 113:src/main.c    **** 
 114:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 115:src/main.c    **** //                                 MCU-MSG Wrapper test                                      //
 116:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 117:src/main.c    **** #if MCU_MSG_USE_WRAPPER  
 118:src/main.c    **** 
 119:src/main.c    ****     printf("TEST mcu-msg-wrapper\n");
 120:src/main.c    ****     printf("====================\n");
 121:src/main.c    **** 
 122:src/main.c    ****     msg_wrap_hnd_t wrapper_hnd = msg_wrapper_hnd_create(putchar);
 753              		.loc 1 122 0
 754 04dc 488DBC24 		leaq	352(%rsp), %rdi
 754      60010000 
 755 04e4 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 755      000000
 756 04eb E8000000 		call	msg_wrapper_hnd_create@PLT
 756      00
 757              	.LVL61:
 123:src/main.c    ****     msg_wrap_t msg_wrap;
 124:src/main.c    ****     msg_wrap_obj_t obj1_wrap, obj2_wrap;
 125:src/main.c    ****     msg_wrap_str_t str1, str2, str3;
 126:src/main.c    ****     msg_wrap_int_t i1, i2;
 127:src/main.c    ****     msg_wrap_float_t f1, f2;
 128:src/main.c    ****     msg_wrap_cmd_t cmd_wrap, cmd_rem;
 129:src/main.c    ****    
 130:src/main.c    ****     
 131:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 758              		.loc 1 131 0
 759 04f0 488D7C24 		leaq	80(%rsp), %rdi
 759      50
 760 04f5 488D3500 		leaq	.LC36(%rip), %rsi
 760      000000
 761 04fc E8000000 		call	msg_wrapper_init_msg@PLT
 761      00
 762              	.LVL62:
 763 0501 488B4424 		movq	80(%rsp), %rax
 763      50
 764 0506 488B5424 		movq	88(%rsp), %rdx
 764      58
 765 050b 48898424 		movq	%rax, 384(%rsp)
 765      80010000 
 766 0513 48899424 		movq	%rdx, 392(%rsp)
 766      88010000 
 767 051b 488B4424 		movq	96(%rsp), %rax
 767      60
 768 0520 488B5424 		movq	104(%rsp), %rdx
GAS LISTING /tmp/ccOo9gMI.s 			page 26


 768      68
 769 0525 48898424 		movq	%rax, 400(%rsp)
 769      90010000 
 770 052d 48899424 		movq	%rdx, 408(%rsp)
 770      98010000 
 771              	.LVL63:
 772              	.LBB222:
 773              	.LBB223:
 774              		.loc 2 104 0
 775 0535 488D3500 		leaq	.LC37(%rip), %rsi
 775      000000
 776 053c BF010000 		movl	$1, %edi
 776      00
 777 0541 B8000000 		movl	$0, %eax
 777      00
 778 0546 E8000000 		call	__printf_chk@PLT
 778      00
 779              	.LVL64:
 780              	.LBE223:
 781              	.LBE222:
 132:src/main.c    ****     printf("Initialized msg: #"); str_hnd.print(msg_wrap.id); printf("\n\n");
 782              		.loc 1 132 0
 783 054b 488B9C24 		movq	344(%rsp), %rbx
 783      58010000 
 784 0553 488BBC24 		movq	384(%rsp), %rdi
 784      80010000 
 785 055b 488BB424 		movq	392(%rsp), %rsi
 785      88010000 
 786 0563 FFD3     		call	*%rbx
 787              	.LVL65:
 788              	.LBB224:
 789              	.LBB225:
 790              		.loc 2 104 0
 791 0565 488D3D00 		leaq	.LC8(%rip), %rdi
 791      000000
 792 056c E8000000 		call	puts@PLT
 792      00
 793              	.LVL66:
 794              	.LBE225:
 795              	.LBE224:
 133:src/main.c    ****     
 134:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 796              		.loc 1 134 0
 797 0571 4C8D6C24 		leaq	32(%rsp), %r13
 797      20
 798 0576 488D3500 		leaq	.LC38(%rip), %rsi
 798      000000
 799 057d 4C89EF   		movq	%r13, %rdi
 800 0580 E8000000 		call	msg_wrapper_init_obj@PLT
 800      00
 801              	.LVL67:
 802 0585 488B4424 		movq	32(%rsp), %rax
 802      20
 803 058a 488B5424 		movq	40(%rsp), %rdx
 803      28
 804 058f 48898424 		movq	%rax, 688(%rsp)
 804      B0020000 
GAS LISTING /tmp/ccOo9gMI.s 			page 27


 805 0597 48899424 		movq	%rdx, 696(%rsp)
 805      B8020000 
 806 059f 488B4424 		movq	48(%rsp), %rax
 806      30
 807 05a4 488B5424 		movq	56(%rsp), %rdx
 807      38
 808 05a9 48898424 		movq	%rax, 704(%rsp)
 808      C0020000 
 809 05b1 48899424 		movq	%rdx, 712(%rsp)
 809      C8020000 
 810 05b9 488B4424 		movq	64(%rsp), %rax
 810      40
 811 05be 488B5424 		movq	72(%rsp), %rdx
 811      48
 812 05c3 48898424 		movq	%rax, 720(%rsp)
 812      D0020000 
 813 05cb 48899424 		movq	%rdx, 728(%rsp)
 813      D8020000 
 814              	.LVL68:
 815              	.LBB226:
 816              	.LBB227:
 817              		.loc 2 104 0
 818 05d3 488D3500 		leaq	.LC39(%rip), %rsi
 818      000000
 819 05da BF010000 		movl	$1, %edi
 819      00
 820 05df B8000000 		movl	$0, %eax
 820      00
 821 05e4 E8000000 		call	__printf_chk@PLT
 821      00
 822              	.LVL69:
 823              	.LBE227:
 824              	.LBE226:
 135:src/main.c    ****     printf("Initialized obj: @"); str_hnd.print(obj1_wrap.id); printf("\n\n");
 825              		.loc 1 135 0
 826 05e9 488BBC24 		movq	688(%rsp), %rdi
 826      B0020000 
 827 05f1 488BB424 		movq	696(%rsp), %rsi
 827      B8020000 
 828 05f9 FFD3     		call	*%rbx
 829              	.LVL70:
 830              	.LBB228:
 831              	.LBB229:
 832              		.loc 2 104 0
 833 05fb 488D3D00 		leaq	.LC8(%rip), %rdi
 833      000000
 834 0602 E8000000 		call	puts@PLT
 834      00
 835              	.LVL71:
 836              	.LBE229:
 837              	.LBE228:
 136:src/main.c    **** 
 137:src/main.c    **** 
 138:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 838              		.loc 1 138 0
 839 0607 488D1500 		leaq	.LC40(%rip), %rdx
 839      000000
GAS LISTING /tmp/ccOo9gMI.s 			page 28


 840 060e 488D3500 		leaq	.LC41(%rip), %rsi
 840      000000
 841 0615 4C89EF   		movq	%r13, %rdi
 842 0618 E8000000 		call	msg_wrapper_init_string@PLT
 842      00
 843              	.LVL72:
 844 061d 488B4424 		movq	32(%rsp), %rax
 844      20
 845 0622 488B5424 		movq	40(%rsp), %rdx
 845      28
 846 0627 48898424 		movq	%rax, 544(%rsp)
 846      20020000 
 847 062f 48899424 		movq	%rdx, 552(%rsp)
 847      28020000 
 848 0637 488B4424 		movq	48(%rsp), %rax
 848      30
 849 063c 488B5424 		movq	56(%rsp), %rdx
 849      38
 850 0641 48898424 		movq	%rax, 560(%rsp)
 850      30020000 
 851 0649 48899424 		movq	%rdx, 568(%rsp)
 851      38020000 
 852 0651 488B4424 		movq	64(%rsp), %rax
 852      40
 853 0656 48898424 		movq	%rax, 576(%rsp)
 853      40020000 
 854              	.LVL73:
 855              	.LBB230:
 856              	.LBB231:
 857              		.loc 2 104 0
 858 065e 488D3500 		leaq	.LC42(%rip), %rsi
 858      000000
 859 0665 BF010000 		movl	$1, %edi
 859      00
 860 066a B8000000 		movl	$0, %eax
 860      00
 861 066f E8000000 		call	__printf_chk@PLT
 861      00
 862              	.LVL74:
 863              	.LBE231:
 864              	.LBE230:
 139:src/main.c    ****     printf("Initialized str: $"); str_hnd.print(str1.id); putchar('='); str_hnd.print(str1.content)
 865              		.loc 1 139 0
 866 0674 488BBC24 		movq	544(%rsp), %rdi
 866      20020000 
 867 067c 488BB424 		movq	552(%rsp), %rsi
 867      28020000 
 868 0684 FFD3     		call	*%rbx
 869              	.LVL75:
 870              	.LBB232:
 871              	.LBB233:
 872              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Optimizing macros and inline functions for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Copyright (C) 1998-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is free software; you can redistribute it and/or
GAS LISTING /tmp/ccOo9gMI.s 			page 29


   6:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # error "Never include <bits/stdio.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef __extern_inline
  24:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE inline
  25:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #else
  26:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE __extern_inline
  27:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  28:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifdef __USE_EXTERN_INLINES
  31:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
  32:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    inline.  */
  33:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
  34:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write formatted output to stdout from argument list ARG.  */
  35:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  36:/usr/include/x86_64-linux-gnu/bits/stdio.h **** vprintf (const char *__restrict __fmt, _G_va_list __arg)
  37:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  38:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return vfprintf (stdout, __fmt, __arg);
  39:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  40:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Read a character from stdin.  */
  43:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  44:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar (void)
  45:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc (stdin);
  47:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  48:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_MISC
  51:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Faster version when locking is not necessary.  */
  52:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  53:/usr/include/x86_64-linux-gnu/bits/stdio.h **** fgetc_unlocked (FILE *__fp)
  54:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  55:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  56:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  57:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif /* misc */
  58:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_POSIX
  61:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  62:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
GAS LISTING /tmp/ccOo9gMI.s 			page 30


  63:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getc_unlocked (FILE *__fp)
  64:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  66:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  68:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  69:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  70:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar_unlocked (void)
  71:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  72:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (stdin);
  73:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  74:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif	/* POSIX */
  75:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  77:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write a character to stdout.  */
  78:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  79:/usr/include/x86_64-linux-gnu/bits/stdio.h **** putchar (int __c)
  80:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  81:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_putc (__c, stdout);
 873              		.loc 3 81 0
 874 0686 488B3500 		movq	stdout(%rip), %rsi
 874      000000
 875 068d BF3D0000 		movl	$61, %edi
 875      00
 876 0692 E8000000 		call	_IO_putc@PLT
 876      00
 877              	.LVL76:
 878              	.LBE233:
 879              	.LBE232:
 880              		.loc 1 139 0
 881 0697 488BBC24 		movq	560(%rsp), %rdi
 881      30020000 
 882 069f 488BB424 		movq	568(%rsp), %rsi
 882      38020000 
 883 06a7 FFD3     		call	*%rbx
 884              	.LVL77:
 885              	.LBB234:
 886              	.LBB235:
 887              		.loc 2 104 0
 888 06a9 488D3D00 		leaq	.LC8(%rip), %rdi
 888      000000
 889 06b0 E8000000 		call	puts@PLT
 889      00
 890              	.LVL78:
 891              	.LBE235:
 892              	.LBE234:
 140:src/main.c    ****     
 141:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 893              		.loc 1 141 0
 894 06b5 488D1500 		leaq	.LC43(%rip), %rdx
 894      000000
 895 06bc 488D3500 		leaq	.LC44(%rip), %rsi
 895      000000
 896 06c3 4C89EF   		movq	%r13, %rdi
 897 06c6 E8000000 		call	msg_wrapper_init_string@PLT
 897      00
 898              	.LVL79:
GAS LISTING /tmp/ccOo9gMI.s 			page 31


 899 06cb 488B4424 		movq	32(%rsp), %rax
 899      20
 900 06d0 488B5424 		movq	40(%rsp), %rdx
 900      28
 901 06d5 48898424 		movq	%rax, 592(%rsp)
 901      50020000 
 902 06dd 48899424 		movq	%rdx, 600(%rsp)
 902      58020000 
 903 06e5 488B4424 		movq	48(%rsp), %rax
 903      30
 904 06ea 488B5424 		movq	56(%rsp), %rdx
 904      38
 905 06ef 48898424 		movq	%rax, 608(%rsp)
 905      60020000 
 906 06f7 48899424 		movq	%rdx, 616(%rsp)
 906      68020000 
 907 06ff 488B4424 		movq	64(%rsp), %rax
 907      40
 908 0704 48898424 		movq	%rax, 624(%rsp)
 908      70020000 
 909              	.LVL80:
 910              	.LBB236:
 911              	.LBB237:
 912              		.loc 2 104 0
 913 070c 488D3500 		leaq	.LC42(%rip), %rsi
 913      000000
 914 0713 BF010000 		movl	$1, %edi
 914      00
 915 0718 B8000000 		movl	$0, %eax
 915      00
 916 071d E8000000 		call	__printf_chk@PLT
 916      00
 917              	.LVL81:
 918              	.LBE237:
 919              	.LBE236:
 142:src/main.c    ****     printf("Initialized str: $"); str_hnd.print(str2.id); putchar('='); str_hnd.print(str2.content)
 920              		.loc 1 142 0
 921 0722 488BBC24 		movq	592(%rsp), %rdi
 921      50020000 
 922 072a 488BB424 		movq	600(%rsp), %rsi
 922      58020000 
 923 0732 FFD3     		call	*%rbx
 924              	.LVL82:
 925              	.LBB238:
 926              	.LBB239:
 927              		.loc 3 81 0
 928 0734 488B3500 		movq	stdout(%rip), %rsi
 928      000000
 929 073b BF3D0000 		movl	$61, %edi
 929      00
 930 0740 E8000000 		call	_IO_putc@PLT
 930      00
 931              	.LVL83:
 932              	.LBE239:
 933              	.LBE238:
 934              		.loc 1 142 0
 935 0745 488BBC24 		movq	608(%rsp), %rdi
GAS LISTING /tmp/ccOo9gMI.s 			page 32


 935      60020000 
 936 074d 488BB424 		movq	616(%rsp), %rsi
 936      68020000 
 937 0755 FFD3     		call	*%rbx
 938              	.LVL84:
 939              	.LBB240:
 940              	.LBB241:
 941              		.loc 2 104 0
 942 0757 488D3D00 		leaq	.LC8(%rip), %rdi
 942      000000
 943 075e E8000000 		call	puts@PLT
 943      00
 944              	.LVL85:
 945              	.LBE241:
 946              	.LBE240:
 143:src/main.c    **** 
 144:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 947              		.loc 1 144 0
 948 0763 488D1500 		leaq	.LC45(%rip), %rdx
 948      000000
 949 076a 488D3500 		leaq	.LC46(%rip), %rsi
 949      000000
 950 0771 4C89EF   		movq	%r13, %rdi
 951 0774 E8000000 		call	msg_wrapper_init_string@PLT
 951      00
 952              	.LVL86:
 953 0779 488B4424 		movq	32(%rsp), %rax
 953      20
 954 077e 488B5424 		movq	40(%rsp), %rdx
 954      28
 955 0783 48898424 		movq	%rax, 640(%rsp)
 955      80020000 
 956 078b 48899424 		movq	%rdx, 648(%rsp)
 956      88020000 
 957 0793 488B4424 		movq	48(%rsp), %rax
 957      30
 958 0798 488B5424 		movq	56(%rsp), %rdx
 958      38
 959 079d 48898424 		movq	%rax, 656(%rsp)
 959      90020000 
 960 07a5 48899424 		movq	%rdx, 664(%rsp)
 960      98020000 
 961 07ad 488B4424 		movq	64(%rsp), %rax
 961      40
 962 07b2 48898424 		movq	%rax, 672(%rsp)
 962      A0020000 
 963              	.LVL87:
 964              	.LBB242:
 965              	.LBB243:
 966              		.loc 2 104 0
 967 07ba 488D3500 		leaq	.LC42(%rip), %rsi
 967      000000
 968 07c1 BF010000 		movl	$1, %edi
 968      00
 969 07c6 B8000000 		movl	$0, %eax
 969      00
 970 07cb E8000000 		call	__printf_chk@PLT
GAS LISTING /tmp/ccOo9gMI.s 			page 33


 970      00
 971              	.LVL88:
 972              	.LBE243:
 973              	.LBE242:
 145:src/main.c    ****     printf("Initialized str: $"); str_hnd.print(str3.id); putchar('='); str_hnd.print(str3.content)
 974              		.loc 1 145 0
 975 07d0 488BBC24 		movq	640(%rsp), %rdi
 975      80020000 
 976 07d8 488BB424 		movq	648(%rsp), %rsi
 976      88020000 
 977 07e0 FFD3     		call	*%rbx
 978              	.LVL89:
 979              	.LBB244:
 980              	.LBB245:
 981              		.loc 3 81 0
 982 07e2 488B3500 		movq	stdout(%rip), %rsi
 982      000000
 983 07e9 BF3D0000 		movl	$61, %edi
 983      00
 984 07ee E8000000 		call	_IO_putc@PLT
 984      00
 985              	.LVL90:
 986              	.LBE245:
 987              	.LBE244:
 988              		.loc 1 145 0
 989 07f3 488BBC24 		movq	656(%rsp), %rdi
 989      90020000 
 990 07fb 488BB424 		movq	664(%rsp), %rsi
 990      98020000 
 991 0803 FFD3     		call	*%rbx
 992              	.LVL91:
 993              	.LBB246:
 994              	.LBB247:
 995              		.loc 2 104 0
 996 0805 488D3D00 		leaq	.LC8(%rip), %rdi
 996      000000
 997 080c E8000000 		call	puts@PLT
 997      00
 998              	.LVL92:
 999              	.LBE247:
 1000              	.LBE246:
 1001              	.LBB248:
 1002              	.LBB249:
 1003 0811 488D3D00 		leaq	.LC47(%rip), %rdi
 1003      000000
 1004 0818 E8000000 		call	puts@PLT
 1004      00
 1005              	.LVL93:
 1006              	.LBE249:
 1007              	.LBE248:
 146:src/main.c    **** 
 147:src/main.c    ****     /* Preapare object */
 148:src/main.c    ****     printf("Add '$str2', '$str3' to '@wrapped_obj1'...\n\n");
 149:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 1008              		.loc 1 149 0
 1009 081d 4C8DBC24 		leaq	592(%rsp), %r15
 1009      50020000 
GAS LISTING /tmp/ccOo9gMI.s 			page 34


 1010 0825 4C8DA424 		leaq	688(%rsp), %r12
 1010      B0020000 
 1011 082d 4C89FE   		movq	%r15, %rsi
 1012 0830 4C89E7   		movq	%r12, %rdi
 1013 0833 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1013      00
 1014              	.LVL94:
 150:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 1015              		.loc 1 150 0
 1016 0838 488DB424 		leaq	640(%rsp), %rsi
 1016      80020000 
 1017 0840 4C89E7   		movq	%r12, %rdi
 1018 0843 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1018      00
 1019              	.LVL95:
 1020              	.LBB250:
 1021              	.LBB251:
 1022              		.loc 2 104 0
 1023 0848 488D3D00 		leaq	.LC48(%rip), %rdi
 1023      000000
 1024 084f E8000000 		call	puts@PLT
 1024      00
 1025              	.LVL96:
 1026              	.LBE251:
 1027              	.LBE250:
 151:src/main.c    **** 
 152:src/main.c    ****     printf("Add '@wrapped_obj1' to '#wrapped_msg'...\n\n");
 153:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1028              		.loc 1 153 0
 1029 0854 488DAC24 		leaq	384(%rsp), %rbp
 1029      80010000 
 1030 085c 4C89E6   		movq	%r12, %rsi
 1031 085f 4889EF   		movq	%rbp, %rdi
 1032 0862 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1032      00
 1033              	.LVL97:
 154:src/main.c    **** 
 155:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 1034              		.loc 1 155 0
 1035 0867 488D3500 		leaq	.LC49(%rip), %rsi
 1035      000000
 1036 086e 4C89EF   		movq	%r13, %rdi
 1037 0871 E8000000 		call	msg_wrapper_init_cmd@PLT
 1037      00
 1038              	.LVL98:
 1039 0876 488B4424 		movq	32(%rsp), %rax
 1039      20
 1040 087b 488B5424 		movq	40(%rsp), %rdx
 1040      28
 1041 0880 48898424 		movq	%rax, 128(%rsp)
 1041      80000000 
 1042 0888 48899424 		movq	%rdx, 136(%rsp)
 1042      88000000 
 1043 0890 488B4424 		movq	48(%rsp), %rax
 1043      30
 1044 0895 48898424 		movq	%rax, 144(%rsp)
 1044      90000000 
GAS LISTING /tmp/ccOo9gMI.s 			page 35


 1045              	.LVL99:
 1046              	.LBB252:
 1047              	.LBB253:
 1048              		.loc 2 104 0
 1049 089d 488D3500 		leaq	.LC50(%rip), %rsi
 1049      000000
 1050 08a4 BF010000 		movl	$1, %edi
 1050      00
 1051 08a9 B8000000 		movl	$0, %eax
 1051      00
 1052 08ae E8000000 		call	__printf_chk@PLT
 1052      00
 1053              	.LVL100:
 1054              	.LBE253:
 1055              	.LBE252:
 156:src/main.c    ****     printf("Initialized cmd: <"); str_hnd.print(cmd_wrap.cmd); printf(">\n\n");
 1056              		.loc 1 156 0
 1057 08b3 488BBC24 		movq	128(%rsp), %rdi
 1057      80000000 
 1058 08bb 488BB424 		movq	136(%rsp), %rsi
 1058      88000000 
 1059 08c3 FFD3     		call	*%rbx
 1060              	.LVL101:
 1061              	.LBB254:
 1062              	.LBB255:
 1063              		.loc 2 104 0
 1064 08c5 488D3D00 		leaq	.LC51(%rip), %rdi
 1064      000000
 1065 08cc E8000000 		call	puts@PLT
 1065      00
 1066              	.LVL102:
 1067              	.LBE255:
 1068              	.LBE254:
 157:src/main.c    ****     
 158:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 1069              		.loc 1 158 0
 1070 08d1 488D3500 		leaq	.LC52(%rip), %rsi
 1070      000000
 1071 08d8 4C89EF   		movq	%r13, %rdi
 1072 08db E8000000 		call	msg_wrapper_init_cmd@PLT
 1072      00
 1073              	.LVL103:
 1074 08e0 488B4424 		movq	32(%rsp), %rax
 1074      20
 1075 08e5 488B5424 		movq	40(%rsp), %rdx
 1075      28
 1076 08ea 48898424 		movq	%rax, 160(%rsp)
 1076      A0000000 
 1077 08f2 48899424 		movq	%rdx, 168(%rsp)
 1077      A8000000 
 1078 08fa 488B4424 		movq	48(%rsp), %rax
 1078      30
 1079 08ff 48898424 		movq	%rax, 176(%rsp)
 1079      B0000000 
 1080              	.LVL104:
 1081              	.LBB256:
 1082              	.LBB257:
GAS LISTING /tmp/ccOo9gMI.s 			page 36


 1083              		.loc 2 104 0
 1084 0907 488D3500 		leaq	.LC50(%rip), %rsi
 1084      000000
 1085 090e BF010000 		movl	$1, %edi
 1085      00
 1086 0913 B8000000 		movl	$0, %eax
 1086      00
 1087 0918 E8000000 		call	__printf_chk@PLT
 1087      00
 1088              	.LVL105:
 1089              	.LBE257:
 1090              	.LBE256:
 159:src/main.c    ****     printf("Initialized cmd: <"); str_hnd.print(cmd_rem.cmd); printf(">\n\n");
 1091              		.loc 1 159 0
 1092 091d 488BBC24 		movq	160(%rsp), %rdi
 1092      A0000000 
 1093 0925 488BB424 		movq	168(%rsp), %rsi
 1093      A8000000 
 1094 092d FFD3     		call	*%rbx
 1095              	.LVL106:
 1096              	.LBB258:
 1097              	.LBB259:
 1098              		.loc 2 104 0
 1099 092f 488D3D00 		leaq	.LC51(%rip), %rdi
 1099      000000
 1100 0936 E8000000 		call	puts@PLT
 1100      00
 1101              	.LVL107:
 1102              	.LBE259:
 1103              	.LBE258:
 160:src/main.c    **** 
 161:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
 1104              		.loc 1 161 0
 1105 093b BA54F3FF 		movl	$-3244, %edx
 1105      FF
 1106 0940 488D3500 		leaq	.LC53(%rip), %rsi
 1106      000000
 1107 0947 4C89EF   		movq	%r13, %rdi
 1108 094a E8000000 		call	msg_wrapper_init_int@PLT
 1108      00
 1109              	.LVL108:
 1110 094f 488B4424 		movq	32(%rsp), %rax
 1110      20
 1111 0954 488B5424 		movq	40(%rsp), %rdx
 1111      28
 1112 0959 48898424 		movq	%rax, 416(%rsp)
 1112      A0010000 
 1113 0961 48899424 		movq	%rdx, 424(%rsp)
 1113      A8010000 
 1114 0969 488B4424 		movq	48(%rsp), %rax
 1114      30
 1115 096e 488B5424 		movq	56(%rsp), %rdx
 1115      38
 1116 0973 48898424 		movq	%rax, 432(%rsp)
 1116      B0010000 
 1117 097b 48899424 		movq	%rdx, 440(%rsp)
 1117      B8010000 
GAS LISTING /tmp/ccOo9gMI.s 			page 37


 1118              	.LVL109:
 1119              	.LBB260:
 1120              	.LBB261:
 1121              		.loc 2 104 0
 1122 0983 488D3500 		leaq	.LC54(%rip), %rsi
 1122      000000
 1123 098a BF010000 		movl	$1, %edi
 1123      00
 1124 098f B8000000 		movl	$0, %eax
 1124      00
 1125 0994 E8000000 		call	__printf_chk@PLT
 1125      00
 1126              	.LVL110:
 1127              	.LBE261:
 1128              	.LBE260:
 162:src/main.c    ****     printf("Initialized int: $"); str_hnd.print(i1.id); printf("=%d\n\n", i1.val);
 1129              		.loc 1 162 0
 1130 0999 488BBC24 		movq	416(%rsp), %rdi
 1130      A0010000 
 1131 09a1 488BB424 		movq	424(%rsp), %rsi
 1131      A8010000 
 1132 09a9 FFD3     		call	*%rbx
 1133              	.LVL111:
 1134              	.LBB262:
 1135              	.LBB263:
 1136              		.loc 2 104 0
 1137 09ab 8B9424B0 		movl	432(%rsp), %edx
 1137      010000
 1138 09b2 488D3500 		leaq	.LC55(%rip), %rsi
 1138      000000
 1139 09b9 BF010000 		movl	$1, %edi
 1139      00
 1140 09be B8000000 		movl	$0, %eax
 1140      00
 1141 09c3 E8000000 		call	__printf_chk@PLT
 1141      00
 1142              	.LVL112:
 1143              	.LBE263:
 1144              	.LBE262:
 163:src/main.c    **** 
 164:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 1145              		.loc 1 164 0
 1146 09c8 BA55F806 		movl	$456789, %edx
 1146      00
 1147 09cd 488D3500 		leaq	.LC56(%rip), %rsi
 1147      000000
 1148 09d4 4C89EF   		movq	%r13, %rdi
 1149 09d7 E8000000 		call	msg_wrapper_init_int@PLT
 1149      00
 1150              	.LVL113:
 1151 09dc 488B4424 		movq	32(%rsp), %rax
 1151      20
 1152 09e1 488B5424 		movq	40(%rsp), %rdx
 1152      28
 1153 09e6 48898424 		movq	%rax, 448(%rsp)
 1153      C0010000 
 1154 09ee 48899424 		movq	%rdx, 456(%rsp)
GAS LISTING /tmp/ccOo9gMI.s 			page 38


 1154      C8010000 
 1155 09f6 488B4424 		movq	48(%rsp), %rax
 1155      30
 1156 09fb 488B5424 		movq	56(%rsp), %rdx
 1156      38
 1157 0a00 48898424 		movq	%rax, 464(%rsp)
 1157      D0010000 
 1158 0a08 48899424 		movq	%rdx, 472(%rsp)
 1158      D8010000 
 1159              	.LVL114:
 1160              	.LBB264:
 1161              	.LBB265:
 1162              		.loc 2 104 0
 1163 0a10 488D3500 		leaq	.LC54(%rip), %rsi
 1163      000000
 1164 0a17 BF010000 		movl	$1, %edi
 1164      00
 1165 0a1c B8000000 		movl	$0, %eax
 1165      00
 1166 0a21 E8000000 		call	__printf_chk@PLT
 1166      00
 1167              	.LVL115:
 1168              	.LBE265:
 1169              	.LBE264:
 165:src/main.c    ****     printf("Initialized int: $"); str_hnd.print(i2.id); printf("=%d\n\n", i2.val);
 1170              		.loc 1 165 0
 1171 0a26 488BBC24 		movq	448(%rsp), %rdi
 1171      C0010000 
 1172 0a2e 488BB424 		movq	456(%rsp), %rsi
 1172      C8010000 
 1173 0a36 FFD3     		call	*%rbx
 1174              	.LVL116:
 1175              	.LBB266:
 1176              	.LBB267:
 1177              		.loc 2 104 0
 1178 0a38 8B9424D0 		movl	464(%rsp), %edx
 1178      010000
 1179 0a3f 488D3500 		leaq	.LC55(%rip), %rsi
 1179      000000
 1180 0a46 BF010000 		movl	$1, %edi
 1180      00
 1181 0a4b B8000000 		movl	$0, %eax
 1181      00
 1182 0a50 E8000000 		call	__printf_chk@PLT
 1182      00
 1183              	.LVL117:
 1184              	.LBE267:
 1185              	.LBE266:
 166:src/main.c    ****     
 167:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 1186              		.loc 1 167 0
 1187 0a55 BA060000 		movl	$6, %edx
 1187      00
 1188 0a5a F30F1005 		movss	.LC58(%rip), %xmm0
 1188      00000000 
 1189 0a62 488D3500 		leaq	.LC57(%rip), %rsi
 1189      000000
GAS LISTING /tmp/ccOo9gMI.s 			page 39


 1190 0a69 4C89EF   		movq	%r13, %rdi
 1191 0a6c E8000000 		call	msg_wrapper_init_float@PLT
 1191      00
 1192              	.LVL118:
 1193 0a71 488B4424 		movq	32(%rsp), %rax
 1193      20
 1194 0a76 488B5424 		movq	40(%rsp), %rdx
 1194      28
 1195 0a7b 48898424 		movq	%rax, 480(%rsp)
 1195      E0010000 
 1196 0a83 48899424 		movq	%rdx, 488(%rsp)
 1196      E8010000 
 1197 0a8b 488B4424 		movq	48(%rsp), %rax
 1197      30
 1198 0a90 488B5424 		movq	56(%rsp), %rdx
 1198      38
 1199 0a95 48898424 		movq	%rax, 496(%rsp)
 1199      F0010000 
 1200 0a9d 48899424 		movq	%rdx, 504(%rsp)
 1200      F8010000 
 1201              	.LVL119:
 1202              	.LBB268:
 1203              	.LBB269:
 1204              		.loc 2 104 0
 1205 0aa5 488D3500 		leaq	.LC59(%rip), %rsi
 1205      000000
 1206 0aac BF010000 		movl	$1, %edi
 1206      00
 1207 0ab1 B8000000 		movl	$0, %eax
 1207      00
 1208 0ab6 E8000000 		call	__printf_chk@PLT
 1208      00
 1209              	.LVL120:
 1210              	.LBE269:
 1211              	.LBE268:
 168:src/main.c    ****     printf("Initialized float: $"); str_hnd.print(f1.id); printf("=%.6f\n\n", f1.val);
 1212              		.loc 1 168 0
 1213 0abb 488BBC24 		movq	480(%rsp), %rdi
 1213      E0010000 
 1214 0ac3 488BB424 		movq	488(%rsp), %rsi
 1214      E8010000 
 1215 0acb FFD3     		call	*%rbx
 1216              	.LVL121:
 1217 0acd 660FEFC0 		pxor	%xmm0, %xmm0
 1218 0ad1 F30F5A84 		cvtss2sd	496(%rsp), %xmm0
 1218      24F00100 
 1218      00
 1219              	.LVL122:
 1220              	.LBB270:
 1221              	.LBB271:
 1222              		.loc 2 104 0
 1223 0ada 488D3500 		leaq	.LC60(%rip), %rsi
 1223      000000
 1224 0ae1 BF010000 		movl	$1, %edi
 1224      00
 1225 0ae6 B8010000 		movl	$1, %eax
 1225      00
GAS LISTING /tmp/ccOo9gMI.s 			page 40


 1226 0aeb E8000000 		call	__printf_chk@PLT
 1226      00
 1227              	.LVL123:
 1228              	.LBE271:
 1229              	.LBE270:
 169:src/main.c    **** 
 170:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 1230              		.loc 1 170 0
 1231 0af0 BA060000 		movl	$6, %edx
 1231      00
 1232 0af5 F30F1005 		movss	.LC62(%rip), %xmm0
 1232      00000000 
 1233 0afd 488D3500 		leaq	.LC61(%rip), %rsi
 1233      000000
 1234 0b04 4C89EF   		movq	%r13, %rdi
 1235 0b07 E8000000 		call	msg_wrapper_init_float@PLT
 1235      00
 1236              	.LVL124:
 1237 0b0c 488B4424 		movq	32(%rsp), %rax
 1237      20
 1238 0b11 488B5424 		movq	40(%rsp), %rdx
 1238      28
 1239 0b16 48898424 		movq	%rax, 512(%rsp)
 1239      00020000 
 1240 0b1e 48899424 		movq	%rdx, 520(%rsp)
 1240      08020000 
 1241 0b26 488B4424 		movq	48(%rsp), %rax
 1241      30
 1242 0b2b 488B5424 		movq	56(%rsp), %rdx
 1242      38
 1243 0b30 48898424 		movq	%rax, 528(%rsp)
 1243      10020000 
 1244 0b38 48899424 		movq	%rdx, 536(%rsp)
 1244      18020000 
 1245              	.LVL125:
 1246              	.LBB272:
 1247              	.LBB273:
 1248              		.loc 2 104 0
 1249 0b40 488D3500 		leaq	.LC59(%rip), %rsi
 1249      000000
 1250 0b47 BF010000 		movl	$1, %edi
 1250      00
 1251 0b4c B8000000 		movl	$0, %eax
 1251      00
 1252 0b51 E8000000 		call	__printf_chk@PLT
 1252      00
 1253              	.LVL126:
 1254              	.LBE273:
 1255              	.LBE272:
 171:src/main.c    ****     printf("Initialized float: $"); str_hnd.print(f2.id); printf("=%.6f\n\n", f2.val);
 1256              		.loc 1 171 0
 1257 0b56 488BBC24 		movq	512(%rsp), %rdi
 1257      00020000 
 1258 0b5e 488BB424 		movq	520(%rsp), %rsi
 1258      08020000 
 1259 0b66 FFD3     		call	*%rbx
 1260              	.LVL127:
GAS LISTING /tmp/ccOo9gMI.s 			page 41


 1261 0b68 660FEFC0 		pxor	%xmm0, %xmm0
 1262 0b6c F30F5A84 		cvtss2sd	528(%rsp), %xmm0
 1262      24100200 
 1262      00
 1263              	.LVL128:
 1264              	.LBB274:
 1265              	.LBB275:
 1266              		.loc 2 104 0
 1267 0b75 488D3500 		leaq	.LC60(%rip), %rsi
 1267      000000
 1268 0b7c BF010000 		movl	$1, %edi
 1268      00
 1269 0b81 B8010000 		movl	$1, %eax
 1269      00
 1270 0b86 E8000000 		call	__printf_chk@PLT
 1270      00
 1271              	.LVL129:
 1272              	.LBE275:
 1273              	.LBE274:
 172:src/main.c    **** 
 173:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 1274              		.loc 1 173 0
 1275 0b8b 488D3500 		leaq	.LC63(%rip), %rsi
 1275      000000
 1276 0b92 4C89EF   		movq	%r13, %rdi
 1277 0b95 E8000000 		call	msg_wrapper_init_obj@PLT
 1277      00
 1278              	.LVL130:
 1279 0b9a 488B4424 		movq	32(%rsp), %rax
 1279      20
 1280 0b9f 488B5424 		movq	40(%rsp), %rdx
 1280      28
 1281 0ba4 48898424 		movq	%rax, 736(%rsp)
 1281      E0020000 
 1282 0bac 48899424 		movq	%rdx, 744(%rsp)
 1282      E8020000 
 1283 0bb4 488B4424 		movq	48(%rsp), %rax
 1283      30
 1284 0bb9 488B5424 		movq	56(%rsp), %rdx
 1284      38
 1285 0bbe 48898424 		movq	%rax, 752(%rsp)
 1285      F0020000 
 1286 0bc6 48899424 		movq	%rdx, 760(%rsp)
 1286      F8020000 
 1287 0bce 488B4424 		movq	64(%rsp), %rax
 1287      40
 1288 0bd3 488B5424 		movq	72(%rsp), %rdx
 1288      48
 1289 0bd8 48898424 		movq	%rax, 768(%rsp)
 1289      00030000 
 1290 0be0 48899424 		movq	%rdx, 776(%rsp)
 1290      08030000 
 1291              	.LVL131:
 1292              	.LBB276:
 1293              	.LBB277:
 1294              		.loc 2 104 0
 1295 0be8 488D3500 		leaq	.LC39(%rip), %rsi
GAS LISTING /tmp/ccOo9gMI.s 			page 42


 1295      000000
 1296 0bef BF010000 		movl	$1, %edi
 1296      00
 1297 0bf4 B8000000 		movl	$0, %eax
 1297      00
 1298 0bf9 E8000000 		call	__printf_chk@PLT
 1298      00
 1299              	.LVL132:
 1300              	.LBE277:
 1301              	.LBE276:
 174:src/main.c    ****     printf("Initialized obj: @"); str_hnd.print(obj2_wrap.id); printf("\n\n");
 1302              		.loc 1 174 0
 1303 0bfe 488BBC24 		movq	736(%rsp), %rdi
 1303      E0020000 
 1304 0c06 488BB424 		movq	744(%rsp), %rsi
 1304      E8020000 
 1305 0c0e FFD3     		call	*%rbx
 1306              	.LVL133:
 1307              	.LBB278:
 1308              	.LBB279:
 1309              		.loc 2 104 0
 1310 0c10 488D3D00 		leaq	.LC8(%rip), %rdi
 1310      000000
 1311 0c17 E8000000 		call	puts@PLT
 1311      00
 1312              	.LVL134:
 1313              	.LBE279:
 1314              	.LBE278:
 1315              	.LBB280:
 1316              	.LBB281:
 1317 0c1c 488D3D00 		leaq	.LC64(%rip), %rdi
 1317      000000
 1318 0c23 E8000000 		call	puts@PLT
 1318      00
 1319              	.LVL135:
 1320              	.LBE281:
 1321              	.LBE280:
 175:src/main.c    **** 
 176:src/main.c    ****     printf("Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n\n");
 177:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 1322              		.loc 1 177 0
 1323 0c28 488DB424 		leaq	416(%rsp), %rsi
 1323      A0010000 
 1324 0c30 488D9C24 		leaq	736(%rsp), %rbx
 1324      E0020000 
 1325 0c38 4889DF   		movq	%rbx, %rdi
 1326 0c3b E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1326      00
 1327              	.LVL136:
 178:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 1328              		.loc 1 178 0
 1329 0c40 488D8424 		leaq	448(%rsp), %rax
 1329      C0010000 
 1330 0c48 48894424 		movq	%rax, 16(%rsp)
 1330      10
 1331 0c4d 4889C6   		movq	%rax, %rsi
 1332 0c50 4889DF   		movq	%rbx, %rdi
GAS LISTING /tmp/ccOo9gMI.s 			page 43


 1333 0c53 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1333      00
 1334              	.LVL137:
 179:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 1335              		.loc 1 179 0
 1336 0c58 4C8DAC24 		leaq	480(%rsp), %r13
 1336      E0010000 
 1337 0c60 4C89EE   		movq	%r13, %rsi
 1338 0c63 4889DF   		movq	%rbx, %rdi
 1339 0c66 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1339      00
 1340              	.LVL138:
 180:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 1341              		.loc 1 180 0
 1342 0c6b 488DB424 		leaq	512(%rsp), %rsi
 1342      00020000 
 1343 0c73 4889DF   		movq	%rbx, %rdi
 1344 0c76 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1344      00
 1345              	.LVL139:
 181:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 1346              		.loc 1 181 0
 1347 0c7b 4C8DB424 		leaq	544(%rsp), %r14
 1347      20020000 
 1348 0c83 4C89F6   		movq	%r14, %rsi
 1349 0c86 4889DF   		movq	%rbx, %rdi
 1350 0c89 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1350      00
 1351              	.LVL140:
 1352              	.LBB282:
 1353              	.LBB283:
 1354              		.loc 2 104 0
 1355 0c8e 488D3D00 		leaq	.LC65(%rip), %rdi
 1355      000000
 1356 0c95 E8000000 		call	puts@PLT
 1356      00
 1357              	.LVL141:
 1358              	.LBE283:
 1359              	.LBE282:
 182:src/main.c    **** 
 183:src/main.c    ****     printf("Add '<CMD_WRAP>' to '#wrapped_msg'...\n\n");
 184:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 1360              		.loc 1 184 0
 1361 0c9a 488DB424 		leaq	128(%rsp), %rsi
 1361      80000000 
 1362 0ca2 4889EF   		movq	%rbp, %rdi
 1363 0ca5 E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1363      00
 1364              	.LVL142:
 1365              	.LBB284:
 1366              	.LBB285:
 1367              		.loc 2 104 0
 1368 0caa 488D3D00 		leaq	.LC66(%rip), %rdi
 1368      000000
 1369 0cb1 E8000000 		call	puts@PLT
 1369      00
 1370              	.LVL143:
GAS LISTING /tmp/ccOo9gMI.s 			page 44


 1371              	.LBE285:
 1372              	.LBE284:
 185:src/main.c    **** 
 186:src/main.c    ****     printf("Add '@wrapped_obj2' to '#wrapped_msg'...\n\n");
 187:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 1373              		.loc 1 187 0
 1374 0cb6 4889DE   		movq	%rbx, %rsi
 1375 0cb9 4889EF   		movq	%rbp, %rdi
 1376 0cbc E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1376      00
 1377              	.LVL144:
 1378              	.LBB286:
 1379              	.LBB287:
 1380              		.loc 2 104 0
 1381 0cc1 488D3D00 		leaq	.LC67(%rip), %rdi
 1381      000000
 1382 0cc8 E8000000 		call	puts@PLT
 1382      00
 1383              	.LVL145:
 1384              	.LBE287:
 1385              	.LBE286:
 188:src/main.c    ****     
 189:src/main.c    ****     printf("Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n\n");
 190:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 1386              		.loc 1 190 0
 1387 0ccd 488D8C24 		leaq	160(%rsp), %rcx
 1387      A0000000 
 1388 0cd5 48894C24 		movq	%rcx, 24(%rsp)
 1388      18
 1389 0cda 4889CE   		movq	%rcx, %rsi
 1390 0cdd 4889EF   		movq	%rbp, %rdi
 1391 0ce0 E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1391      00
 1392              	.LVL146:
 1393              	.LBB288:
 1394              	.LBB289:
 1395              		.loc 2 104 0
 1396 0ce5 488D3D00 		leaq	.LC68(%rip), %rdi
 1396      000000
 1397 0cec E8000000 		call	puts@PLT
 1397      00
 1398              	.LVL147:
 1399              	.LBE289:
 1400              	.LBE288:
 191:src/main.c    **** 
 192:src/main.c    ****     printf("Removing $str2 from @wrapped_obj1...\n\n");
 193:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 1401              		.loc 1 193 0
 1402 0cf1 4C89FE   		movq	%r15, %rsi
 1403 0cf4 4C89E7   		movq	%r12, %rdi
 1404 0cf7 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1404      00
 1405              	.LVL148:
 1406              	.LBB290:
 1407              	.LBB291:
 1408              		.loc 2 104 0
 1409 0cfc 488D3D00 		leaq	.LC69(%rip), %rdi
GAS LISTING /tmp/ccOo9gMI.s 			page 45


 1409      000000
 1410 0d03 E8000000 		call	puts@PLT
 1410      00
 1411              	.LVL149:
 1412              	.LBE291:
 1413              	.LBE290:
 194:src/main.c    ****     
 195:src/main.c    ****     printf("Removing $str1 from @wrapped_obj2...\n\n");
 196:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 1414              		.loc 1 196 0
 1415 0d08 4C89F6   		movq	%r14, %rsi
 1416 0d0b 4889DF   		movq	%rbx, %rdi
 1417 0d0e E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1417      00
 1418              	.LVL150:
 1419              	.LBB292:
 1420              	.LBB293:
 1421              		.loc 2 104 0
 1422 0d13 488D3D00 		leaq	.LC70(%rip), %rdi
 1422      000000
 1423 0d1a E8000000 		call	puts@PLT
 1423      00
 1424              	.LVL151:
 1425              	.LBE293:
 1426              	.LBE292:
 197:src/main.c    **** 
 198:src/main.c    ****     printf("Removing $f1 from @wrapped_obj2...\n\n");
 199:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 1427              		.loc 1 199 0
 1428 0d1f 4C89EE   		movq	%r13, %rsi
 1429 0d22 4889DF   		movq	%rbx, %rdi
 1430 0d25 E8000000 		call	msg_wrapper_rm_float_from_obj@PLT
 1430      00
 1431              	.LVL152:
 1432              	.LBB294:
 1433              	.LBB295:
 1434              		.loc 2 104 0
 1435 0d2a 488D3D00 		leaq	.LC71(%rip), %rdi
 1435      000000
 1436 0d31 E8000000 		call	puts@PLT
 1436      00
 1437              	.LVL153:
 1438              	.LBE295:
 1439              	.LBE294:
 200:src/main.c    **** 
 201:src/main.c    ****     printf("Removing $i2 from @wrapped_obj2...\n\n");
 202:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 1440              		.loc 1 202 0
 1441 0d36 488B7424 		movq	16(%rsp), %rsi
 1441      10
 1442 0d3b 4889DF   		movq	%rbx, %rdi
 1443 0d3e E8000000 		call	msg_wrapper_rm_int_from_obj@PLT
 1443      00
 1444              	.LVL154:
 1445              	.LBB296:
 1446              	.LBB297:
 1447              		.loc 2 104 0
GAS LISTING /tmp/ccOo9gMI.s 			page 46


 1448 0d43 488D3D00 		leaq	.LC72(%rip), %rdi
 1448      000000
 1449 0d4a E8000000 		call	puts@PLT
 1449      00
 1450              	.LVL155:
 1451              	.LBE297:
 1452              	.LBE296:
 203:src/main.c    **** 
 204:src/main.c    ****     printf("Removing @wrapped_obj1 from #wrapped_msg...\n\n");
 205:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 1453              		.loc 1 205 0
 1454 0d4f 4C89E6   		movq	%r12, %rsi
 1455 0d52 4889EF   		movq	%rbp, %rdi
 1456 0d55 E8000000 		call	msg_wrapper_rm_obj_from_msg@PLT
 1456      00
 1457              	.LVL156:
 1458              	.LBB298:
 1459              	.LBB299:
 1460              		.loc 2 104 0
 1461 0d5a 488D3D00 		leaq	.LC73(%rip), %rdi
 1461      000000
 1462 0d61 E8000000 		call	puts@PLT
 1462      00
 1463              	.LVL157:
 1464              	.LBE299:
 1465              	.LBE298:
 206:src/main.c    **** 
 207:src/main.c    ****     printf("Removing <CMD_REMOVABLE> from #wrapped_msg...\n\n");
 208:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 1466              		.loc 1 208 0
 1467 0d66 488B7424 		movq	24(%rsp), %rsi
 1467      18
 1468 0d6b 4889EF   		movq	%rbp, %rdi
 1469 0d6e E8000000 		call	msg_wrapper_rm_cmd_from_msg@PLT
 1469      00
 1470              	.LVL158:
 1471              	.LBB300:
 1472              	.LBB301:
 1473              		.loc 2 104 0
 1474 0d73 488D3D00 		leaq	.LC74(%rip), %rdi
 1474      000000
 1475 0d7a E8000000 		call	puts@PLT
 1475      00
 1476              	.LVL159:
 1477              	.LBE301:
 1478              	.LBE300:
 209:src/main.c    **** 
 210:src/main.c    ****     printf("Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n\n");
 211:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1479              		.loc 1 211 0
 1480 0d7f 4C89E6   		movq	%r12, %rsi
 1481 0d82 4889EF   		movq	%rbp, %rdi
 1482 0d85 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1482      00
 1483              	.LVL160:
 1484              	.LBB302:
 1485              	.LBB303:
GAS LISTING /tmp/ccOo9gMI.s 			page 47


 1486              		.loc 2 104 0
 1487 0d8a 488D3D00 		leaq	.LC75(%rip), %rdi
 1487      000000
 1488 0d91 E8000000 		call	puts@PLT
 1488      00
 1489              	.LVL161:
 1490              	.LBE303:
 1491              	.LBE302:
 1492              	.LBB304:
 1493              	.LBB305:
 1494 0d96 488D3D00 		leaq	.LC76(%rip), %rdi
 1494      000000
 1495 0d9d E8000000 		call	puts@PLT
 1495      00
 1496              	.LVL162:
 1497              	.LBE305:
 1498              	.LBE304:
 212:src/main.c    **** 
 213:src/main.c    ****     printf("Wrapped message:\n");
 214:src/main.c    ****     printf("---------------\n\n");
 215:src/main.c    ****     wrapper_hnd.print(msg_wrap);
 1499              		.loc 1 215 0
 1500 0da2 FFB42498 		pushq	408(%rsp)
 1500      010000
 1501              	.LCFI47:
 1502              		.cfi_def_cfa_offset 1864
 1503 0da9 FFB42498 		pushq	408(%rsp)
 1503      010000
 1504              	.LCFI48:
 1505              		.cfi_def_cfa_offset 1872
 1506 0db0 FFB42498 		pushq	408(%rsp)
 1506      010000
 1507              	.LCFI49:
 1508              		.cfi_def_cfa_offset 1880
 1509 0db7 FFB42498 		pushq	408(%rsp)
 1509      010000
 1510              	.LCFI50:
 1511              		.cfi_def_cfa_offset 1888
 1512 0dbe FF942480 		call	*384(%rsp)
 1512      010000
 1513              	.LVL163:
 1514              	.LBB306:
 1515              	.LBB307:
 1516              		.loc 2 104 0
 1517 0dc5 4883C420 		addq	$32, %rsp
 1518              	.LCFI51:
 1519              		.cfi_def_cfa_offset 1856
 1520 0dc9 488D3D00 		leaq	.LC8(%rip), %rdi
 1520      000000
 1521 0dd0 E8000000 		call	puts@PLT
 1521      00
 1522              	.LVL164:
 1523              	.LBE307:
 1524              	.LBE306:
 216:src/main.c    ****     printf("\n\n");
 217:src/main.c    **** 
 218:src/main.c    **** #if MCU_MSG_USE_BUFFERING
GAS LISTING /tmp/ccOo9gMI.s 			page 48


 219:src/main.c    ****     char buff[1000] = {0};
 1525              		.loc 1 219 0
 1526 0dd5 488DBC24 		leaq	784(%rsp), %rdi
 1526      10030000 
 1527 0ddd B97D0000 		movl	$125, %ecx
 1527      00
 1528 0de2 B8000000 		movl	$0, %eax
 1528      00
 1529 0de7 F348AB   		rep stosq
 220:src/main.c    ****     msg_size_t freespc; // free space in buffer
 221:src/main.c    ****     msg_str_buff_t sbuff = msg_init_str_buff(buff, 1000);
 1530              		.loc 1 221 0
 1531 0dea 488D9C24 		leaq	192(%rsp), %rbx
 1531      C0000000 
 1532 0df2 488DAC24 		leaq	784(%rsp), %rbp
 1532      10030000 
 1533 0dfa BAE80300 		movl	$1000, %edx
 1533      00
 1534 0dff 4889EE   		movq	%rbp, %rsi
 1535 0e02 4889DF   		movq	%rbx, %rdi
 1536 0e05 E8000000 		call	msg_init_str_buff@PLT
 1536      00
 1537              	.LVL165:
 222:src/main.c    ****     
 223:src/main.c    ****     freespc = wrapper_hnd.print_to_buff(&sbuff, msg_wrap);
 1538              		.loc 1 223 0
 1539 0e0a 4C8BA424 		movq	376(%rsp), %r12
 1539      78010000 
 1540 0e12 FFB42498 		pushq	408(%rsp)
 1540      010000
 1541              	.LCFI52:
 1542              		.cfi_def_cfa_offset 1864
 1543 0e19 FFB42498 		pushq	408(%rsp)
 1543      010000
 1544              	.LCFI53:
 1545              		.cfi_def_cfa_offset 1872
 1546 0e20 FFB42498 		pushq	408(%rsp)
 1546      010000
 1547              	.LCFI54:
 1548              		.cfi_def_cfa_offset 1880
 1549 0e27 FFB42498 		pushq	408(%rsp)
 1549      010000
 1550              	.LCFI55:
 1551              		.cfi_def_cfa_offset 1888
 1552 0e2e 4889DF   		movq	%rbx, %rdi
 1553 0e31 41FFD4   		call	*%r12
 1554              	.LVL166:
 224:src/main.c    ****     printf("Wrapped message (buffered, free space: %d)\n", freespc);
 1555              		.loc 1 224 0
 1556 0e34 0FB7D0   		movzwl	%ax, %edx
 1557              	.LVL167:
 1558              	.LBB308:
 1559              	.LBB309:
 1560              		.loc 2 104 0
 1561 0e37 4883C420 		addq	$32, %rsp
 1562              	.LCFI56:
 1563              		.cfi_def_cfa_offset 1856
GAS LISTING /tmp/ccOo9gMI.s 			page 49


 1564 0e3b 488D3500 		leaq	.LC77(%rip), %rsi
 1564      000000
 1565 0e42 BF010000 		movl	$1, %edi
 1565      00
 1566 0e47 B8000000 		movl	$0, %eax
 1566      00
 1567              	.LVL168:
 1568 0e4c E8000000 		call	__printf_chk@PLT
 1568      00
 1569              	.LVL169:
 1570              	.LBE309:
 1571              	.LBE308:
 225:src/main.c    ****     freespc = wrapper_hnd.print_to_buff(&sbuff, msg_wrap);
 1572              		.loc 1 225 0
 1573 0e51 FFB42498 		pushq	408(%rsp)
 1573      010000
 1574              	.LCFI57:
 1575              		.cfi_def_cfa_offset 1864
 1576 0e58 FFB42498 		pushq	408(%rsp)
 1576      010000
 1577              	.LCFI58:
 1578              		.cfi_def_cfa_offset 1872
 1579 0e5f FFB42498 		pushq	408(%rsp)
 1579      010000
 1580              	.LCFI59:
 1581              		.cfi_def_cfa_offset 1880
 1582 0e66 FFB42498 		pushq	408(%rsp)
 1582      010000
 1583              	.LCFI60:
 1584              		.cfi_def_cfa_offset 1888
 1585 0e6d 4889DF   		movq	%rbx, %rdi
 1586 0e70 41FFD4   		call	*%r12
 1587              	.LVL170:
 226:src/main.c    ****     printf("Wrapped message (buffered again, free space: %d)\n", freespc);
 1588              		.loc 1 226 0
 1589 0e73 0FB7D0   		movzwl	%ax, %edx
 1590              	.LVL171:
 1591              	.LBB310:
 1592              	.LBB311:
 1593              		.loc 2 104 0
 1594 0e76 4883C420 		addq	$32, %rsp
 1595              	.LCFI61:
 1596              		.cfi_def_cfa_offset 1856
 1597 0e7a 488D3500 		leaq	.LC78(%rip), %rsi
 1597      000000
 1598 0e81 BF010000 		movl	$1, %edi
 1598      00
 1599 0e86 B8000000 		movl	$0, %eax
 1599      00
 1600              	.LVL172:
 1601 0e8b E8000000 		call	__printf_chk@PLT
 1601      00
 1602              	.LVL173:
 1603              	.LBE311:
 1604              	.LBE310:
 1605              	.LBB312:
 1606              	.LBB313:
GAS LISTING /tmp/ccOo9gMI.s 			page 50


 1607 0e90 488D3D00 		leaq	.LC8(%rip), %rdi
 1607      000000
 1608 0e97 E8000000 		call	puts@PLT
 1608      00
 1609              	.LVL174:
 1610              	.LBE313:
 1611              	.LBE312:
 1612              	.LBB314:
 1613              	.LBB315:
 1614 0e9c 488D3D00 		leaq	.LC79(%rip), %rdi
 1614      000000
 1615 0ea3 E8000000 		call	puts@PLT
 1615      00
 1616              	.LVL175:
 1617              	.LBE315:
 1618              	.LBE314:
 1619              	.LBB316:
 1620              	.LBB317:
 1621 0ea8 4889EA   		movq	%rbp, %rdx
 1622 0eab 488D3500 		leaq	.LC12(%rip), %rsi
 1622      000000
 1623 0eb2 BF010000 		movl	$1, %edi
 1623      00
 1624 0eb7 B8000000 		movl	$0, %eax
 1624      00
 1625 0ebc E8000000 		call	__printf_chk@PLT
 1625      00
 1626              	.LVL176:
 1627              	.LBE317:
 1628              	.LBE316:
 1629              	.LBB318:
 1630              	.LBB319:
 1631 0ec1 488D3D00 		leaq	.LC8(%rip), %rdi
 1631      000000
 1632 0ec8 E8000000 		call	puts@PLT
 1632      00
 1633              	.LVL177:
 1634              	.LBE319:
 1635              	.LBE318:
 227:src/main.c    ****     
 228:src/main.c    ****     
 229:src/main.c    ****     printf("\n\n");
 230:src/main.c    ****     printf("Buffer content:\n");
 231:src/main.c    ****     printf("%s\n\n", buff);
 232:src/main.c    **** #endif
 233:src/main.c    ****     printf("\n\n");
 234:src/main.c    **** #endif
 235:src/main.c    **** 
 236:src/main.c    ****     end = clock();
 1636              		.loc 1 236 0
 1637 0ecd E8000000 		call	clock@PLT
 1637      00
 1638              	.LVL178:
 237:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 1639              		.loc 1 237 0
 1640 0ed2 482B4424 		subq	8(%rsp), %rax
 1640      08
GAS LISTING /tmp/ccOo9gMI.s 			page 51


 1641              	.LVL179:
 1642 0ed7 660FEFC0 		pxor	%xmm0, %xmm0
 1643 0edb F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1643      C0
 1644 0ee0 F20F5E05 		divsd	.LC80(%rip), %xmm0
 1644      00000000 
 1645              	.LVL180:
 1646              	.LBB320:
 1647              	.LBB321:
 1648              		.loc 2 104 0
 1649 0ee8 488D3500 		leaq	.LC81(%rip), %rsi
 1649      000000
 1650 0eef BF010000 		movl	$1, %edi
 1650      00
 1651 0ef4 B8010000 		movl	$1, %eax
 1651      00
 1652 0ef9 E8000000 		call	__printf_chk@PLT
 1652      00
 1653              	.LVL181:
 1654              	.LBE321:
 1655              	.LBE320:
 238:src/main.c    ****     printf("Execution time: %f s\n", exec_time);
 239:src/main.c    ****     return 0;
 240:src/main.c    **** }
 1656              		.loc 1 240 0
 1657 0efe B8000000 		movl	$0, %eax
 1657      00
 1658 0f03 488B8C24 		movq	1784(%rsp), %rcx
 1658      F8060000 
 1659 0f0b 6448330C 		xorq	%fs:40, %rcx
 1659      25280000 
 1659      00
 1660 0f14 7558     		jne	.L14
 1661 0f16 4881C408 		addq	$1800, %rsp
 1661      070000
 1662              	.LCFI62:
 1663              		.cfi_remember_state
 1664              		.cfi_def_cfa_offset 56
 1665 0f1d 5B       		popq	%rbx
 1666              	.LCFI63:
 1667              		.cfi_def_cfa_offset 48
 1668 0f1e 5D       		popq	%rbp
 1669              	.LCFI64:
 1670              		.cfi_def_cfa_offset 40
 1671 0f1f 415C     		popq	%r12
 1672              	.LCFI65:
 1673              		.cfi_def_cfa_offset 32
 1674 0f21 415D     		popq	%r13
 1675              	.LCFI66:
 1676              		.cfi_def_cfa_offset 24
 1677 0f23 415E     		popq	%r14
 1678              	.LCFI67:
 1679              		.cfi_def_cfa_offset 16
 1680 0f25 415F     		popq	%r15
 1681              	.LCFI68:
 1682              		.cfi_def_cfa_offset 8
 1683 0f27 C3       		ret
GAS LISTING /tmp/ccOo9gMI.s 			page 52


 1684              	.LVL182:
 1685              	.L2:
 1686              	.LCFI69:
 1687              		.cfi_restore_state
 1688              	.LBB322:
 1689              	.LBB323:
 1690              		.loc 2 104 0
 1691 0f28 488D3D00 		leaq	.LC9(%rip), %rdi
 1691      000000
 1692 0f2f E8000000 		call	puts@PLT
 1692      00
 1693              	.LVL183:
 1694 0f34 E9F7F1FF 		jmp	.L3
 1694      FF
 1695              	.LVL184:
 1696              	.L10:
 1697              	.LBE323:
 1698              	.LBE322:
  66:src/main.c    **** 
 1699              		.loc 1 66 0
 1700 0f39 488D1500 		leaq	.LC1(%rip), %rdx
 1700      000000
 1701 0f40 E933F2FF 		jmp	.L4
 1701      FF
 1702              	.L11:
  70:src/main.c    **** 
 1703              		.loc 1 70 0
 1704 0f45 488D1500 		leaq	.LC1(%rip), %rdx
 1704      000000
 1705 0f4c E985F2FF 		jmp	.L5
 1705      FF
 1706              	.L12:
  74:src/main.c    **** 
 1707              		.loc 1 74 0
 1708 0f51 488D1500 		leaq	.LC1(%rip), %rdx
 1708      000000
 1709 0f58 E9D7F2FF 		jmp	.L6
 1709      FF
 1710              	.L7:
 1711              	.LVL185:
 1712              	.LBB324:
 1713              	.LBB325:
 1714              		.loc 2 104 0
 1715 0f5d 488D3D00 		leaq	.LC33(%rip), %rdi
 1715      000000
 1716 0f64 E8000000 		call	puts@PLT
 1716      00
 1717              	.LVL186:
 1718 0f69 E956F5FF 		jmp	.L8
 1718      FF
 1719              	.LVL187:
 1720              	.L14:
 1721              	.LBE325:
 1722              	.LBE324:
 1723              		.loc 1 240 0
 1724 0f6e E8000000 		call	__stack_chk_fail@PLT
 1724      00
GAS LISTING /tmp/ccOo9gMI.s 			page 53


 1725              	.LVL188:
 1726              		.cfi_endproc
 1727              	.LFE56:
 1729              		.globl	test_str1
 1730              		.section	.rodata.str1.8,"aMS",@progbits,1
 1731              		.align 8
 1732              	.LC82:
 1733 0000 23746573 		.string	"#test_msg{<CMD1>\t\t @obj1($key11 =\t-1123334567  ; $key12 = 'string \"value\"')\n\r@obj2
 1733      745F6D73 
 1733      677B3C43 
 1733      4D44313E 
 1733      09092040 
 1734              		.section	.data.rel.local.test_str1,"aw",@progbits
 1735              		.align 8
 1738              	test_str1:
 1739 0000 00000000 		.quad	.LC82
 1739      00000000 
 1740              		.section	.rodata.cst4,"aM",@progbits,4
 1741              		.align 4
 1742              	.LC58:
 1743 0000 10069E3F 		.long	1067320848
 1744              		.align 4
 1745              	.LC62:
 1746 0004 9643ABBE 		.long	3198894998
 1747              		.section	.rodata.cst8,"aM",@progbits,8
 1748              		.align 8
 1749              	.LC80:
 1750 0000 00000000 		.long	0
 1751 0004 80842E41 		.long	1093567616
 1752              		.text
 1753              	.Letext0:
 1754              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 1755              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1756              		.file 6 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 1757              		.file 7 "/usr/include/stdio.h"
 1758              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1759              		.file 9 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 1760              		.file 10 "/usr/include/time.h"
 1761              		.file 11 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 1762              		.file 12 "inc/mcu_msg_cfg.h"
 1763              		.file 13 "inc/mcu_msg.h"
 1764              		.file 14 "<built-in>"
GAS LISTING /tmp/ccOo9gMI.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOo9gMI.s:201    .text.main:0000000000000000 main
     /tmp/ccOo9gMI.s:1738   .data.rel.local.test_str1:0000000000000000 test_str1
     /tmp/ccOo9gMI.s:9      .rodata.main.str1.1:000000000000000b .LC2
     /tmp/ccOo9gMI.s:11     .rodata.main.str1.1:000000000000001f .LC3
     /tmp/ccOo9gMI.s:13     .rodata.main.str1.1:0000000000000033 .LC4
     /tmp/ccOo9gMI.s:15     .rodata.main.str1.1:0000000000000046 .LC5
     /tmp/ccOo9gMI.s:17     .rodata.main.str1.1:000000000000005d .LC6
     /tmp/ccOo9gMI.s:21     .rodata.main.str1.8:0000000000000000 .LC7
     /tmp/ccOo9gMI.s:24     .rodata.main.str1.1:0000000000000066 .LC8
     /tmp/ccOo9gMI.s:28     .rodata.main.str1.1:000000000000007c .LC10
     /tmp/ccOo9gMI.s:30     .rodata.main.str1.1:0000000000000093 .LC11
     /tmp/ccOo9gMI.s:5      .rodata.main.str1.1:0000000000000000 .LC0
     /tmp/ccOo9gMI.s:32     .rodata.main.str1.1:0000000000000098 .LC12
     /tmp/ccOo9gMI.s:34     .rodata.main.str1.1:000000000000009d .LC13
     /tmp/ccOo9gMI.s:36     .rodata.main.str1.1:00000000000000b4 .LC14
     /tmp/ccOo9gMI.s:38     .rodata.main.str1.1:00000000000000b9 .LC15
     /tmp/ccOo9gMI.s:40     .rodata.main.str1.1:00000000000000d4 .LC16
     /tmp/ccOo9gMI.s:42     .rodata.main.str1.1:00000000000000dd .LC17
     /tmp/ccOo9gMI.s:44     .rodata.main.str1.1:00000000000000f0 .LC18
     /tmp/ccOo9gMI.s:48     .rodata.main.str1.8:0000000000000028 .LC19
     /tmp/ccOo9gMI.s:51     .rodata.main.str1.1:00000000000000f5 .LC20
     /tmp/ccOo9gMI.s:53     .rodata.main.str1.1:0000000000000108 .LC21
     /tmp/ccOo9gMI.s:57     .rodata.main.str1.8:0000000000000050 .LC22
     /tmp/ccOo9gMI.s:60     .rodata.main.str1.8:0000000000000078 .LC23
     /tmp/ccOo9gMI.s:63     .rodata.main.str1.1:000000000000010d .LC25
     /tmp/ccOo9gMI.s:65     .rodata.main.str1.1:0000000000000113 .LC26
     /tmp/ccOo9gMI.s:69     .rodata.main.str1.8:00000000000000a0 .LC27
     /tmp/ccOo9gMI.s:72     .rodata.main.str1.1:0000000000000126 .LC28
     /tmp/ccOo9gMI.s:74     .rodata.main.str1.1:000000000000012c .LC29
     /tmp/ccOo9gMI.s:78     .rodata.main.str1.8:00000000000000c0 .LC30
     /tmp/ccOo9gMI.s:81     .rodata.main.str1.1:0000000000000142 .LC31
     /tmp/ccOo9gMI.s:83     .rodata.main.str1.1:0000000000000148 .LC32
     /tmp/ccOo9gMI.s:87     .rodata.main.str1.1:0000000000000169 .LC34
     /tmp/ccOo9gMI.s:89     .rodata.main.str1.1:000000000000017e .LC35
     /tmp/ccOo9gMI.s:91     .rodata.main.str1.1:0000000000000193 .LC36
     /tmp/ccOo9gMI.s:93     .rodata.main.str1.1:000000000000019f .LC37
     /tmp/ccOo9gMI.s:95     .rodata.main.str1.1:00000000000001b2 .LC38
     /tmp/ccOo9gMI.s:97     .rodata.main.str1.1:00000000000001bf .LC39
     /tmp/ccOo9gMI.s:99     .rodata.main.str1.1:00000000000001d2 .LC40
     /tmp/ccOo9gMI.s:101    .rodata.main.str1.1:00000000000001e5 .LC41
     /tmp/ccOo9gMI.s:103    .rodata.main.str1.1:00000000000001ea .LC42
     /tmp/ccOo9gMI.s:105    .rodata.main.str1.1:00000000000001fd .LC43
     /tmp/ccOo9gMI.s:107    .rodata.main.str1.1:0000000000000210 .LC44
     /tmp/ccOo9gMI.s:109    .rodata.main.str1.1:0000000000000215 .LC45
     /tmp/ccOo9gMI.s:111    .rodata.main.str1.1:0000000000000225 .LC46
     /tmp/ccOo9gMI.s:115    .rodata.main.str1.8:00000000000000e8 .LC47
     /tmp/ccOo9gMI.s:118    .rodata.main.str1.8:0000000000000118 .LC48
     /tmp/ccOo9gMI.s:121    .rodata.main.str1.1:000000000000022a .LC49
     /tmp/ccOo9gMI.s:123    .rodata.main.str1.1:0000000000000233 .LC50
     /tmp/ccOo9gMI.s:125    .rodata.main.str1.1:0000000000000246 .LC51
     /tmp/ccOo9gMI.s:127    .rodata.main.str1.1:0000000000000249 .LC52
     /tmp/ccOo9gMI.s:129    .rodata.main.str1.1:0000000000000258 .LC53
     /tmp/ccOo9gMI.s:131    .rodata.main.str1.1:000000000000025b .LC54
     /tmp/ccOo9gMI.s:133    .rodata.main.str1.1:000000000000026e .LC55
     /tmp/ccOo9gMI.s:135    .rodata.main.str1.1:0000000000000274 .LC56
GAS LISTING /tmp/ccOo9gMI.s 			page 55


     /tmp/ccOo9gMI.s:1742   .rodata.cst4:0000000000000000 .LC58
     /tmp/ccOo9gMI.s:137    .rodata.main.str1.1:0000000000000277 .LC57
     /tmp/ccOo9gMI.s:139    .rodata.main.str1.1:000000000000027a .LC59
     /tmp/ccOo9gMI.s:141    .rodata.main.str1.1:000000000000028f .LC60
     /tmp/ccOo9gMI.s:1745   .rodata.cst4:0000000000000004 .LC62
     /tmp/ccOo9gMI.s:143    .rodata.main.str1.1:0000000000000297 .LC61
     /tmp/ccOo9gMI.s:145    .rodata.main.str1.1:000000000000029a .LC63
     /tmp/ccOo9gMI.s:149    .rodata.main.str1.8:0000000000000148 .LC64
     /tmp/ccOo9gMI.s:152    .rodata.main.str1.8:0000000000000188 .LC65
     /tmp/ccOo9gMI.s:155    .rodata.main.str1.8:00000000000001b0 .LC66
     /tmp/ccOo9gMI.s:158    .rodata.main.str1.8:00000000000001e0 .LC67
     /tmp/ccOo9gMI.s:161    .rodata.main.str1.8:0000000000000210 .LC68
     /tmp/ccOo9gMI.s:164    .rodata.main.str1.8:0000000000000238 .LC69
     /tmp/ccOo9gMI.s:167    .rodata.main.str1.8:0000000000000260 .LC70
     /tmp/ccOo9gMI.s:170    .rodata.main.str1.8:0000000000000288 .LC71
     /tmp/ccOo9gMI.s:173    .rodata.main.str1.8:00000000000002b0 .LC72
     /tmp/ccOo9gMI.s:176    .rodata.main.str1.8:00000000000002e0 .LC73
     /tmp/ccOo9gMI.s:179    .rodata.main.str1.8:0000000000000310 .LC74
     /tmp/ccOo9gMI.s:182    .rodata.main.str1.1:00000000000002a7 .LC75
     /tmp/ccOo9gMI.s:184    .rodata.main.str1.1:00000000000002b8 .LC76
     /tmp/ccOo9gMI.s:188    .rodata.main.str1.8:0000000000000340 .LC77
     /tmp/ccOo9gMI.s:191    .rodata.main.str1.8:0000000000000370 .LC78
     /tmp/ccOo9gMI.s:194    .rodata.main.str1.1:00000000000002c9 .LC79
     /tmp/ccOo9gMI.s:1749   .rodata.cst8:0000000000000000 .LC80
     /tmp/ccOo9gMI.s:196    .rodata.main.str1.1:00000000000002d9 .LC81
     /tmp/ccOo9gMI.s:26     .rodata.main.str1.1:0000000000000068 .LC9
     /tmp/ccOo9gMI.s:7      .rodata.main.str1.1:0000000000000005 .LC1
     /tmp/ccOo9gMI.s:85     .rodata.main.str1.1:0000000000000153 .LC33

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
clock
putchar
msg_string_hnd_create
puts
__printf_chk
msg_get
msg_parser_get_cmd
msg_parser_get_obj
msg_parser_get_int
msg_parser_get_float
msg_parser_get_string
msg_wrapper_hnd_create
msg_wrapper_init_msg
msg_wrapper_init_obj
msg_wrapper_init_string
stdout
_IO_putc
msg_wrapper_add_string_to_obj
msg_wrapper_add_object_to_msg
msg_wrapper_init_cmd
msg_wrapper_init_int
msg_wrapper_init_float
msg_wrapper_add_int_to_obj
msg_wrapper_add_float_to_obj
msg_wrapper_add_cmd_to_msg
msg_wrapper_rm_string_from_obj
GAS LISTING /tmp/ccOo9gMI.s 			page 56


msg_wrapper_rm_float_from_obj
msg_wrapper_rm_int_from_obj
msg_wrapper_rm_obj_from_msg
msg_wrapper_rm_cmd_from_msg
msg_init_str_buff
__stack_chk_fail
