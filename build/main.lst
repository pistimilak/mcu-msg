GAS LISTING /tmp/ccypY4LQ.s 			page 1


   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.thread_mcu_master_fnc.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 4D415354 		.string	"MASTER_MSG"
   6      45525F4D 
   6      534700
   7              	.LC1:
   8 000b 4765745F 		.string	"Get_Temp"
   8      54656D70 
   8      00
   9              	.LC2:
  10 0014 4D617374 		.string	"Master >> "
  10      6572203E 
  10      3E2000
  11              	.LC3:
  12 001f 534C4156 		.string	"SLAVE_MSG"
  12      455F4D53 
  12      4700
  13              	.LC4:
  14 0029 54656D70 		.string	"Temp"
  14      00
  15              	.LC5:
  16 002e 543100   		.string	"T1"
  17              		.section	.rodata.thread_mcu_master_fnc.str1.8,"aMS",@progbits,1
  18              		.align 8
  19              	.LC6:
  20 0000 4D617374 		.string	"Master >> T1 = %f (from Slave)\n"
  20      6572203E 
  20      3E205431 
  20      203D2025 
  20      66202866 
  21              		.section	.rodata.thread_mcu_master_fnc.str1.1
  22              	.LC7:
  23 0031 543200   		.string	"T2"
  24              		.section	.rodata.thread_mcu_master_fnc.str1.8
  25              		.align 8
  26              	.LC8:
  27 0020 4D617374 		.string	"Master >> T2 = %f (from Slave)\n"
  27      6572203E 
  27      3E205432 
  27      203D2025 
  27      66202866 
  28              		.section	.text.thread_mcu_master_fnc,"ax",@progbits
  29              		.globl	thread_mcu_master_fnc
  31              	thread_mcu_master_fnc:
  32              	.LFB69:
  33              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author Istvan Milak (istvan.milak@gmail.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2019-12-15
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright Copyright (c) 2019
GAS LISTING /tmp/ccypY4LQ.s 			page 2


   9:src/main.c    ****  * 
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stdio.h>
  13:src/main.c    **** #include <stdlib.h>
  14:src/main.c    **** #include <string.h>
  15:src/main.c    **** #include <time.h>
  16:src/main.c    **** #include <unistd.h>
  17:src/main.c    **** #include <pthread.h>
  18:src/main.c    **** #include <string.h>
  19:src/main.c    **** #include "mcu_msg.h"
  20:src/main.c    **** 
  21:src/main.c    **** /*string printer on i386*/
  22:src/main.c    **** 
  23:src/main.c    **** char test_str1[] = "#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n
  24:src/main.c    **** \r@obj2  ($key21 =   -1.123456789; $key22   = 'val22'; $key23 = 1000; $key24 = 12.34)<CMD_last>}";
  25:src/main.c    **** 
  26:src/main.c    **** 
  27:src/main.c    **** typedef struct {
  28:src/main.c    ****     char *buff;
  29:src/main.c    ****     msg_size_t buff_size;
  30:src/main.c    **** } thread_arg;
  31:src/main.c    **** 
  32:src/main.c    **** 
  33:src/main.c    **** 
  34:src/main.c    **** pthread_mutex_t outp_lock;
  35:src/main.c    **** pthread_t thr_master, thr_slave;
  36:src/main.c    **** thread_arg common_buff;
  37:src/main.c    **** 
  38:src/main.c    **** void *thread_mcu_master_fnc(void *arg);
  39:src/main.c    **** void *thread_mcu_slave_fnc(void *arg);
  40:src/main.c    **** 
  41:src/main.c    **** 
  42:src/main.c    **** 
  43:src/main.c    **** int main()
  44:src/main.c    **** {
  45:src/main.c    ****     /*start the clock*/
  46:src/main.c    ****     clock_t begin = clock();
  47:src/main.c    ****     clock_t end;
  48:src/main.c    ****     double exec_time = 0.0;
  49:src/main.c    ****     
  50:src/main.c    **** 
  51:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  52:src/main.c    **** //                                 MCU-MSG Parser test                                       //
  53:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  54:src/main.c    **** 
  55:src/main.c    ****     msg_t msg;
  56:src/main.c    ****     msg_obj_t obj1, obj2;
  57:src/main.c    ****     msg_cmd_t cmd;
  58:src/main.c    ****     msg_hnd_t hnd = msg_hnd_create(putchar);
  59:src/main.c    ****     
  60:src/main.c    ****     printf("TEST mcu-msg-parser\n");
  61:src/main.c    ****     printf("===================\n");
  62:src/main.c    **** 
  63:src/main.c    ****     printf("test_str1 = \"%s\"\n\n", test_str1);
  64:src/main.c    **** 
  65:src/main.c    ****     //#############################################################################################
GAS LISTING /tmp/ccypY4LQ.s 			page 3


  66:src/main.c    ****     printf(">> getting test_msg...\n");
  67:src/main.c    ****     msg = msg_get(test_str1, "test_msg", sizeof(test_str1));
  68:src/main.c    ****     if(msg.content.s != NULL) {
  69:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
  70:src/main.c    ****         hnd.print_str(msg.id);
  71:src/main.c    ****         printf(":");
  72:src/main.c    ****         hnd.print_str(msg.content);
  73:src/main.c    ****         printf("\n\n");
  74:src/main.c    ****     } else {
  75:src/main.c    ****         printf("message not found!\n\n");
  76:src/main.c    ****     }
  77:src/main.c    **** 
  78:src/main.c    ****     //#############################################################################################
  79:src/main.c    ****     printf(">> getting CMD1 cmd...\n");
  80:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
  81:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  82:src/main.c    **** 
  83:src/main.c    ****     printf(">> getting CMD2 cmd...\n");
  84:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
  85:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  86:src/main.c    **** 
  87:src/main.c    ****     printf(">> getting CMD_last cmd...\n");
  88:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
  89:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  90:src/main.c    **** 
  91:src/main.c    ****     //#############################################################################################
  92:src/main.c    ****     printf(">> getting obj1...\n");
  93:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
  94:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
  96:src/main.c    ****     printf("\n\n");
  97:src/main.c    **** 
  98:src/main.c    ****     //#############################################################################################
  99:src/main.c    ****     printf(">> getting obj2...\n");
 100:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 101:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 103:src/main.c    ****     printf("\n\n");
 104:src/main.c    ****     
 105:src/main.c    ****     //#############################################################################################
 106:src/main.c    ****     printf(">> getting obj1->key11 integer...\n");
 107:src/main.c    ****     int ival = 0, res;
 108:src/main.c    ****     float fval = 0.0;
 109:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 110:src/main.c    ****     printf("r = %d ival = %d\n\n", res, ival);
 111:src/main.c    ****     
 112:src/main.c    ****     //#############################################################################################
 113:src/main.c    ****     printf(">> getting obj2->key21 float...\n");
 114:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 115:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 116:src/main.c    **** 
 117:src/main.c    ****     //#############################################################################################
 118:src/main.c    ****     printf(">> getting obj1->key12 string...\n");
 119:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 120:src/main.c    ****     if(str.s != NULL) {
 121:src/main.c    ****         hnd.print_str(str); printf(" len: %d\n\n", str.len);
 122:src/main.c    ****     } else {
GAS LISTING /tmp/ccypY4LQ.s 			page 4


 123:src/main.c    ****         printf("error getting string\n\n");
 124:src/main.c    ****     }
 125:src/main.c    ****     
 126:src/main.c    ****     
 127:src/main.c    **** 
 128:src/main.c    **** 
 129:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 130:src/main.c    **** //                                 MCU-MSG Wrapper test                                      //
 131:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 132:src/main.c    **** #if MCU_MSG_USE_WRAPPER  
 133:src/main.c    **** 
 134:src/main.c    ****     printf("TEST mcu-msg-wrapper\n");
 135:src/main.c    ****     printf("====================\n");
 136:src/main.c    **** 
 137:src/main.c    ****     // msg_wrap_hnd_t wrapper_hnd = msg_wrapper_hnd_create(putchar);
 138:src/main.c    ****     msg_wrap_t msg_wrap;
 139:src/main.c    ****     msg_wrap_obj_t obj1_wrap, obj2_wrap;
 140:src/main.c    ****     msg_wrap_str_t str1, str2, str3;
 141:src/main.c    ****     msg_wrap_int_t i1, i2;
 142:src/main.c    ****     msg_wrap_float_t f1, f2;
 143:src/main.c    ****     msg_wrap_cmd_t cmd_wrap, cmd_rem;
 144:src/main.c    ****     msg_t msg_reparsed;
 145:src/main.c    ****     msg_obj_t obj_reparsed;
 146:src/main.c    ****     float f_val; 
 147:src/main.c    ****     int i_val;
 148:src/main.c    ****     
 149:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 150:src/main.c    ****     printf("Initialized msg: #"); hnd.print_str(msg_wrap.id); printf("\n\n");
 151:src/main.c    ****     
 152:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 153:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj1_wrap.id); printf("\n\n");
 154:src/main.c    **** 
 155:src/main.c    **** 
 156:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 158:src/main.c    ****     
 159:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 161:src/main.c    **** 
 162:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 164:src/main.c    **** 
 165:src/main.c    ****     /* Preapare object */
 166:src/main.c    ****     printf("Add '$str2', '$str3' to '@wrapped_obj1'...\n\n");
 167:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 168:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 169:src/main.c    **** 
 170:src/main.c    ****     printf("Add '@wrapped_obj1' to '#wrapped_msg'...\n\n");
 171:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 172:src/main.c    **** 
 173:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 174:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_wrap.cmd); printf(">\n\n");
 175:src/main.c    ****     
 176:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 177:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_rem.cmd); printf(">\n\n");
 178:src/main.c    **** 
 179:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
GAS LISTING /tmp/ccypY4LQ.s 			page 5


 180:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i1.id); printf("=%d\n\n", i1.val);
 181:src/main.c    **** 
 182:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 183:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i2.id); printf("=%d\n\n", i2.val);
 184:src/main.c    ****     
 185:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 186:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f1.id); printf("=%.6f\n\n", f1.val);
 187:src/main.c    **** 
 188:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 189:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f2.id); printf("=%.6f\n\n", f2.val);
 190:src/main.c    **** 
 191:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 192:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj2_wrap.id); printf("\n\n");
 193:src/main.c    **** 
 194:src/main.c    ****     printf("Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n\n");
 195:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 196:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 197:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 198:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 199:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 200:src/main.c    **** 
 201:src/main.c    ****     printf("Add '<CMD_WRAP>' to '#wrapped_msg'...\n\n");
 202:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 203:src/main.c    **** 
 204:src/main.c    ****     printf("Add '@wrapped_obj2' to '#wrapped_msg'...\n\n");
 205:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 206:src/main.c    ****     
 207:src/main.c    ****     printf("Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n\n");
 208:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 209:src/main.c    **** 
 210:src/main.c    ****     printf("Removing $str2 from @wrapped_obj1...\n\n");
 211:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 212:src/main.c    ****     
 213:src/main.c    ****     printf("Removing $str1 from @wrapped_obj2...\n\n");
 214:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 215:src/main.c    **** 
 216:src/main.c    ****     printf("Removing $f1 from @wrapped_obj2...\n\n");
 217:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 218:src/main.c    **** 
 219:src/main.c    ****     printf("Removing $i2 from @wrapped_obj2...\n\n");
 220:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 221:src/main.c    **** 
 222:src/main.c    ****     printf("Removing @wrapped_obj1 from #wrapped_msg...\n\n");
 223:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 224:src/main.c    **** 
 225:src/main.c    ****     printf("Removing <CMD_REMOVABLE> from #wrapped_msg...\n\n");
 226:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 227:src/main.c    **** 
 228:src/main.c    ****     printf("Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n\n");
 229:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 230:src/main.c    **** 
 231:src/main.c    ****     printf("Wrapped message:\n");
 232:src/main.c    ****     printf("---------------\n\n");
 233:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 234:src/main.c    **** 
 235:src/main.c    **** 
 236:src/main.c    ****     printf("\n\n");
GAS LISTING /tmp/ccypY4LQ.s 			page 6


 237:src/main.c    **** 
 238:src/main.c    ****     char buff[1000] = {0};
 239:src/main.c    ****     hnd.init_str_buff(buff, 1000);
 240:src/main.c    ****     hnd.enable_buff();
 241:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 242:src/main.c    ****     printf("Wrapped message buffered\n");
 243:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 244:src/main.c    ****     printf("Wrapped message (buffered again)\n");
 245:src/main.c    ****     hnd.disable_buff();
 246:src/main.c    **** 
 247:src/main.c    ****     printf("\n\n");
 248:src/main.c    ****     printf("Buffer content:\n");
 249:src/main.c    ****     printf("%s\n\n", buff);
 250:src/main.c    **** 
 251:src/main.c    ****     printf("Reparsing '#wrapped_msg' '@wrapped_obj2'...\n\n");
 252:src/main.c    ****     msg_reparsed = msg_get(buff, "wrapped_msg", 1000);
 253:src/main.c    ****     hnd.print_msg(msg_reparsed); printf("\n\n");
 254:src/main.c    ****     obj_reparsed = msg_parser_get_obj(msg_reparsed, "wrapped_obj2");
 255:src/main.c    ****     hnd.print_str(obj_reparsed.content); printf(" len: %d\n\n", obj_reparsed.content.len);
 256:src/main.c    **** 
 257:src/main.c    **** 
 258:src/main.c    ****     msg_parser_get_float(&f_val, obj_reparsed, "f2");
 259:src/main.c    ****     msg_parser_get_int(&i_val, obj_reparsed, "i1");
 260:src/main.c    ****     printf("reparsed $i = %d $f2 = %f\n\n", i_val, f_val);
 261:src/main.c    ****     printf("\n\n");
 262:src/main.c    **** 
 263:src/main.c    **** 
 264:src/main.c    ****     /*Emulating master slave communication*/
 265:src/main.c    ****     
 266:src/main.c    ****     printf("Emulating a master - slave communaication:\n\n");
 267:src/main.c    ****     memset(buff, 0, 1000);
 268:src/main.c    ****     common_buff.buff = buff;
 269:src/main.c    ****     common_buff.buff_size = 1000;
 270:src/main.c    **** 
 271:src/main.c    ****     if(pthread_mutex_init(&outp_lock, NULL)) return 0;
 272:src/main.c    ****     
 273:src/main.c    ****     pthread_create(&thr_master, NULL, thread_mcu_master_fnc, (void *) &common_buff);
 274:src/main.c    ****     pthread_create(&thr_slave, NULL, thread_mcu_slave_fnc, (void *) &common_buff);
 275:src/main.c    **** 
 276:src/main.c    **** 
 277:src/main.c    ****     pthread_join(thr_master, NULL);
 278:src/main.c    ****     pthread_join(thr_slave, NULL);
 279:src/main.c    ****     pthread_mutex_destroy(&outp_lock);
 280:src/main.c    **** #endif
 281:src/main.c    **** 
 282:src/main.c    ****     printf("\n\n");
 283:src/main.c    **** 
 284:src/main.c    ****     end = clock();
 285:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 286:src/main.c    ****     printf("Execution time: %f s\n", exec_time);
 287:src/main.c    ****     return 0;
 288:src/main.c    **** }
 289:src/main.c    **** 
 290:src/main.c    **** 
 291:src/main.c    **** 
 292:src/main.c    **** void *thread_mcu_master_fnc(void *arg)
 293:src/main.c    **** {
GAS LISTING /tmp/ccypY4LQ.s 			page 7


  34              		.loc 1 293 0
  35              		.cfi_startproc
  36              	.LVL0:
  37 0000 55       		pushq	%rbp
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 6, -16
  41 0001 53       		pushq	%rbx
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 24
  44              		.cfi_offset 3, -24
  45 0002 4881EC18 		subq	$280, %rsp
  45      010000
  46              	.LCFI2:
  47              		.cfi_def_cfa_offset 304
  48 0009 4889FB   		movq	%rdi, %rbx
  49              		.loc 1 293 0
  50 000c 64488B04 		movq	%fs:40, %rax
  50      25280000 
  50      00
  51 0015 48898424 		movq	%rax, 264(%rsp)
  51      08010000 
  52 001d 31C0     		xorl	%eax, %eax
  53              	.LVL1:
 294:src/main.c    ****         thread_arg *buff = (thread_arg *) arg;
 295:src/main.c    ****         msg_hnd_t hnd;
 296:src/main.c    ****         msg_t msg_in;
 297:src/main.c    ****         msg_obj_t temp_obj;
 298:src/main.c    ****         msg_wrap_t msg_out;
 299:src/main.c    ****         msg_wrap_cmd_t cmd;
 300:src/main.c    **** 
 301:src/main.c    ****         float T1, T2;
 302:src/main.c    **** 
 303:src/main.c    ****         /*Create handler*/
 304:src/main.c    ****         hnd = msg_hnd_create(putchar);
  54              		.loc 1 304 0
  55 001f 488DBC24 		leaq	176(%rsp), %rdi
  55      B0000000 
  56              	.LVL2:
  57 0027 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
  57      000000
  58 002e E8000000 		call	msg_hnd_create@PLT
  58      00
  59              	.LVL3:
 305:src/main.c    **** 
 306:src/main.c    ****         /*init common string buffer*/
 307:src/main.c    ****         hnd.init_str_buff(buff->buff, buff->buff_size);
  60              		.loc 1 307 0
  61 0033 0FB77308 		movzwl	8(%rbx), %esi
  62 0037 488B3B   		movq	(%rbx), %rdi
  63 003a FF9424E8 		call	*232(%rsp)
  63      000000
  64              	.LVL4:
 308:src/main.c    ****         
 309:src/main.c    ****         /*Init message wrappeper*/
 310:src/main.c    ****         msg_out = msg_wrapper_init_msg("MASTER_MSG");
  65              		.loc 1 310 0
GAS LISTING /tmp/ccypY4LQ.s 			page 8


  66 0041 4889E5   		movq	%rsp, %rbp
  67 0044 488D3500 		leaq	.LC0(%rip), %rsi
  67      000000
  68 004b 4889EF   		movq	%rbp, %rdi
  69 004e E8000000 		call	msg_wrapper_init_msg@PLT
  69      00
  70              	.LVL5:
  71 0053 488B0424 		movq	(%rsp), %rax
  72 0057 488B5424 		movq	8(%rsp), %rdx
  72      08
  73 005c 48898424 		movq	%rax, 144(%rsp)
  73      90000000 
  74 0064 48899424 		movq	%rdx, 152(%rsp)
  74      98000000 
  75 006c 488B4424 		movq	16(%rsp), %rax
  75      10
  76 0071 488B5424 		movq	24(%rsp), %rdx
  76      18
  77 0076 48898424 		movq	%rax, 160(%rsp)
  77      A0000000 
  78 007e 48899424 		movq	%rdx, 168(%rsp)
  78      A8000000 
 311:src/main.c    ****         
 312:src/main.c    ****         /*Init command*/
 313:src/main.c    ****         cmd = msg_wrapper_init_cmd("Get_Temp");
  79              		.loc 1 313 0
  80 0086 488D3500 		leaq	.LC1(%rip), %rsi
  80      000000
  81 008d 4889EF   		movq	%rbp, %rdi
  82 0090 E8000000 		call	msg_wrapper_init_cmd@PLT
  82      00
  83              	.LVL6:
  84 0095 488B0424 		movq	(%rsp), %rax
  85 0099 488B5424 		movq	8(%rsp), %rdx
  85      08
  86 009e 48894424 		movq	%rax, 48(%rsp)
  86      30
  87 00a3 48895424 		movq	%rdx, 56(%rsp)
  87      38
  88 00a8 488B4424 		movq	16(%rsp), %rax
  88      10
  89 00ad 48894424 		movq	%rax, 64(%rsp)
  89      40
 314:src/main.c    **** 
 315:src/main.c    ****         /*Add command to the message*/
 316:src/main.c    ****         msg_wrapper_add_cmd_to_msg(&msg_out, &cmd);
  90              		.loc 1 316 0
  91 00b2 488D7424 		leaq	48(%rsp), %rsi
  91      30
  92 00b7 488DBC24 		leaq	144(%rsp), %rdi
  92      90000000 
  93 00bf E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
  93      00
  94              	.LVL7:
 317:src/main.c    **** 
 318:src/main.c    ****         /*Enable string buffer and send message*/
 319:src/main.c    ****         pthread_mutex_lock(&outp_lock); // LOCK
GAS LISTING /tmp/ccypY4LQ.s 			page 9


  95              		.loc 1 319 0
  96 00c4 488D3D00 		leaq	outp_lock(%rip), %rdi
  96      000000
  97 00cb E8000000 		call	pthread_mutex_lock@PLT
  97      00
  98              	.LVL8:
 320:src/main.c    ****         
 321:src/main.c    ****         hnd.enable_buff();
  99              		.loc 1 321 0
 100 00d0 FF9424D8 		call	*216(%rsp)
 100      000000
 101              	.LVL9:
 322:src/main.c    ****         hnd.print_wrapper_msg(msg_out);
 102              		.loc 1 322 0
 103 00d7 488BAC24 		movq	248(%rsp), %rbp
 103      F8000000 
 104 00df FFB424A8 		pushq	168(%rsp)
 104      000000
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 312
 107 00e6 FFB424A8 		pushq	168(%rsp)
 107      000000
 108              	.LCFI4:
 109              		.cfi_def_cfa_offset 320
 110 00ed FFB424A8 		pushq	168(%rsp)
 110      000000
 111              	.LCFI5:
 112              		.cfi_def_cfa_offset 328
 113 00f4 FFB424A8 		pushq	168(%rsp)
 113      000000
 114              	.LCFI6:
 115              		.cfi_def_cfa_offset 336
 116 00fb FFD5     		call	*%rbp
 117              	.LVL10:
 323:src/main.c    ****         hnd.disable_buff();
 118              		.loc 1 323 0
 119 00fd 4883C420 		addq	$32, %rsp
 120              	.LCFI7:
 121              		.cfi_def_cfa_offset 304
 122 0101 FF9424E0 		call	*224(%rsp)
 122      000000
 123              	.LVL11:
 124              	.LBB190:
 125              	.LBB191:
 126              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
GAS LISTING /tmp/ccypY4LQ.s 			page 10


  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
GAS LISTING /tmp/ccypY4LQ.s 			page 11


  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 127              		.loc 2 104 0
 128 0108 488D3500 		leaq	.LC2(%rip), %rsi
 128      000000
 129 010f BF010000 		movl	$1, %edi
 129      00
 130 0114 B8000000 		movl	$0, %eax
 130      00
 131 0119 E8000000 		call	__printf_chk@PLT
 131      00
 132              	.LVL12:
 133              	.LBE191:
 134              	.LBE190:
 324:src/main.c    ****         
 325:src/main.c    **** 
 326:src/main.c    ****         /*Print message to stdout*/
 327:src/main.c    ****         printf("Master >> ");
 328:src/main.c    ****         hnd.print_wrapper_msg(msg_out);
 135              		.loc 1 328 0
 136 011e FFB424A8 		pushq	168(%rsp)
 136      000000
 137              	.LCFI8:
 138              		.cfi_def_cfa_offset 312
GAS LISTING /tmp/ccypY4LQ.s 			page 12


 139 0125 FFB424A8 		pushq	168(%rsp)
 139      000000
 140              	.LCFI9:
 141              		.cfi_def_cfa_offset 320
 142 012c FFB424A8 		pushq	168(%rsp)
 142      000000
 143              	.LCFI10:
 144              		.cfi_def_cfa_offset 328
 145 0133 FFB424A8 		pushq	168(%rsp)
 145      000000
 146              	.LCFI11:
 147              		.cfi_def_cfa_offset 336
 148 013a FFD5     		call	*%rbp
 149              	.LVL13:
 150              	.LBB192:
 151              	.LBB193:
 152              		.loc 2 104 0
 153 013c 4883C420 		addq	$32, %rsp
 154              	.LCFI12:
 155              		.cfi_def_cfa_offset 304
 156 0140 BF0A0000 		movl	$10, %edi
 156      00
 157 0145 E8000000 		call	putchar@PLT
 157      00
 158              	.LVL14:
 159              	.LBE193:
 160              	.LBE192:
 329:src/main.c    ****         printf("\n");
 330:src/main.c    **** 
 331:src/main.c    ****         pthread_mutex_unlock(&outp_lock); // UNLOCK
 161              		.loc 1 331 0
 162 014a 488D3D00 		leaq	outp_lock(%rip), %rdi
 162      000000
 163 0151 E8000000 		call	pthread_mutex_unlock@PLT
 163      00
 164              	.LVL15:
 165              	.L5:
 332:src/main.c    **** 
 333:src/main.c    ****         /*Polling the common buffer*/
 334:src/main.c    ****         while(1) {
 335:src/main.c    ****             
 336:src/main.c    ****             msg_in = msg_get(buff->buff, "SLAVE_MSG", buff->buff_size);
 166              		.loc 1 336 0
 167 0156 0FB74B08 		movzwl	8(%rbx), %ecx
 168 015a 488B33   		movq	(%rbx), %rsi
 169 015d 488D7C24 		leaq	80(%rsp), %rdi
 169      50
 170 0162 488D1500 		leaq	.LC3(%rip), %rdx
 170      000000
 171 0169 E8000000 		call	msg_get@PLT
 171      00
 172              	.LVL16:
 337:src/main.c    ****             if(msg_in.content.s != NULL) { // msg is arrived
 173              		.loc 1 337 0
 174 016e 48837C24 		cmpq	$0, 96(%rsp)
 174      6000
 175 0174 750C     		jne	.L9
GAS LISTING /tmp/ccypY4LQ.s 			page 13


 338:src/main.c    ****                 
 339:src/main.c    ****                 pthread_mutex_lock(&outp_lock); // LOCK
 340:src/main.c    ****                 
 341:src/main.c    ****                 temp_obj = msg_parser_get_obj(msg_in, "Temp");
 342:src/main.c    **** 
 343:src/main.c    ****                 if(temp_obj.content.s != NULL) {
 344:src/main.c    ****                     
 345:src/main.c    ****                     if(msg_parser_get_float(&T1, temp_obj, "T1") != -1) {
 346:src/main.c    ****                     printf("Master >> T1 = %f (from Slave)\n", T1);
 347:src/main.c    ****                     }
 348:src/main.c    ****                     if(msg_parser_get_float(&T2, temp_obj, "T2") != -1) {
 349:src/main.c    ****                         printf("Master >> T2 = %f (from Slave)\n", T2);
 350:src/main.c    ****                     }
 351:src/main.c    ****                     
 352:src/main.c    ****                 }
 353:src/main.c    ****                 
 354:src/main.c    ****                 pthread_mutex_unlock(&outp_lock); // UNLOCK
 355:src/main.c    **** 
 356:src/main.c    ****                 break;
 357:src/main.c    ****             }
 358:src/main.c    ****             usleep(1000);
 176              		.loc 1 358 0
 177 0176 BFE80300 		movl	$1000, %edi
 177      00
 178 017b E8000000 		call	usleep@PLT
 178      00
 179              	.LVL17:
 336:src/main.c    ****             if(msg_in.content.s != NULL) { // msg is arrived
 180              		.loc 1 336 0
 181 0180 EBD4     		jmp	.L5
 182              	.L9:
 339:src/main.c    ****                 
 183              		.loc 1 339 0
 184 0182 488D3D00 		leaq	outp_lock(%rip), %rdi
 184      000000
 185 0189 E8000000 		call	pthread_mutex_lock@PLT
 185      00
 186              	.LVL18:
 341:src/main.c    **** 
 187              		.loc 1 341 0
 188 018e 488D7C24 		leaq	112(%rsp), %rdi
 188      70
 189 0193 FF742468 		pushq	104(%rsp)
 190              	.LCFI13:
 191              		.cfi_def_cfa_offset 312
 192 0197 FF742468 		pushq	104(%rsp)
 193              	.LCFI14:
 194              		.cfi_def_cfa_offset 320
 195 019b FF742468 		pushq	104(%rsp)
 196              	.LCFI15:
 197              		.cfi_def_cfa_offset 328
 198 019f FF742468 		pushq	104(%rsp)
 199              	.LCFI16:
 200              		.cfi_def_cfa_offset 336
 201 01a3 488D3500 		leaq	.LC4(%rip), %rsi
 201      000000
 202 01aa E8000000 		call	msg_parser_get_obj@PLT
GAS LISTING /tmp/ccypY4LQ.s 			page 14


 202      00
 203              	.LVL19:
 343:src/main.c    ****                     
 204              		.loc 1 343 0
 205 01af 4883C420 		addq	$32, %rsp
 206              	.LCFI17:
 207              		.cfi_def_cfa_offset 304
 208 01b3 4883BC24 		cmpq	$0, 128(%rsp)
 208      80000000 
 208      00
 209 01bc 0F848A00 		je	.L3
 209      0000
 345:src/main.c    ****                     printf("Master >> T1 = %f (from Slave)\n", T1);
 210              		.loc 1 345 0
 211 01c2 488D7C24 		leaq	40(%rsp), %rdi
 211      28
 212 01c7 FFB42488 		pushq	136(%rsp)
 212      000000
 213              	.LCFI18:
 214              		.cfi_def_cfa_offset 312
 215 01ce FFB42488 		pushq	136(%rsp)
 215      000000
 216              	.LCFI19:
 217              		.cfi_def_cfa_offset 320
 218 01d5 FFB42488 		pushq	136(%rsp)
 218      000000
 219              	.LCFI20:
 220              		.cfi_def_cfa_offset 328
 221 01dc FFB42488 		pushq	136(%rsp)
 221      000000
 222              	.LCFI21:
 223              		.cfi_def_cfa_offset 336
 224 01e3 488D3500 		leaq	.LC5(%rip), %rsi
 224      000000
 225 01ea E8000000 		call	msg_parser_get_float@PLT
 225      00
 226              	.LVL20:
 227 01ef 4883C420 		addq	$32, %rsp
 228              	.LCFI22:
 229              		.cfi_def_cfa_offset 304
 230 01f3 3CFF     		cmpb	$-1, %al
 231 01f5 757E     		jne	.L10
 232              	.L4:
 348:src/main.c    ****                         printf("Master >> T2 = %f (from Slave)\n", T2);
 233              		.loc 1 348 0
 234 01f7 488D7C24 		leaq	44(%rsp), %rdi
 234      2C
 235 01fc FFB42488 		pushq	136(%rsp)
 235      000000
 236              	.LCFI23:
 237              		.cfi_def_cfa_offset 312
 238 0203 FFB42488 		pushq	136(%rsp)
 238      000000
 239              	.LCFI24:
 240              		.cfi_def_cfa_offset 320
 241 020a FFB42488 		pushq	136(%rsp)
 241      000000
GAS LISTING /tmp/ccypY4LQ.s 			page 15


 242              	.LCFI25:
 243              		.cfi_def_cfa_offset 328
 244 0211 FFB42488 		pushq	136(%rsp)
 244      000000
 245              	.LCFI26:
 246              		.cfi_def_cfa_offset 336
 247 0218 488D3500 		leaq	.LC7(%rip), %rsi
 247      000000
 248 021f E8000000 		call	msg_parser_get_float@PLT
 248      00
 249              	.LVL21:
 250 0224 4883C420 		addq	$32, %rsp
 251              	.LCFI27:
 252              		.cfi_def_cfa_offset 304
 253 0228 3CFF     		cmpb	$-1, %al
 254 022a 7420     		je	.L3
 349:src/main.c    ****                     }
 255              		.loc 1 349 0
 256 022c 660FEFC0 		pxor	%xmm0, %xmm0
 257 0230 F30F5A44 		cvtss2sd	44(%rsp), %xmm0
 257      242C
 258              	.LVL22:
 259              	.LBB194:
 260              	.LBB195:
 261              		.loc 2 104 0
 262 0236 488D3500 		leaq	.LC8(%rip), %rsi
 262      000000
 263 023d BF010000 		movl	$1, %edi
 263      00
 264 0242 B8010000 		movl	$1, %eax
 264      00
 265 0247 E8000000 		call	__printf_chk@PLT
 265      00
 266              	.LVL23:
 267              	.L3:
 268              	.LBE195:
 269              	.LBE194:
 354:src/main.c    **** 
 270              		.loc 1 354 0
 271 024c 488D3D00 		leaq	outp_lock(%rip), %rdi
 271      000000
 272 0253 E8000000 		call	pthread_mutex_unlock@PLT
 272      00
 273              	.LVL24:
 359:src/main.c    ****         }
 360:src/main.c    **** 
 361:src/main.c    ****         return;
 362:src/main.c    **** }
 274              		.loc 1 362 0
 275 0258 488B9424 		movq	264(%rsp), %rdx
 275      08010000 
 276 0260 64483314 		xorq	%fs:40, %rdx
 276      25280000 
 276      00
 277 0269 752F     		jne	.L11
 278 026b 4881C418 		addq	$280, %rsp
 278      010000
GAS LISTING /tmp/ccypY4LQ.s 			page 16


 279              	.LCFI28:
 280              		.cfi_remember_state
 281              		.cfi_def_cfa_offset 24
 282 0272 5B       		popq	%rbx
 283              	.LCFI29:
 284              		.cfi_def_cfa_offset 16
 285              	.LVL25:
 286 0273 5D       		popq	%rbp
 287              	.LCFI30:
 288              		.cfi_def_cfa_offset 8
 289 0274 C3       		ret
 290              	.LVL26:
 291              	.L10:
 292              	.LCFI31:
 293              		.cfi_restore_state
 346:src/main.c    ****                     }
 294              		.loc 1 346 0
 295 0275 660FEFC0 		pxor	%xmm0, %xmm0
 296 0279 F30F5A44 		cvtss2sd	40(%rsp), %xmm0
 296      2428
 297              	.LVL27:
 298              	.LBB196:
 299              	.LBB197:
 300              		.loc 2 104 0
 301 027f 488D3500 		leaq	.LC6(%rip), %rsi
 301      000000
 302 0286 BF010000 		movl	$1, %edi
 302      00
 303 028b B8010000 		movl	$1, %eax
 303      00
 304 0290 E8000000 		call	__printf_chk@PLT
 304      00
 305              	.LVL28:
 306 0295 E95DFFFF 		jmp	.L4
 306      FF
 307              	.LVL29:
 308              	.L11:
 309              	.LBE197:
 310              	.LBE196:
 311              		.loc 1 362 0
 312 029a E8000000 		call	__stack_chk_fail@PLT
 312      00
 313              	.LVL30:
 314              		.cfi_endproc
 315              	.LFE69:
 317              		.section	.rodata.thread_mcu_slave_fnc.str1.1,"aMS",@progbits,1
 318              	.LC11:
 319 0000 536C6176 		.string	"Slave: >> "
 319      653A203E 
 319      3E2000
 320              		.section	.text.thread_mcu_slave_fnc,"ax",@progbits
 321              		.globl	thread_mcu_slave_fnc
 323              	thread_mcu_slave_fnc:
 324              	.LFB70:
 363:src/main.c    **** 
 364:src/main.c    **** 
 365:src/main.c    **** 
GAS LISTING /tmp/ccypY4LQ.s 			page 17


 366:src/main.c    **** void *thread_mcu_slave_fnc(void *arg)
 367:src/main.c    **** {
 325              		.loc 1 367 0
 326              		.cfi_startproc
 327              	.LVL31:
 328 0000 55       		pushq	%rbp
 329              	.LCFI32:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 6, -16
 332 0001 53       		pushq	%rbx
 333              	.LCFI33:
 334              		.cfi_def_cfa_offset 24
 335              		.cfi_offset 3, -24
 336 0002 4881EC68 		subq	$360, %rsp
 336      010000
 337              	.LCFI34:
 338              		.cfi_def_cfa_offset 384
 339 0009 4889FB   		movq	%rdi, %rbx
 340              		.loc 1 367 0
 341 000c 64488B04 		movq	%fs:40, %rax
 341      25280000 
 341      00
 342 0015 48898424 		movq	%rax, 344(%rsp)
 342      58010000 
 343 001d 31C0     		xorl	%eax, %eax
 344              	.LVL32:
 368:src/main.c    ****         thread_arg *buff = (thread_arg *) arg;
 369:src/main.c    ****         msg_hnd_t hnd;
 370:src/main.c    ****         msg_t msg_in;
 371:src/main.c    ****         msg_cmd_t cmd;
 372:src/main.c    ****         msg_wrap_obj_t temp_obj;
 373:src/main.c    ****         msg_wrap_t msg_out;
 374:src/main.c    ****         msg_wrap_float_t T1;
 375:src/main.c    ****         msg_wrap_float_t T2;
 376:src/main.c    **** 
 377:src/main.c    ****         /*Create handler*/
 378:src/main.c    ****         hnd = msg_hnd_create(putchar);
 345              		.loc 1 378 0
 346 001f 488DBC24 		leaq	256(%rsp), %rdi
 346      00010000 
 347              	.LVL33:
 348 0027 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 348      000000
 349 002e E8000000 		call	msg_hnd_create@PLT
 349      00
 350              	.LVL34:
 379:src/main.c    **** 
 380:src/main.c    ****         /*init common string buffer*/
 381:src/main.c    ****         hnd.init_str_buff(buff->buff, buff->buff_size);
 351              		.loc 1 381 0
 352 0033 0FB77308 		movzwl	8(%rbx), %esi
 353 0037 488B3B   		movq	(%rbx), %rdi
 354 003a FF942438 		call	*312(%rsp)
 354      010000
 355              	.LVL35:
 382:src/main.c    **** 
 383:src/main.c    ****         /*Init message wrappeper*/
GAS LISTING /tmp/ccypY4LQ.s 			page 18


 384:src/main.c    ****         msg_out = msg_wrapper_init_msg("SLAVE_MSG");
 356              		.loc 1 384 0
 357 0041 488D7C24 		leaq	48(%rsp), %rdi
 357      30
 358 0046 488D3500 		leaq	.LC3(%rip), %rsi
 358      000000
 359 004d E8000000 		call	msg_wrapper_init_msg@PLT
 359      00
 360              	.LVL36:
 361 0052 488B4424 		movq	48(%rsp), %rax
 361      30
 362 0057 488B5424 		movq	56(%rsp), %rdx
 362      38
 363 005c 48894424 		movq	%rax, 112(%rsp)
 363      70
 364 0061 48895424 		movq	%rdx, 120(%rsp)
 364      78
 365 0066 488B4424 		movq	64(%rsp), %rax
 365      40
 366 006b 488B5424 		movq	72(%rsp), %rdx
 366      48
 367 0070 48898424 		movq	%rax, 128(%rsp)
 367      80000000 
 368 0078 48899424 		movq	%rdx, 136(%rsp)
 368      88000000 
 385:src/main.c    **** 
 386:src/main.c    ****         /*Init object*/
 387:src/main.c    ****         temp_obj = msg_wrapper_init_obj("Temp");
 369              		.loc 1 387 0
 370 0080 4889E5   		movq	%rsp, %rbp
 371 0083 488D3500 		leaq	.LC4(%rip), %rsi
 371      000000
 372 008a 4889EF   		movq	%rbp, %rdi
 373 008d E8000000 		call	msg_wrapper_init_obj@PLT
 373      00
 374              	.LVL37:
 375 0092 488B0424 		movq	(%rsp), %rax
 376 0096 488B5424 		movq	8(%rsp), %rdx
 376      08
 377 009b 48898424 		movq	%rax, 208(%rsp)
 377      D0000000 
 378 00a3 48899424 		movq	%rdx, 216(%rsp)
 378      D8000000 
 379 00ab 488B4424 		movq	16(%rsp), %rax
 379      10
 380 00b0 488B5424 		movq	24(%rsp), %rdx
 380      18
 381 00b5 48898424 		movq	%rax, 224(%rsp)
 381      E0000000 
 382 00bd 48899424 		movq	%rdx, 232(%rsp)
 382      E8000000 
 383 00c5 488B4424 		movq	32(%rsp), %rax
 383      20
 384 00ca 488B5424 		movq	40(%rsp), %rdx
 384      28
 385 00cf 48898424 		movq	%rax, 240(%rsp)
 385      F0000000 
GAS LISTING /tmp/ccypY4LQ.s 			page 19


 386 00d7 48899424 		movq	%rdx, 248(%rsp)
 386      F8000000 
 388:src/main.c    **** 
 389:src/main.c    ****         /*Init Temperatures*/
 390:src/main.c    ****         T1 = msg_wrapper_init_float("T1", 32.45, 2);
 387              		.loc 1 390 0
 388 00df BA020000 		movl	$2, %edx
 388      00
 389 00e4 F30F1005 		movss	.LC9(%rip), %xmm0
 389      00000000 
 390 00ec 488D3500 		leaq	.LC5(%rip), %rsi
 390      000000
 391 00f3 4889EF   		movq	%rbp, %rdi
 392 00f6 E8000000 		call	msg_wrapper_init_float@PLT
 392      00
 393              	.LVL38:
 394 00fb 488B0424 		movq	(%rsp), %rax
 395 00ff 488B5424 		movq	8(%rsp), %rdx
 395      08
 396 0104 48898424 		movq	%rax, 144(%rsp)
 396      90000000 
 397 010c 48899424 		movq	%rdx, 152(%rsp)
 397      98000000 
 398 0114 488B4424 		movq	16(%rsp), %rax
 398      10
 399 0119 488B5424 		movq	24(%rsp), %rdx
 399      18
 400 011e 48898424 		movq	%rax, 160(%rsp)
 400      A0000000 
 401 0126 48899424 		movq	%rdx, 168(%rsp)
 401      A8000000 
 391:src/main.c    ****         T2 = msg_wrapper_init_float("T2", 29.34, 2);
 402              		.loc 1 391 0
 403 012e BA020000 		movl	$2, %edx
 403      00
 404 0133 F30F1005 		movss	.LC10(%rip), %xmm0
 404      00000000 
 405 013b 488D3500 		leaq	.LC7(%rip), %rsi
 405      000000
 406 0142 4889EF   		movq	%rbp, %rdi
 407 0145 E8000000 		call	msg_wrapper_init_float@PLT
 407      00
 408              	.LVL39:
 409 014a 488B0424 		movq	(%rsp), %rax
 410 014e 488B5424 		movq	8(%rsp), %rdx
 410      08
 411 0153 48898424 		movq	%rax, 176(%rsp)
 411      B0000000 
 412 015b 48899424 		movq	%rdx, 184(%rsp)
 412      B8000000 
 413 0163 488B4424 		movq	16(%rsp), %rax
 413      10
 414 0168 488B5424 		movq	24(%rsp), %rdx
 414      18
 415 016d 48898424 		movq	%rax, 192(%rsp)
 415      C0000000 
 416 0175 48899424 		movq	%rdx, 200(%rsp)
GAS LISTING /tmp/ccypY4LQ.s 			page 20


 416      C8000000 
 392:src/main.c    **** 
 393:src/main.c    ****         msg_wrapper_add_float_to_obj(&temp_obj, &T1);
 417              		.loc 1 393 0
 418 017d 488DB424 		leaq	144(%rsp), %rsi
 418      90000000 
 419 0185 488DAC24 		leaq	208(%rsp), %rbp
 419      D0000000 
 420 018d 4889EF   		movq	%rbp, %rdi
 421 0190 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 421      00
 422              	.LVL40:
 394:src/main.c    ****         msg_wrapper_add_float_to_obj(&temp_obj, &T2);
 423              		.loc 1 394 0
 424 0195 488DB424 		leaq	176(%rsp), %rsi
 424      B0000000 
 425 019d 4889EF   		movq	%rbp, %rdi
 426 01a0 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 426      00
 427              	.LVL41:
 395:src/main.c    ****         msg_wrapper_add_object_to_msg(&msg_out, &temp_obj);
 428              		.loc 1 395 0
 429 01a5 488D7C24 		leaq	112(%rsp), %rdi
 429      70
 430 01aa 4889EE   		movq	%rbp, %rsi
 431 01ad E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 431      00
 432              	.LVL42:
 433 01b2 EB0A     		jmp	.L14
 434              	.LVL43:
 435              	.L13:
 396:src/main.c    **** 
 397:src/main.c    ****         /*Polling the commong buffer*/
 398:src/main.c    ****         while(1) {
 399:src/main.c    ****             
 400:src/main.c    ****             
 401:src/main.c    ****             
 402:src/main.c    ****             msg_in = msg_get(buff->buff, "MASTER_MSG", buff->buff_size);
 403:src/main.c    ****             
 404:src/main.c    **** 
 405:src/main.c    ****             if(msg_in.content.s != NULL) { //message arrived
 406:src/main.c    **** 
 407:src/main.c    ****                 
 408:src/main.c    **** 
 409:src/main.c    ****                 cmd = msg_parser_get_cmd(msg_in, "Get_Temp");
 410:src/main.c    ****                 if(cmd.cmd.s != NULL) { //command arrived
 411:src/main.c    **** 
 412:src/main.c    ****                     pthread_mutex_lock(&outp_lock); // LOCK
 413:src/main.c    **** 
 414:src/main.c    ****                     /*Send to the master*/
 415:src/main.c    ****                     hnd.enable_buff();
 416:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
 417:src/main.c    ****                     hnd.disable_buff();
 418:src/main.c    **** 
 419:src/main.c    ****                     /*Print to stdout*/
 420:src/main.c    ****                     printf("Slave: >> ");
 421:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
GAS LISTING /tmp/ccypY4LQ.s 			page 21


 422:src/main.c    ****                     printf("\n");
 423:src/main.c    ****                     
 424:src/main.c    ****                     pthread_mutex_unlock(&outp_lock); // UNLOCK
 425:src/main.c    **** 
 426:src/main.c    ****                     break;
 427:src/main.c    ****                 }
 428:src/main.c    ****             }
 429:src/main.c    ****             usleep(1000);
 436              		.loc 1 429 0
 437 01b4 BFE80300 		movl	$1000, %edi
 437      00
 438 01b9 E8000000 		call	usleep@PLT
 438      00
 439              	.LVL44:
 440              	.L14:
 402:src/main.c    ****             
 441              		.loc 1 402 0
 442 01be 0FB74B08 		movzwl	8(%rbx), %ecx
 443 01c2 488B33   		movq	(%rbx), %rsi
 444 01c5 488D7C24 		leaq	80(%rsp), %rdi
 444      50
 445 01ca 488D1500 		leaq	.LC0(%rip), %rdx
 445      000000
 446 01d1 E8000000 		call	msg_get@PLT
 446      00
 447              	.LVL45:
 405:src/main.c    **** 
 448              		.loc 1 405 0
 449 01d6 48837C24 		cmpq	$0, 96(%rsp)
 449      6000
 450 01dc 74D6     		je	.L13
 409:src/main.c    ****                 if(cmd.cmd.s != NULL) { //command arrived
 451              		.loc 1 409 0
 452 01de FF742468 		pushq	104(%rsp)
 453              	.LCFI35:
 454              		.cfi_def_cfa_offset 392
 455 01e2 FF742468 		pushq	104(%rsp)
 456              	.LCFI36:
 457              		.cfi_def_cfa_offset 400
 458 01e6 FF742468 		pushq	104(%rsp)
 459              	.LCFI37:
 460              		.cfi_def_cfa_offset 408
 461 01ea FF742468 		pushq	104(%rsp)
 462              	.LCFI38:
 463              		.cfi_def_cfa_offset 416
 464 01ee 488D3D00 		leaq	.LC1(%rip), %rdi
 464      000000
 465 01f5 E8000000 		call	msg_parser_get_cmd@PLT
 465      00
 466              	.LVL46:
 410:src/main.c    **** 
 467              		.loc 1 410 0
 468 01fa 4883C420 		addq	$32, %rsp
 469              	.LCFI39:
 470              		.cfi_def_cfa_offset 384
 471 01fe 4885C0   		testq	%rax, %rax
 472 0201 74B1     		je	.L13
GAS LISTING /tmp/ccypY4LQ.s 			page 22


 412:src/main.c    **** 
 473              		.loc 1 412 0
 474 0203 488D3D00 		leaq	outp_lock(%rip), %rdi
 474      000000
 475 020a E8000000 		call	pthread_mutex_lock@PLT
 475      00
 476              	.LVL47:
 415:src/main.c    ****                     hnd.print_wrapper_msg(msg_out);
 477              		.loc 1 415 0
 478 020f FF942428 		call	*296(%rsp)
 478      010000
 479              	.LVL48:
 416:src/main.c    ****                     hnd.disable_buff();
 480              		.loc 1 416 0
 481 0216 488B9C24 		movq	328(%rsp), %rbx
 481      48010000 
 482              	.LVL49:
 483 021e FFB42488 		pushq	136(%rsp)
 483      000000
 484              	.LCFI40:
 485              		.cfi_def_cfa_offset 392
 486 0225 FFB42488 		pushq	136(%rsp)
 486      000000
 487              	.LCFI41:
 488              		.cfi_def_cfa_offset 400
 489 022c FFB42488 		pushq	136(%rsp)
 489      000000
 490              	.LCFI42:
 491              		.cfi_def_cfa_offset 408
 492 0233 FFB42488 		pushq	136(%rsp)
 492      000000
 493              	.LCFI43:
 494              		.cfi_def_cfa_offset 416
 495 023a FFD3     		call	*%rbx
 496              	.LVL50:
 417:src/main.c    **** 
 497              		.loc 1 417 0
 498 023c 4883C420 		addq	$32, %rsp
 499              	.LCFI44:
 500              		.cfi_def_cfa_offset 384
 501 0240 FF942430 		call	*304(%rsp)
 501      010000
 502              	.LVL51:
 503              	.LBB198:
 504              	.LBB199:
 505              		.loc 2 104 0
 506 0247 488D3500 		leaq	.LC11(%rip), %rsi
 506      000000
 507 024e BF010000 		movl	$1, %edi
 507      00
 508 0253 B8000000 		movl	$0, %eax
 508      00
 509 0258 E8000000 		call	__printf_chk@PLT
 509      00
 510              	.LVL52:
 511              	.LBE199:
 512              	.LBE198:
GAS LISTING /tmp/ccypY4LQ.s 			page 23


 421:src/main.c    ****                     printf("\n");
 513              		.loc 1 421 0
 514 025d FFB42488 		pushq	136(%rsp)
 514      000000
 515              	.LCFI45:
 516              		.cfi_def_cfa_offset 392
 517 0264 FFB42488 		pushq	136(%rsp)
 517      000000
 518              	.LCFI46:
 519              		.cfi_def_cfa_offset 400
 520 026b FFB42488 		pushq	136(%rsp)
 520      000000
 521              	.LCFI47:
 522              		.cfi_def_cfa_offset 408
 523 0272 FFB42488 		pushq	136(%rsp)
 523      000000
 524              	.LCFI48:
 525              		.cfi_def_cfa_offset 416
 526 0279 FFD3     		call	*%rbx
 527              	.LVL53:
 528              	.LBB200:
 529              	.LBB201:
 530              		.loc 2 104 0
 531 027b 4883C420 		addq	$32, %rsp
 532              	.LCFI49:
 533              		.cfi_def_cfa_offset 384
 534 027f BF0A0000 		movl	$10, %edi
 534      00
 535 0284 E8000000 		call	putchar@PLT
 535      00
 536              	.LVL54:
 537              	.LBE201:
 538              	.LBE200:
 424:src/main.c    **** 
 539              		.loc 1 424 0
 540 0289 488D3D00 		leaq	outp_lock(%rip), %rdi
 540      000000
 541 0290 E8000000 		call	pthread_mutex_unlock@PLT
 541      00
 542              	.LVL55:
 430:src/main.c    ****         }
 431:src/main.c    **** 
 432:src/main.c    ****         return;
 433:src/main.c    **** 
 434:src/main.c    **** }...
 543              		.loc 1 434 0
 544 0295 488B9424 		movq	344(%rsp), %rdx
 544      58010000 
 545 029d 64483314 		xorq	%fs:40, %rdx
 545      25280000 
 545      00
 546 02a6 750A     		jne	.L18
 547 02a8 4881C468 		addq	$360, %rsp
 547      010000
 548              	.LCFI50:
 549              		.cfi_remember_state
 550              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/ccypY4LQ.s 			page 24


 551 02af 5B       		popq	%rbx
 552              	.LCFI51:
 553              		.cfi_def_cfa_offset 16
 554 02b0 5D       		popq	%rbp
 555              	.LCFI52:
 556              		.cfi_def_cfa_offset 8
 557 02b1 C3       		ret
 558              	.L18:
 559              	.LCFI53:
 560              		.cfi_restore_state
 561 02b2 E8000000 		call	__stack_chk_fail@PLT
 561      00
 562              	.LVL56:
 563              		.cfi_endproc
 564              	.LFE70:
 566              		.section	.rodata.main.str1.1,"aMS",@progbits,1
 567              	.LC12:
 568 0000 54727565 		.string	"True"
 568      00
 569              	.LC13:
 570 0005 46616C73 		.string	"False"
 570      6500
 571              	.LC14:
 572 000b 54455354 		.string	"TEST mcu-msg-parser"
 572      206D6375 
 572      2D6D7367 
 572      2D706172 
 572      73657200 
 573              	.LC15:
 574 001f 3D3D3D3D 		.string	"==================="
 574      3D3D3D3D 
 574      3D3D3D3D 
 574      3D3D3D3D 
 574      3D3D3D00 
 575              	.LC16:
 576 0033 74657374 		.string	"test_str1 = \"%s\"\n\n"
 576      5F737472 
 576      31203D20 
 576      22257322 
 576      0A0A00
 577              	.LC17:
 578 0046 3E3E2067 		.string	">> getting test_msg..."
 578      65747469 
 578      6E672074 
 578      6573745F 
 578      6D73672E 
 579              	.LC18:
 580 005d 74657374 		.string	"test_msg"
 580      5F6D7367 
 580      00
 581              		.section	.rodata.main.str1.8,"aMS",@progbits,1
 582              		.align 8
 583              	.LC19:
 584 0000 6D73672E 		.string	"msg.id_len: %d msg.content_len: %d\n"
 584      69645F6C 
 584      656E3A20 
 584      2564206D 
GAS LISTING /tmp/ccypY4LQ.s 			page 25


 584      73672E63 
 585              		.section	.rodata.main.str1.1
 586              	.LC20:
 587 0066 0A00     		.string	"\n"
 588              	.LC21:
 589 0068 6D657373 		.string	"message not found!\n"
 589      61676520 
 589      6E6F7420 
 589      666F756E 
 589      64210A00 
 590              	.LC22:
 591 007c 3E3E2067 		.string	">> getting CMD1 cmd..."
 591      65747469 
 591      6E672043 
 591      4D443120 
 591      636D642E 
 592              	.LC23:
 593 0093 434D4431 		.string	"CMD1"
 593      00
 594              	.LC24:
 595 0098 25730A0A 		.string	"%s\n\n"
 595      00
 596              	.LC25:
 597 009d 3E3E2067 		.string	">> getting CMD2 cmd..."
 597      65747469 
 597      6E672043 
 597      4D443220 
 597      636D642E 
 598              	.LC26:
 599 00b4 434D4432 		.string	"CMD2"
 599      00
 600              	.LC27:
 601 00b9 3E3E2067 		.string	">> getting CMD_last cmd..."
 601      65747469 
 601      6E672043 
 601      4D445F6C 
 601      61737420 
 602              	.LC28:
 603 00d4 434D445F 		.string	"CMD_last"
 603      6C617374 
 603      00
 604              	.LC29:
 605 00dd 3E3E2067 		.string	">> getting obj1..."
 605      65747469 
 605      6E67206F 
 605      626A312E 
 605      2E2E00
 606              	.LC30:
 607 00f0 6F626A31 		.string	"obj1"
 607      00
 608              		.section	.rodata.main.str1.8
 609 0024 00000000 		.align 8
 610              	.LC31:
 611 0028 6F626A31 		.string	"obj1.id_len: %d obj1.content_len: %d\n"
 611      2E69645F 
 611      6C656E3A 
 611      20256420 
GAS LISTING /tmp/ccypY4LQ.s 			page 26


 611      6F626A31 
 612              		.section	.rodata.main.str1.1
 613              	.LC32:
 614 00f5 3E3E2067 		.string	">> getting obj2..."
 614      65747469 
 614      6E67206F 
 614      626A322E 
 614      2E2E00
 615              	.LC33:
 616 0108 6F626A32 		.string	"obj2"
 616      00
 617              		.section	.rodata.main.str1.8
 618 004e 0000     		.align 8
 619              	.LC34:
 620 0050 6F626A32 		.string	"obj2.id_len: %d obj2.content_len: %d\n"
 620      2E69645F 
 620      6C656E3A 
 620      20256420 
 620      6F626A32 
 621 0076 0000     		.align 8
 622              	.LC35:
 623 0078 3E3E2067 		.string	">> getting obj1->key11 integer..."
 623      65747469 
 623      6E67206F 
 623      626A312D 
 623      3E6B6579 
 624              		.section	.rodata.main.str1.1
 625              	.LC37:
 626 010d 6B657931 		.string	"key11"
 626      3100
 627              	.LC38:
 628 0113 72203D20 		.string	"r = %d ival = %d\n\n"
 628      25642069 
 628      76616C20 
 628      3D202564 
 628      0A0A00
 629              		.section	.rodata.main.str1.8
 630 009a 00000000 		.align 8
 630      0000
 631              	.LC39:
 632 00a0 3E3E2067 		.string	">> getting obj2->key21 float..."
 632      65747469 
 632      6E67206F 
 632      626A322D 
 632      3E6B6579 
 633              		.section	.rodata.main.str1.1
 634              	.LC40:
 635 0126 6B657932 		.string	"key21"
 635      3100
 636              	.LC41:
 637 012c 72203D20 		.string	"r = %d fval = %.11f\n\n"
 637      25642066 
 637      76616C20 
 637      3D20252E 
 637      3131660A 
 638              		.section	.rodata.main.str1.8
 639              		.align 8
GAS LISTING /tmp/ccypY4LQ.s 			page 27


 640              	.LC42:
 641 00c0 3E3E2067 		.string	">> getting obj1->key12 string..."
 641      65747469 
 641      6E67206F 
 641      626A312D 
 641      3E6B6579 
 642              		.section	.rodata.main.str1.1
 643              	.LC43:
 644 0142 6B657931 		.string	"key12"
 644      3200
 645              	.LC44:
 646 0148 206C656E 		.string	" len: %d\n\n"
 646      3A202564 
 646      0A0A00
 647              	.LC45:
 648 0153 6572726F 		.string	"error getting string\n"
 648      72206765 
 648      7474696E 
 648      67207374 
 648      72696E67 
 649              	.LC46:
 650 0169 54455354 		.string	"TEST mcu-msg-wrapper"
 650      206D6375 
 650      2D6D7367 
 650      2D777261 
 650      70706572 
 651              	.LC47:
 652 017e 3D3D3D3D 		.string	"===================="
 652      3D3D3D3D 
 652      3D3D3D3D 
 652      3D3D3D3D 
 652      3D3D3D3D 
 653              	.LC48:
 654 0193 77726170 		.string	"wrapped_msg"
 654      7065645F 
 654      6D736700 
 655              	.LC49:
 656 019f 496E6974 		.string	"Initialized msg: #"
 656      69616C69 
 656      7A656420 
 656      6D73673A 
 656      202300
 657              	.LC50:
 658 01b2 77726170 		.string	"wrapped_obj1"
 658      7065645F 
 658      6F626A31 
 658      00
 659              	.LC51:
 660 01bf 496E6974 		.string	"Initialized obj: @"
 660      69616C69 
 660      7A656420 
 660      6F626A3A 
 660      204000
 661              	.LC52:
 662 01d2 54686973 		.string	"This is \"string 1\""
 662      20697320 
 662      22737472 
GAS LISTING /tmp/ccypY4LQ.s 			page 28


 662      696E6720 
 662      312200
 663              	.LC53:
 664 01e5 73747231 		.string	"str1"
 664      00
 665              	.LC54:
 666 01ea 496E6974 		.string	"Initialized str: $"
 666      69616C69 
 666      7A656420 
 666      7374723A 
 666      202400
 667              	.LC55:
 668 01fd 54686973 		.string	"This is 'string 2'"
 668      20697320 
 668      27737472 
 668      696E6720 
 668      322700
 669              	.LC56:
 670 0210 73747232 		.string	"str2"
 670      00
 671              	.LC57:
 672 0215 2E2E2E2E 		.string	".... \"string 3\""
 672      20227374 
 672      72696E67 
 672      20332200 
 673              	.LC58:
 674 0225 73747233 		.string	"str3"
 674      00
 675              		.section	.rodata.main.str1.8
 676 00e1 00000000 		.align 8
 676      000000
 677              	.LC59:
 678 00e8 41646420 		.string	"Add '$str2', '$str3' to '@wrapped_obj1'...\n"
 678      27247374 
 678      7232272C 
 678      20272473 
 678      74723327 
 679 0114 00000000 		.align 8
 680              	.LC60:
 681 0118 41646420 		.string	"Add '@wrapped_obj1' to '#wrapped_msg'...\n"
 681      27407772 
 681      61707065 
 681      645F6F62 
 681      6A312720 
 682              		.section	.rodata.main.str1.1
 683              	.LC61:
 684 022a 434D445F 		.string	"CMD_WRAP"
 684      57524150 
 684      00
 685              	.LC62:
 686 0233 496E6974 		.string	"Initialized cmd: <"
 686      69616C69 
 686      7A656420 
 686      636D643A 
 686      203C00
 687              	.LC63:
 688 0246 3E0A00   		.string	">\n"
GAS LISTING /tmp/ccypY4LQ.s 			page 29


 689              	.LC64:
 690 0249 434D445F 		.string	"CMD_REMOVEABLE"
 690      52454D4F 
 690      56454142 
 690      4C4500
 691              	.LC65:
 692 0258 693100   		.string	"i1"
 693              	.LC66:
 694 025b 496E6974 		.string	"Initialized int: $"
 694      69616C69 
 694      7A656420 
 694      696E743A 
 694      202400
 695              	.LC67:
 696 026e 3D25640A 		.string	"=%d\n\n"
 696      0A00
 697              	.LC68:
 698 0274 693200   		.string	"i2"
 699              	.LC69:
 700 0277 663100   		.string	"f1"
 701              	.LC71:
 702 027a 496E6974 		.string	"Initialized float: $"
 702      69616C69 
 702      7A656420 
 702      666C6F61 
 702      743A2024 
 703              	.LC72:
 704 028f 3D252E36 		.string	"=%.6f\n\n"
 704      660A0A00 
 705              	.LC73:
 706 0297 663200   		.string	"f2"
 707              	.LC75:
 708 029a 77726170 		.string	"wrapped_obj2"
 708      7065645F 
 708      6F626A32 
 708      00
 709              		.section	.rodata.main.str1.8
 710 0142 00000000 		.align 8
 710      0000
 711              	.LC76:
 712 0148 41646420 		.string	"Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n"
 712      27246931 
 712      272C2027 
 712      24693227 
 712      2C202724 
 713 0187 00       		.align 8
 714              	.LC77:
 715 0188 41646420 		.string	"Add '<CMD_WRAP>' to '#wrapped_msg'...\n"
 715      273C434D 
 715      445F5752 
 715      41503E27 
 715      20746F20 
 716 01af 00       		.align 8
 717              	.LC78:
 718 01b0 41646420 		.string	"Add '@wrapped_obj2' to '#wrapped_msg'...\n"
 718      27407772 
 718      61707065 
GAS LISTING /tmp/ccypY4LQ.s 			page 30


 718      645F6F62 
 718      6A322720 
 719 01da 00000000 		.align 8
 719      0000
 720              	.LC79:
 721 01e0 41646420 		.string	"Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n"
 721      273C434D 
 721      445F5245 
 721      4D4F5641 
 721      424C453E 
 722 020c 00000000 		.align 8
 723              	.LC80:
 724 0210 52656D6F 		.string	"Removing $str2 from @wrapped_obj1...\n"
 724      76696E67 
 724      20247374 
 724      72322066 
 724      726F6D20 
 725 0236 0000     		.align 8
 726              	.LC81:
 727 0238 52656D6F 		.string	"Removing $str1 from @wrapped_obj2...\n"
 727      76696E67 
 727      20247374 
 727      72312066 
 727      726F6D20 
 728 025e 0000     		.align 8
 729              	.LC82:
 730 0260 52656D6F 		.string	"Removing $f1 from @wrapped_obj2...\n"
 730      76696E67 
 730      20246631 
 730      2066726F 
 730      6D204077 
 731 0284 00000000 		.align 8
 732              	.LC83:
 733 0288 52656D6F 		.string	"Removing $i2 from @wrapped_obj2...\n"
 733      76696E67 
 733      20246932 
 733      2066726F 
 733      6D204077 
 734 02ac 00000000 		.align 8
 735              	.LC84:
 736 02b0 52656D6F 		.string	"Removing @wrapped_obj1 from #wrapped_msg...\n"
 736      76696E67 
 736      20407772 
 736      61707065 
 736      645F6F62 
 737 02dd 000000   		.align 8
 738              	.LC85:
 739 02e0 52656D6F 		.string	"Removing <CMD_REMOVABLE> from #wrapped_msg...\n"
 739      76696E67 
 739      203C434D 
 739      445F5245 
 739      4D4F5641 
 740 030f 00       		.align 8
 741              	.LC86:
 742 0310 41646420 		.string	"Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n"
 742      27407772 
 742      61707065 
GAS LISTING /tmp/ccypY4LQ.s 			page 31


 742      645F6F62 
 742      6A312720 
 743              		.section	.rodata.main.str1.1
 744              	.LC87:
 745 02a7 57726170 		.string	"Wrapped message:"
 745      70656420 
 745      6D657373 
 745      6167653A 
 745      00
 746              	.LC88:
 747 02b8 2D2D2D2D 		.string	"---------------\n"
 747      2D2D2D2D 
 747      2D2D2D2D 
 747      2D2D2D0A 
 747      00
 748              	.LC89:
 749 02c9 57726170 		.string	"Wrapped message buffered"
 749      70656420 
 749      6D657373 
 749      61676520 
 749      62756666 
 750              		.section	.rodata.main.str1.8
 751              		.align 8
 752              	.LC90:
 753 0340 57726170 		.string	"Wrapped message (buffered again)"
 753      70656420 
 753      6D657373 
 753      61676520 
 753      28627566 
 754              		.section	.rodata.main.str1.1
 755              	.LC91:
 756 02e2 42756666 		.string	"Buffer content:"
 756      65722063 
 756      6F6E7465 
 756      6E743A00 
 757              		.section	.rodata.main.str1.8
 758 0361 00000000 		.align 8
 758      000000
 759              	.LC92:
 760 0368 52657061 		.string	"Reparsing '#wrapped_msg' '@wrapped_obj2'...\n"
 760      7273696E 
 760      67202723 
 760      77726170 
 760      7065645F 
 761              		.section	.rodata.main.str1.1
 762              	.LC93:
 763 02f2 72657061 		.string	"reparsed $i = %d $f2 = %f\n\n"
 763      72736564 
 763      20246920 
 763      3D202564 
 763      20246632 
 764              		.section	.rodata.main.str1.8
 765 0395 000000   		.align 8
 766              	.LC94:
 767 0398 456D756C 		.string	"Emulating a master - slave communaication:\n"
 767      6174696E 
 767      67206120 
GAS LISTING /tmp/ccypY4LQ.s 			page 32


 767      6D617374 
 767      6572202D 
 768              		.section	.rodata.main.str1.1
 769              	.LC96:
 770 030e 45786563 		.string	"Execution time: %f s\n"
 770      7574696F 
 770      6E207469 
 770      6D653A20 
 770      25662073 
 771              		.section	.text.main,"ax",@progbits
 772              		.globl	main
 774              	main:
 775              	.LFB68:
  44:src/main.c    **** {
 776              		.loc 1 44 0
 777              		.cfi_startproc
 778 0000 4157     		pushq	%r15
 779              	.LCFI54:
 780              		.cfi_def_cfa_offset 16
 781              		.cfi_offset 15, -16
 782 0002 4156     		pushq	%r14
 783              	.LCFI55:
 784              		.cfi_def_cfa_offset 24
 785              		.cfi_offset 14, -24
 786 0004 4155     		pushq	%r13
 787              	.LCFI56:
 788              		.cfi_def_cfa_offset 32
 789              		.cfi_offset 13, -32
 790 0006 4154     		pushq	%r12
 791              	.LCFI57:
 792              		.cfi_def_cfa_offset 40
 793              		.cfi_offset 12, -40
 794 0008 55       		pushq	%rbp
 795              	.LCFI58:
 796              		.cfi_def_cfa_offset 48
 797              		.cfi_offset 6, -48
 798 0009 53       		pushq	%rbx
 799              	.LCFI59:
 800              		.cfi_def_cfa_offset 56
 801              		.cfi_offset 3, -56
 802 000a 4881EC38 		subq	$1848, %rsp
 802      070000
 803              	.LCFI60:
 804              		.cfi_def_cfa_offset 1904
  44:src/main.c    **** {
 805              		.loc 1 44 0
 806 0011 64488B04 		movq	%fs:40, %rax
 806      25280000 
 806      00
 807 001a 48898424 		movq	%rax, 1832(%rsp)
 807      28070000 
 808 0022 31C0     		xorl	%eax, %eax
  46:src/main.c    ****     clock_t begin = clock();
 809              		.loc 1 46 0
 810 0024 E8000000 		call	clock@PLT
 810      00
 811              	.LVL57:
GAS LISTING /tmp/ccypY4LQ.s 			page 33


 812 0029 48894424 		movq	%rax, 24(%rsp)
 812      18
 813              	.LVL58:
  58:src/main.c    ****     msg_hnd_t hnd = msg_hnd_create(putchar);
 814              		.loc 1 58 0
 815 002e 488DBC24 		leaq	752(%rsp), %rdi
 815      F0020000 
 816 0036 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 816      000000
 817 003d E8000000 		call	msg_hnd_create@PLT
 817      00
 818              	.LVL59:
 819              	.LBB202:
 820              	.LBB203:
 821              		.loc 2 104 0
 822 0042 488D3D00 		leaq	.LC14(%rip), %rdi
 822      000000
 823 0049 E8000000 		call	puts@PLT
 823      00
 824              	.LVL60:
 825              	.LBE203:
 826              	.LBE202:
 827              	.LBB204:
 828              	.LBB205:
 829 004e 488D3D00 		leaq	.LC15(%rip), %rdi
 829      000000
 830 0055 E8000000 		call	puts@PLT
 830      00
 831              	.LVL61:
 832              	.LBE205:
 833              	.LBE204:
 834              	.LBB206:
 835              	.LBB207:
 836 005a 488D1500 		leaq	test_str1(%rip), %rdx
 836      000000
 837 0061 488D3500 		leaq	.LC16(%rip), %rsi
 837      000000
 838 0068 BF010000 		movl	$1, %edi
 838      00
 839 006d B8000000 		movl	$0, %eax
 839      00
 840 0072 E8000000 		call	__printf_chk@PLT
 840      00
 841              	.LVL62:
 842              	.LBE207:
 843              	.LBE206:
 844              	.LBB208:
 845              	.LBB209:
 846 0077 488D3D00 		leaq	.LC17(%rip), %rdi
 846      000000
 847 007e E8000000 		call	puts@PLT
 847      00
 848              	.LVL63:
 849              	.LBE209:
 850              	.LBE208:
  67:src/main.c    ****     msg = msg_get(test_str1, "test_msg", sizeof(test_str1));
 851              		.loc 1 67 0
GAS LISTING /tmp/ccypY4LQ.s 			page 34


 852 0083 488DBC24 		leaq	192(%rsp), %rdi
 852      C0000000 
 853 008b B9AA0000 		movl	$170, %ecx
 853      00
 854 0090 488D1500 		leaq	.LC18(%rip), %rdx
 854      000000
 855 0097 488D3500 		leaq	test_str1(%rip), %rsi
 855      000000
 856 009e E8000000 		call	msg_get@PLT
 856      00
 857              	.LVL64:
  68:src/main.c    ****     if(msg.content.s != NULL) {
 858              		.loc 1 68 0
 859 00a3 4883BC24 		cmpq	$0, 208(%rsp)
 859      D0000000 
 859      00
 860 00ac 0F84900F 		je	.L20
 860      0000
  69:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
 861              		.loc 1 69 0
 862 00b2 0FB78C24 		movzwl	216(%rsp), %ecx
 862      D8000000 
 863 00ba 0FB79424 		movzwl	200(%rsp), %edx
 863      C8000000 
 864              	.LVL65:
 865              	.LBB210:
 866              	.LBB211:
 867              		.loc 2 104 0
 868 00c2 488D3500 		leaq	.LC19(%rip), %rsi
 868      000000
 869 00c9 BF010000 		movl	$1, %edi
 869      00
 870 00ce B8000000 		movl	$0, %eax
 870      00
 871 00d3 E8000000 		call	__printf_chk@PLT
 871      00
 872              	.LVL66:
 873              	.LBE211:
 874              	.LBE210:
  70:src/main.c    ****         hnd.print_str(msg.id);
 875              		.loc 1 70 0
 876 00d8 488B9C24 		movq	768(%rsp), %rbx
 876      00030000 
 877 00e0 488BBC24 		movq	192(%rsp), %rdi
 877      C0000000 
 878 00e8 488BB424 		movq	200(%rsp), %rsi
 878      C8000000 
 879 00f0 FFD3     		call	*%rbx
 880              	.LVL67:
 881              	.LBB212:
 882              	.LBB213:
 883              		.loc 2 104 0
 884 00f2 BF3A0000 		movl	$58, %edi
 884      00
 885 00f7 E8000000 		call	putchar@PLT
 885      00
 886              	.LVL68:
GAS LISTING /tmp/ccypY4LQ.s 			page 35


 887              	.LBE213:
 888              	.LBE212:
  72:src/main.c    ****         hnd.print_str(msg.content);
 889              		.loc 1 72 0
 890 00fc 488BBC24 		movq	208(%rsp), %rdi
 890      D0000000 
 891 0104 488BB424 		movq	216(%rsp), %rsi
 891      D8000000 
 892 010c FFD3     		call	*%rbx
 893              	.LVL69:
 894              	.LBB214:
 895              	.LBB215:
 896              		.loc 2 104 0
 897 010e 488D3D00 		leaq	.LC20(%rip), %rdi
 897      000000
 898 0115 E8000000 		call	puts@PLT
 898      00
 899              	.LVL70:
 900              	.L21:
 901              	.LBE215:
 902              	.LBE214:
 903              	.LBB216:
 904              	.LBB217:
 905 011a 488D3D00 		leaq	.LC22(%rip), %rdi
 905      000000
 906 0121 E8000000 		call	puts@PLT
 906      00
 907              	.LVL71:
 908              	.LBE217:
 909              	.LBE216:
  80:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
 910              		.loc 1 80 0
 911 0126 FFB424D8 		pushq	216(%rsp)
 911      000000
 912              	.LCFI61:
 913              		.cfi_def_cfa_offset 1912
 914 012d FFB424D8 		pushq	216(%rsp)
 914      000000
 915              	.LCFI62:
 916              		.cfi_def_cfa_offset 1920
 917 0134 FFB424D8 		pushq	216(%rsp)
 917      000000
 918              	.LCFI63:
 919              		.cfi_def_cfa_offset 1928
 920 013b FFB424D8 		pushq	216(%rsp)
 920      000000
 921              	.LCFI64:
 922              		.cfi_def_cfa_offset 1936
 923 0142 488D3D00 		leaq	.LC23(%rip), %rdi
 923      000000
 924 0149 E8000000 		call	msg_parser_get_cmd@PLT
 924      00
 925              	.LVL72:
  81:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 926              		.loc 1 81 0
 927 014e 4883C420 		addq	$32, %rsp
 928              	.LCFI65:
GAS LISTING /tmp/ccypY4LQ.s 			page 36


 929              		.cfi_def_cfa_offset 1904
 930              	.LVL73:
 931 0152 4885C0   		testq	%rax, %rax
 932 0155 0F84F80E 		je	.L29
 932      0000
 933 015b 488D1500 		leaq	.LC12(%rip), %rdx
 933      000000
 934              	.L22:
 935              	.LVL74:
 936              	.LBB218:
 937              	.LBB219:
 938              		.loc 2 104 0 discriminator 4
 939 0162 488D3500 		leaq	.LC24(%rip), %rsi
 939      000000
 940 0169 BF010000 		movl	$1, %edi
 940      00
 941 016e B8000000 		movl	$0, %eax
 941      00
 942 0173 E8000000 		call	__printf_chk@PLT
 942      00
 943              	.LVL75:
 944              	.LBE219:
 945              	.LBE218:
 946              	.LBB220:
 947              	.LBB221:
 948 0178 488D3D00 		leaq	.LC25(%rip), %rdi
 948      000000
 949 017f E8000000 		call	puts@PLT
 949      00
 950              	.LVL76:
 951              	.LBE221:
 952              	.LBE220:
  84:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
 953              		.loc 1 84 0 discriminator 4
 954 0184 FFB424D8 		pushq	216(%rsp)
 954      000000
 955              	.LCFI66:
 956              		.cfi_def_cfa_offset 1912
 957 018b FFB424D8 		pushq	216(%rsp)
 957      000000
 958              	.LCFI67:
 959              		.cfi_def_cfa_offset 1920
 960 0192 FFB424D8 		pushq	216(%rsp)
 960      000000
 961              	.LCFI68:
 962              		.cfi_def_cfa_offset 1928
 963 0199 FFB424D8 		pushq	216(%rsp)
 963      000000
 964              	.LCFI69:
 965              		.cfi_def_cfa_offset 1936
 966 01a0 488D3D00 		leaq	.LC26(%rip), %rdi
 966      000000
 967 01a7 E8000000 		call	msg_parser_get_cmd@PLT
 967      00
 968              	.LVL77:
  85:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 969              		.loc 1 85 0 discriminator 4
GAS LISTING /tmp/ccypY4LQ.s 			page 37


 970 01ac 4883C420 		addq	$32, %rsp
 971              	.LCFI70:
 972              		.cfi_def_cfa_offset 1904
 973 01b0 4885C0   		testq	%rax, %rax
 974 01b3 0F84A60E 		je	.L30
 974      0000
  85:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 975              		.loc 1 85 0 is_stmt 0
 976 01b9 488D1500 		leaq	.LC12(%rip), %rdx
 976      000000
 977              	.L23:
 978              	.LVL78:
 979              	.LBB222:
 980              	.LBB223:
 981              		.loc 2 104 0 is_stmt 1 discriminator 4
 982 01c0 488D3500 		leaq	.LC24(%rip), %rsi
 982      000000
 983 01c7 BF010000 		movl	$1, %edi
 983      00
 984 01cc B8000000 		movl	$0, %eax
 984      00
 985 01d1 E8000000 		call	__printf_chk@PLT
 985      00
 986              	.LVL79:
 987              	.LBE223:
 988              	.LBE222:
 989              	.LBB224:
 990              	.LBB225:
 991 01d6 488D3D00 		leaq	.LC27(%rip), %rdi
 991      000000
 992 01dd E8000000 		call	puts@PLT
 992      00
 993              	.LVL80:
 994              	.LBE225:
 995              	.LBE224:
  88:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
 996              		.loc 1 88 0 discriminator 4
 997 01e2 FFB424D8 		pushq	216(%rsp)
 997      000000
 998              	.LCFI71:
 999              		.cfi_def_cfa_offset 1912
 1000 01e9 FFB424D8 		pushq	216(%rsp)
 1000      000000
 1001              	.LCFI72:
 1002              		.cfi_def_cfa_offset 1920
 1003 01f0 FFB424D8 		pushq	216(%rsp)
 1003      000000
 1004              	.LCFI73:
 1005              		.cfi_def_cfa_offset 1928
 1006 01f7 FFB424D8 		pushq	216(%rsp)
 1006      000000
 1007              	.LCFI74:
 1008              		.cfi_def_cfa_offset 1936
 1009 01fe 488D3D00 		leaq	.LC28(%rip), %rdi
 1009      000000
 1010 0205 E8000000 		call	msg_parser_get_cmd@PLT
 1010      00
GAS LISTING /tmp/ccypY4LQ.s 			page 38


 1011              	.LVL81:
  89:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 1012              		.loc 1 89 0 discriminator 4
 1013 020a 4883C420 		addq	$32, %rsp
 1014              	.LCFI75:
 1015              		.cfi_def_cfa_offset 1904
 1016 020e 4885C0   		testq	%rax, %rax
 1017 0211 0F84540E 		je	.L31
 1017      0000
  89:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 1018              		.loc 1 89 0 is_stmt 0
 1019 0217 488D1500 		leaq	.LC12(%rip), %rdx
 1019      000000
 1020              	.L24:
 1021              	.LVL82:
 1022              	.LBB226:
 1023              	.LBB227:
 1024              		.loc 2 104 0 is_stmt 1 discriminator 4
 1025 021e 488D3500 		leaq	.LC24(%rip), %rsi
 1025      000000
 1026 0225 BF010000 		movl	$1, %edi
 1026      00
 1027 022a B8000000 		movl	$0, %eax
 1027      00
 1028 022f E8000000 		call	__printf_chk@PLT
 1028      00
 1029              	.LVL83:
 1030              	.LBE227:
 1031              	.LBE226:
 1032              	.LBB228:
 1033              	.LBB229:
 1034 0234 488D3D00 		leaq	.LC29(%rip), %rdi
 1034      000000
 1035 023b E8000000 		call	puts@PLT
 1035      00
 1036              	.LVL84:
 1037              	.LBE229:
 1038              	.LBE228:
  93:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
 1039              		.loc 1 93 0 discriminator 4
 1040 0240 488DBC24 		leaq	224(%rsp), %rdi
 1040      E0000000 
 1041 0248 FFB424D8 		pushq	216(%rsp)
 1041      000000
 1042              	.LCFI76:
 1043              		.cfi_def_cfa_offset 1912
 1044 024f FFB424D8 		pushq	216(%rsp)
 1044      000000
 1045              	.LCFI77:
 1046              		.cfi_def_cfa_offset 1920
 1047 0256 FFB424D8 		pushq	216(%rsp)
 1047      000000
 1048              	.LCFI78:
 1049              		.cfi_def_cfa_offset 1928
 1050 025d FFB424D8 		pushq	216(%rsp)
 1050      000000
 1051              	.LCFI79:
GAS LISTING /tmp/ccypY4LQ.s 			page 39


 1052              		.cfi_def_cfa_offset 1936
 1053 0264 488D3500 		leaq	.LC30(%rip), %rsi
 1053      000000
 1054 026b E8000000 		call	msg_parser_get_obj@PLT
 1054      00
 1055              	.LVL85:
  94:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
 1056              		.loc 1 94 0 discriminator 4
 1057 0270 0FB78C24 		movzwl	280(%rsp), %ecx
 1057      18010000 
 1058 0278 0FB79424 		movzwl	264(%rsp), %edx
 1058      08010000 
 1059              	.LVL86:
 1060              	.LBB230:
 1061              	.LBB231:
 1062              		.loc 2 104 0 discriminator 4
 1063 0280 4883C420 		addq	$32, %rsp
 1064              	.LCFI80:
 1065              		.cfi_def_cfa_offset 1904
 1066 0284 488D3500 		leaq	.LC31(%rip), %rsi
 1066      000000
 1067 028b BF010000 		movl	$1, %edi
 1067      00
 1068 0290 B8000000 		movl	$0, %eax
 1068      00
 1069 0295 E8000000 		call	__printf_chk@PLT
 1069      00
 1070              	.LVL87:
 1071              	.LBE231:
 1072              	.LBE230:
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
 1073              		.loc 1 95 0 discriminator 4
 1074 029a 488B9C24 		movq	768(%rsp), %rbx
 1074      00030000 
 1075 02a2 488BBC24 		movq	224(%rsp), %rdi
 1075      E0000000 
 1076 02aa 488BB424 		movq	232(%rsp), %rsi
 1076      E8000000 
 1077 02b2 FFD3     		call	*%rbx
 1078              	.LVL88:
 1079              	.LBB232:
 1080              	.LBB233:
 1081              		.loc 2 104 0 discriminator 4
 1082 02b4 BF3A0000 		movl	$58, %edi
 1082      00
 1083 02b9 E8000000 		call	putchar@PLT
 1083      00
 1084              	.LVL89:
 1085              	.LBE233:
 1086              	.LBE232:
  95:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
 1087              		.loc 1 95 0 discriminator 4
 1088 02be 488BBC24 		movq	240(%rsp), %rdi
 1088      F0000000 
 1089 02c6 488BB424 		movq	248(%rsp), %rsi
 1089      F8000000 
 1090 02ce FFD3     		call	*%rbx
GAS LISTING /tmp/ccypY4LQ.s 			page 40


 1091              	.LVL90:
 1092              	.LBB234:
 1093              	.LBB235:
 1094              		.loc 2 104 0 discriminator 4
 1095 02d0 488D3D00 		leaq	.LC20(%rip), %rdi
 1095      000000
 1096 02d7 E8000000 		call	puts@PLT
 1096      00
 1097              	.LVL91:
 1098              	.LBE235:
 1099              	.LBE234:
 1100              	.LBB236:
 1101              	.LBB237:
 1102 02dc 488D3D00 		leaq	.LC32(%rip), %rdi
 1102      000000
 1103 02e3 E8000000 		call	puts@PLT
 1103      00
 1104              	.LVL92:
 1105              	.LBE237:
 1106              	.LBE236:
 100:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 1107              		.loc 1 100 0 discriminator 4
 1108 02e8 488DBC24 		leaq	256(%rsp), %rdi
 1108      00010000 
 1109 02f0 FFB424D8 		pushq	216(%rsp)
 1109      000000
 1110              	.LCFI81:
 1111              		.cfi_def_cfa_offset 1912
 1112 02f7 FFB424D8 		pushq	216(%rsp)
 1112      000000
 1113              	.LCFI82:
 1114              		.cfi_def_cfa_offset 1920
 1115 02fe FFB424D8 		pushq	216(%rsp)
 1115      000000
 1116              	.LCFI83:
 1117              		.cfi_def_cfa_offset 1928
 1118 0305 FFB424D8 		pushq	216(%rsp)
 1118      000000
 1119              	.LCFI84:
 1120              		.cfi_def_cfa_offset 1936
 1121 030c 488D3500 		leaq	.LC33(%rip), %rsi
 1121      000000
 1122 0313 E8000000 		call	msg_parser_get_obj@PLT
 1122      00
 1123              	.LVL93:
 101:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 1124              		.loc 1 101 0 discriminator 4
 1125 0318 0FB78C24 		movzwl	312(%rsp), %ecx
 1125      38010000 
 1126 0320 0FB79424 		movzwl	296(%rsp), %edx
 1126      28010000 
 1127              	.LVL94:
 1128              	.LBB238:
 1129              	.LBB239:
 1130              		.loc 2 104 0 discriminator 4
 1131 0328 4883C420 		addq	$32, %rsp
 1132              	.LCFI85:
GAS LISTING /tmp/ccypY4LQ.s 			page 41


 1133              		.cfi_def_cfa_offset 1904
 1134 032c 488D3500 		leaq	.LC34(%rip), %rsi
 1134      000000
 1135 0333 BF010000 		movl	$1, %edi
 1135      00
 1136 0338 B8000000 		movl	$0, %eax
 1136      00
 1137 033d E8000000 		call	__printf_chk@PLT
 1137      00
 1138              	.LVL95:
 1139              	.LBE239:
 1140              	.LBE238:
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 1141              		.loc 1 102 0 discriminator 4
 1142 0342 488BBC24 		movq	256(%rsp), %rdi
 1142      00010000 
 1143 034a 488BB424 		movq	264(%rsp), %rsi
 1143      08010000 
 1144 0352 FFD3     		call	*%rbx
 1145              	.LVL96:
 1146              	.LBB240:
 1147              	.LBB241:
 1148              		.loc 2 104 0 discriminator 4
 1149 0354 BF3A0000 		movl	$58, %edi
 1149      00
 1150 0359 E8000000 		call	putchar@PLT
 1150      00
 1151              	.LVL97:
 1152              	.LBE241:
 1153              	.LBE240:
 102:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 1154              		.loc 1 102 0 discriminator 4
 1155 035e 488BBC24 		movq	272(%rsp), %rdi
 1155      10010000 
 1156 0366 488BB424 		movq	280(%rsp), %rsi
 1156      18010000 
 1157 036e FFD3     		call	*%rbx
 1158              	.LVL98:
 1159              	.LBB242:
 1160              	.LBB243:
 1161              		.loc 2 104 0 discriminator 4
 1162 0370 488D3D00 		leaq	.LC20(%rip), %rdi
 1162      000000
 1163 0377 E8000000 		call	puts@PLT
 1163      00
 1164              	.LVL99:
 1165              	.LBE243:
 1166              	.LBE242:
 1167              	.LBB244:
 1168              	.LBB245:
 1169 037c 488D3D00 		leaq	.LC35(%rip), %rdi
 1169      000000
 1170 0383 E8000000 		call	puts@PLT
 1170      00
 1171              	.LVL100:
 1172              	.LBE245:
 1173              	.LBE244:
GAS LISTING /tmp/ccypY4LQ.s 			page 42


 107:src/main.c    ****     int ival = 0, res;
 1174              		.loc 1 107 0 discriminator 4
 1175 0388 C7442470 		movl	$0, 112(%rsp)
 1175      00000000 
 108:src/main.c    ****     float fval = 0.0;
 1176              		.loc 1 108 0 discriminator 4
 1177 0390 C7442474 		movl	$0x00000000, 116(%rsp)
 1177      00000000 
 109:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 1178              		.loc 1 109 0 discriminator 4
 1179 0398 488D7C24 		leaq	112(%rsp), %rdi
 1179      70
 1180 039d FFB424F8 		pushq	248(%rsp)
 1180      000000
 1181              	.LCFI86:
 1182              		.cfi_def_cfa_offset 1912
 1183 03a4 FFB424F8 		pushq	248(%rsp)
 1183      000000
 1184              	.LCFI87:
 1185              		.cfi_def_cfa_offset 1920
 1186 03ab FFB424F8 		pushq	248(%rsp)
 1186      000000
 1187              	.LCFI88:
 1188              		.cfi_def_cfa_offset 1928
 1189 03b2 FFB424F8 		pushq	248(%rsp)
 1189      000000
 1190              	.LCFI89:
 1191              		.cfi_def_cfa_offset 1936
 1192 03b9 488D3500 		leaq	.LC37(%rip), %rsi
 1192      000000
 1193 03c0 E8000000 		call	msg_parser_get_int@PLT
 1193      00
 1194              	.LVL101:
 1195 03c5 0FBED0   		movsbl	%al, %edx
 1196              	.LVL102:
 1197              	.LBB246:
 1198              	.LBB247:
 1199              		.loc 2 104 0 discriminator 4
 1200 03c8 4883C420 		addq	$32, %rsp
 1201              	.LCFI90:
 1202              		.cfi_def_cfa_offset 1904
 1203 03cc 8B4C2470 		movl	112(%rsp), %ecx
 1204 03d0 488D3500 		leaq	.LC38(%rip), %rsi
 1204      000000
 1205 03d7 BF010000 		movl	$1, %edi
 1205      00
 1206 03dc B8000000 		movl	$0, %eax
 1206      00
 1207 03e1 E8000000 		call	__printf_chk@PLT
 1207      00
 1208              	.LVL103:
 1209              	.LBE247:
 1210              	.LBE246:
 1211              	.LBB248:
 1212              	.LBB249:
 1213 03e6 488D3D00 		leaq	.LC39(%rip), %rdi
 1213      000000
GAS LISTING /tmp/ccypY4LQ.s 			page 43


 1214 03ed E8000000 		call	puts@PLT
 1214      00
 1215              	.LVL104:
 1216              	.LBE249:
 1217              	.LBE248:
 114:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 1218              		.loc 1 114 0 discriminator 4
 1219 03f2 488D7C24 		leaq	116(%rsp), %rdi
 1219      74
 1220 03f7 FFB42418 		pushq	280(%rsp)
 1220      010000
 1221              	.LCFI91:
 1222              		.cfi_def_cfa_offset 1912
 1223 03fe FFB42418 		pushq	280(%rsp)
 1223      010000
 1224              	.LCFI92:
 1225              		.cfi_def_cfa_offset 1920
 1226 0405 FFB42418 		pushq	280(%rsp)
 1226      010000
 1227              	.LCFI93:
 1228              		.cfi_def_cfa_offset 1928
 1229 040c FFB42418 		pushq	280(%rsp)
 1229      010000
 1230              	.LCFI94:
 1231              		.cfi_def_cfa_offset 1936
 1232 0413 488D3500 		leaq	.LC40(%rip), %rsi
 1232      000000
 1233 041a E8000000 		call	msg_parser_get_float@PLT
 1233      00
 1234              	.LVL105:
 1235 041f 0FBED0   		movsbl	%al, %edx
 1236              	.LVL106:
 115:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 1237              		.loc 1 115 0 discriminator 4
 1238 0422 660FEFC0 		pxor	%xmm0, %xmm0
 1239 0426 F30F5A84 		cvtss2sd	148(%rsp), %xmm0
 1239      24940000 
 1239      00
 1240              	.LVL107:
 1241              	.LBB250:
 1242              	.LBB251:
 1243              		.loc 2 104 0 discriminator 4
 1244 042f 4883C420 		addq	$32, %rsp
 1245              	.LCFI95:
 1246              		.cfi_def_cfa_offset 1904
 1247 0433 488D3500 		leaq	.LC41(%rip), %rsi
 1247      000000
 1248 043a BF010000 		movl	$1, %edi
 1248      00
 1249 043f B8010000 		movl	$1, %eax
 1249      00
 1250 0444 E8000000 		call	__printf_chk@PLT
 1250      00
 1251              	.LVL108:
 1252              	.LBE251:
 1253              	.LBE250:
 1254              	.LBB252:
GAS LISTING /tmp/ccypY4LQ.s 			page 44


 1255              	.LBB253:
 1256 0449 488D3D00 		leaq	.LC42(%rip), %rdi
 1256      000000
 1257 0450 E8000000 		call	puts@PLT
 1257      00
 1258              	.LVL109:
 1259              	.LBE253:
 1260              	.LBE252:
 119:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 1261              		.loc 1 119 0 discriminator 4
 1262 0455 FFB424F8 		pushq	248(%rsp)
 1262      000000
 1263              	.LCFI96:
 1264              		.cfi_def_cfa_offset 1912
 1265 045c FFB424F8 		pushq	248(%rsp)
 1265      000000
 1266              	.LCFI97:
 1267              		.cfi_def_cfa_offset 1920
 1268 0463 FFB424F8 		pushq	248(%rsp)
 1268      000000
 1269              	.LCFI98:
 1270              		.cfi_def_cfa_offset 1928
 1271 046a FFB424F8 		pushq	248(%rsp)
 1271      000000
 1272              	.LCFI99:
 1273              		.cfi_def_cfa_offset 1936
 1274 0471 488D3D00 		leaq	.LC43(%rip), %rdi
 1274      000000
 1275 0478 E8000000 		call	msg_parser_get_string@PLT
 1275      00
 1276              	.LVL110:
 1277 047d 4889D5   		movq	%rdx, %rbp
 1278              	.LVL111:
 120:src/main.c    ****     if(str.s != NULL) {
 1279              		.loc 1 120 0 discriminator 4
 1280 0480 4883C420 		addq	$32, %rsp
 1281              	.LCFI100:
 1282              		.cfi_def_cfa_offset 1904
 1283 0484 4885C0   		testq	%rax, %rax
 1284 0487 0F84EA0B 		je	.L25
 1284      0000
 121:src/main.c    ****         hnd.print_str(str); printf(" len: %d\n\n", str.len);
 1285              		.loc 1 121 0
 1286 048d 4889C7   		movq	%rax, %rdi
 1287              	.LVL112:
 1288 0490 4889D6   		movq	%rdx, %rsi
 1289 0493 FFD3     		call	*%rbx
 1290              	.LVL113:
 1291 0495 0FB7D5   		movzwl	%bp, %edx
 1292              	.LVL114:
 1293              	.LBB254:
 1294              	.LBB255:
 1295              		.loc 2 104 0
 1296 0498 488D3500 		leaq	.LC44(%rip), %rsi
 1296      000000
 1297 049f BF010000 		movl	$1, %edi
 1297      00
GAS LISTING /tmp/ccypY4LQ.s 			page 45


 1298 04a4 B8000000 		movl	$0, %eax
 1298      00
 1299 04a9 E8000000 		call	__printf_chk@PLT
 1299      00
 1300              	.LVL115:
 1301              	.L26:
 1302              	.LBE255:
 1303              	.LBE254:
 1304              	.LBB256:
 1305              	.LBB257:
 1306 04ae 488D3D00 		leaq	.LC46(%rip), %rdi
 1306      000000
 1307 04b5 E8000000 		call	puts@PLT
 1307      00
 1308              	.LVL116:
 1309              	.LBE257:
 1310              	.LBE256:
 1311              	.LBB258:
 1312              	.LBB259:
 1313 04ba 488D3D00 		leaq	.LC47(%rip), %rdi
 1313      000000
 1314 04c1 E8000000 		call	puts@PLT
 1314      00
 1315              	.LVL117:
 1316              	.LBE259:
 1317              	.LBE258:
 149:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 1318              		.loc 1 149 0
 1319 04c6 488D7C24 		leaq	80(%rsp), %rdi
 1319      50
 1320 04cb 488D3500 		leaq	.LC48(%rip), %rsi
 1320      000000
 1321 04d2 E8000000 		call	msg_wrapper_init_msg@PLT
 1321      00
 1322              	.LVL118:
 1323 04d7 488B4424 		movq	80(%rsp), %rax
 1323      50
 1324 04dc 488B5424 		movq	88(%rsp), %rdx
 1324      58
 1325 04e1 48898424 		movq	%rax, 288(%rsp)
 1325      20010000 
 1326 04e9 48899424 		movq	%rdx, 296(%rsp)
 1326      28010000 
 1327 04f1 488B4424 		movq	96(%rsp), %rax
 1327      60
 1328 04f6 488B5424 		movq	104(%rsp), %rdx
 1328      68
 1329 04fb 48898424 		movq	%rax, 304(%rsp)
 1329      30010000 
 1330 0503 48899424 		movq	%rdx, 312(%rsp)
 1330      38010000 
 1331              	.LVL119:
 1332              	.LBB260:
 1333              	.LBB261:
 1334              		.loc 2 104 0
 1335 050b 488D3500 		leaq	.LC49(%rip), %rsi
 1335      000000
GAS LISTING /tmp/ccypY4LQ.s 			page 46


 1336 0512 BF010000 		movl	$1, %edi
 1336      00
 1337 0517 B8000000 		movl	$0, %eax
 1337      00
 1338 051c E8000000 		call	__printf_chk@PLT
 1338      00
 1339              	.LVL120:
 1340              	.LBE261:
 1341              	.LBE260:
 150:src/main.c    ****     printf("Initialized msg: #"); hnd.print_str(msg_wrap.id); printf("\n\n");
 1342              		.loc 1 150 0
 1343 0521 488B9C24 		movq	768(%rsp), %rbx
 1343      00030000 
 1344 0529 488BBC24 		movq	288(%rsp), %rdi
 1344      20010000 
 1345 0531 488BB424 		movq	296(%rsp), %rsi
 1345      28010000 
 1346 0539 FFD3     		call	*%rbx
 1347              	.LVL121:
 1348              	.LBB262:
 1349              	.LBB263:
 1350              		.loc 2 104 0
 1351 053b 488D3D00 		leaq	.LC20(%rip), %rdi
 1351      000000
 1352 0542 E8000000 		call	puts@PLT
 1352      00
 1353              	.LVL122:
 1354              	.LBE263:
 1355              	.LBE262:
 152:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 1356              		.loc 1 152 0
 1357 0547 488D6C24 		leaq	32(%rsp), %rbp
 1357      20
 1358 054c 488D3500 		leaq	.LC50(%rip), %rsi
 1358      000000
 1359 0553 4889EF   		movq	%rbp, %rdi
 1360 0556 E8000000 		call	msg_wrapper_init_obj@PLT
 1360      00
 1361              	.LVL123:
 1362 055b 488B4424 		movq	32(%rsp), %rax
 1362      20
 1363 0560 488B5424 		movq	40(%rsp), %rdx
 1363      28
 1364 0565 48898424 		movq	%rax, 656(%rsp)
 1364      90020000 
 1365 056d 48899424 		movq	%rdx, 664(%rsp)
 1365      98020000 
 1366 0575 488B4424 		movq	48(%rsp), %rax
 1366      30
 1367 057a 488B5424 		movq	56(%rsp), %rdx
 1367      38
 1368 057f 48898424 		movq	%rax, 672(%rsp)
 1368      A0020000 
 1369 0587 48899424 		movq	%rdx, 680(%rsp)
 1369      A8020000 
 1370 058f 488B4424 		movq	64(%rsp), %rax
 1370      40
GAS LISTING /tmp/ccypY4LQ.s 			page 47


 1371 0594 488B5424 		movq	72(%rsp), %rdx
 1371      48
 1372 0599 48898424 		movq	%rax, 688(%rsp)
 1372      B0020000 
 1373 05a1 48899424 		movq	%rdx, 696(%rsp)
 1373      B8020000 
 1374              	.LVL124:
 1375              	.LBB264:
 1376              	.LBB265:
 1377              		.loc 2 104 0
 1378 05a9 488D3500 		leaq	.LC51(%rip), %rsi
 1378      000000
 1379 05b0 BF010000 		movl	$1, %edi
 1379      00
 1380 05b5 B8000000 		movl	$0, %eax
 1380      00
 1381 05ba E8000000 		call	__printf_chk@PLT
 1381      00
 1382              	.LVL125:
 1383              	.LBE265:
 1384              	.LBE264:
 153:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj1_wrap.id); printf("\n\n");
 1385              		.loc 1 153 0
 1386 05bf 488BBC24 		movq	656(%rsp), %rdi
 1386      90020000 
 1387 05c7 488BB424 		movq	664(%rsp), %rsi
 1387      98020000 
 1388 05cf FFD3     		call	*%rbx
 1389              	.LVL126:
 1390              	.LBB266:
 1391              	.LBB267:
 1392              		.loc 2 104 0
 1393 05d1 488D3D00 		leaq	.LC20(%rip), %rdi
 1393      000000
 1394 05d8 E8000000 		call	puts@PLT
 1394      00
 1395              	.LVL127:
 1396              	.LBE267:
 1397              	.LBE266:
 156:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 1398              		.loc 1 156 0
 1399 05dd 488D1500 		leaq	.LC52(%rip), %rdx
 1399      000000
 1400 05e4 488D3500 		leaq	.LC53(%rip), %rsi
 1400      000000
 1401 05eb 4889EF   		movq	%rbp, %rdi
 1402 05ee E8000000 		call	msg_wrapper_init_string@PLT
 1402      00
 1403              	.LVL128:
 1404 05f3 488B4424 		movq	32(%rsp), %rax
 1404      20
 1405 05f8 488B5424 		movq	40(%rsp), %rdx
 1405      28
 1406 05fd 48898424 		movq	%rax, 512(%rsp)
 1406      00020000 
 1407 0605 48899424 		movq	%rdx, 520(%rsp)
 1407      08020000 
GAS LISTING /tmp/ccypY4LQ.s 			page 48


 1408 060d 488B4424 		movq	48(%rsp), %rax
 1408      30
 1409 0612 488B5424 		movq	56(%rsp), %rdx
 1409      38
 1410 0617 48898424 		movq	%rax, 528(%rsp)
 1410      10020000 
 1411 061f 48899424 		movq	%rdx, 536(%rsp)
 1411      18020000 
 1412 0627 488B4424 		movq	64(%rsp), %rax
 1412      40
 1413 062c 48898424 		movq	%rax, 544(%rsp)
 1413      20020000 
 1414              	.LVL129:
 1415              	.LBB268:
 1416              	.LBB269:
 1417              		.loc 2 104 0
 1418 0634 488D3500 		leaq	.LC54(%rip), %rsi
 1418      000000
 1419 063b BF010000 		movl	$1, %edi
 1419      00
 1420 0640 B8000000 		movl	$0, %eax
 1420      00
 1421 0645 E8000000 		call	__printf_chk@PLT
 1421      00
 1422              	.LVL130:
 1423              	.LBE269:
 1424              	.LBE268:
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 1425              		.loc 1 157 0
 1426 064a 488BBC24 		movq	512(%rsp), %rdi
 1426      00020000 
 1427 0652 488BB424 		movq	520(%rsp), %rsi
 1427      08020000 
 1428 065a FFD3     		call	*%rbx
 1429              	.LVL131:
 1430              	.LBB270:
 1431              	.LBB271:
 1432              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Optimizing macros and inline functions for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Copyright (C) 1998-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef _STDIO_H
GAS LISTING /tmp/ccypY4LQ.s 			page 49


  20:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # error "Never include <bits/stdio.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef __extern_inline
  24:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE inline
  25:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #else
  26:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE __extern_inline
  27:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  28:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifdef __USE_EXTERN_INLINES
  31:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
  32:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    inline.  */
  33:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
  34:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write formatted output to stdout from argument list ARG.  */
  35:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  36:/usr/include/x86_64-linux-gnu/bits/stdio.h **** vprintf (const char *__restrict __fmt, _G_va_list __arg)
  37:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  38:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return vfprintf (stdout, __fmt, __arg);
  39:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  40:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Read a character from stdin.  */
  43:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  44:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar (void)
  45:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc (stdin);
  47:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  48:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_MISC
  51:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Faster version when locking is not necessary.  */
  52:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  53:/usr/include/x86_64-linux-gnu/bits/stdio.h **** fgetc_unlocked (FILE *__fp)
  54:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  55:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  56:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  57:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif /* misc */
  58:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_POSIX
  61:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  62:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  63:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getc_unlocked (FILE *__fp)
  64:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  66:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  68:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  69:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  70:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar_unlocked (void)
  71:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  72:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (stdin);
  73:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  74:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif	/* POSIX */
  75:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
GAS LISTING /tmp/ccypY4LQ.s 			page 50


  77:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write a character to stdout.  */
  78:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  79:/usr/include/x86_64-linux-gnu/bits/stdio.h **** putchar (int __c)
  80:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  81:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_putc (__c, stdout);
 1433              		.loc 3 81 0
 1434 065c 488B3500 		movq	stdout(%rip), %rsi
 1434      000000
 1435 0663 BF3D0000 		movl	$61, %edi
 1435      00
 1436 0668 E8000000 		call	_IO_putc@PLT
 1436      00
 1437              	.LVL132:
 1438              	.LBE271:
 1439              	.LBE270:
 157:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 1440              		.loc 1 157 0
 1441 066d 488BBC24 		movq	528(%rsp), %rdi
 1441      10020000 
 1442 0675 488BB424 		movq	536(%rsp), %rsi
 1442      18020000 
 1443 067d FFD3     		call	*%rbx
 1444              	.LVL133:
 1445              	.LBB272:
 1446              	.LBB273:
 1447              		.loc 2 104 0
 1448 067f 488D3D00 		leaq	.LC20(%rip), %rdi
 1448      000000
 1449 0686 E8000000 		call	puts@PLT
 1449      00
 1450              	.LVL134:
 1451              	.LBE273:
 1452              	.LBE272:
 159:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 1453              		.loc 1 159 0
 1454 068b 488D1500 		leaq	.LC55(%rip), %rdx
 1454      000000
 1455 0692 488D3500 		leaq	.LC56(%rip), %rsi
 1455      000000
 1456 0699 4889EF   		movq	%rbp, %rdi
 1457 069c E8000000 		call	msg_wrapper_init_string@PLT
 1457      00
 1458              	.LVL135:
 1459 06a1 488B4424 		movq	32(%rsp), %rax
 1459      20
 1460 06a6 488B5424 		movq	40(%rsp), %rdx
 1460      28
 1461 06ab 48898424 		movq	%rax, 560(%rsp)
 1461      30020000 
 1462 06b3 48899424 		movq	%rdx, 568(%rsp)
 1462      38020000 
 1463 06bb 488B4424 		movq	48(%rsp), %rax
 1463      30
 1464 06c0 488B5424 		movq	56(%rsp), %rdx
 1464      38
 1465 06c5 48898424 		movq	%rax, 576(%rsp)
 1465      40020000 
GAS LISTING /tmp/ccypY4LQ.s 			page 51


 1466 06cd 48899424 		movq	%rdx, 584(%rsp)
 1466      48020000 
 1467 06d5 488B4424 		movq	64(%rsp), %rax
 1467      40
 1468 06da 48898424 		movq	%rax, 592(%rsp)
 1468      50020000 
 1469              	.LVL136:
 1470              	.LBB274:
 1471              	.LBB275:
 1472              		.loc 2 104 0
 1473 06e2 488D3500 		leaq	.LC54(%rip), %rsi
 1473      000000
 1474 06e9 BF010000 		movl	$1, %edi
 1474      00
 1475 06ee B8000000 		movl	$0, %eax
 1475      00
 1476 06f3 E8000000 		call	__printf_chk@PLT
 1476      00
 1477              	.LVL137:
 1478              	.LBE275:
 1479              	.LBE274:
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 1480              		.loc 1 160 0
 1481 06f8 488BBC24 		movq	560(%rsp), %rdi
 1481      30020000 
 1482 0700 488BB424 		movq	568(%rsp), %rsi
 1482      38020000 
 1483 0708 FFD3     		call	*%rbx
 1484              	.LVL138:
 1485              	.LBB276:
 1486              	.LBB277:
 1487              		.loc 3 81 0
 1488 070a 488B3500 		movq	stdout(%rip), %rsi
 1488      000000
 1489 0711 BF3D0000 		movl	$61, %edi
 1489      00
 1490 0716 E8000000 		call	_IO_putc@PLT
 1490      00
 1491              	.LVL139:
 1492              	.LBE277:
 1493              	.LBE276:
 160:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 1494              		.loc 1 160 0
 1495 071b 488BBC24 		movq	576(%rsp), %rdi
 1495      40020000 
 1496 0723 488BB424 		movq	584(%rsp), %rsi
 1496      48020000 
 1497 072b FFD3     		call	*%rbx
 1498              	.LVL140:
 1499              	.LBB278:
 1500              	.LBB279:
 1501              		.loc 2 104 0
 1502 072d 488D3D00 		leaq	.LC20(%rip), %rdi
 1502      000000
 1503 0734 E8000000 		call	puts@PLT
 1503      00
 1504              	.LVL141:
GAS LISTING /tmp/ccypY4LQ.s 			page 52


 1505              	.LBE279:
 1506              	.LBE278:
 162:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 1507              		.loc 1 162 0
 1508 0739 488D1500 		leaq	.LC57(%rip), %rdx
 1508      000000
 1509 0740 488D3500 		leaq	.LC58(%rip), %rsi
 1509      000000
 1510 0747 4889EF   		movq	%rbp, %rdi
 1511 074a E8000000 		call	msg_wrapper_init_string@PLT
 1511      00
 1512              	.LVL142:
 1513 074f 488B4424 		movq	32(%rsp), %rax
 1513      20
 1514 0754 488B5424 		movq	40(%rsp), %rdx
 1514      28
 1515 0759 48898424 		movq	%rax, 608(%rsp)
 1515      60020000 
 1516 0761 48899424 		movq	%rdx, 616(%rsp)
 1516      68020000 
 1517 0769 488B4424 		movq	48(%rsp), %rax
 1517      30
 1518 076e 488B5424 		movq	56(%rsp), %rdx
 1518      38
 1519 0773 48898424 		movq	%rax, 624(%rsp)
 1519      70020000 
 1520 077b 48899424 		movq	%rdx, 632(%rsp)
 1520      78020000 
 1521 0783 488B4424 		movq	64(%rsp), %rax
 1521      40
 1522 0788 48898424 		movq	%rax, 640(%rsp)
 1522      80020000 
 1523              	.LVL143:
 1524              	.LBB280:
 1525              	.LBB281:
 1526              		.loc 2 104 0
 1527 0790 488D3500 		leaq	.LC54(%rip), %rsi
 1527      000000
 1528 0797 BF010000 		movl	$1, %edi
 1528      00
 1529 079c B8000000 		movl	$0, %eax
 1529      00
 1530 07a1 E8000000 		call	__printf_chk@PLT
 1530      00
 1531              	.LVL144:
 1532              	.LBE281:
 1533              	.LBE280:
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 1534              		.loc 1 163 0
 1535 07a6 488BBC24 		movq	608(%rsp), %rdi
 1535      60020000 
 1536 07ae 488BB424 		movq	616(%rsp), %rsi
 1536      68020000 
 1537 07b6 FFD3     		call	*%rbx
 1538              	.LVL145:
 1539              	.LBB282:
 1540              	.LBB283:
GAS LISTING /tmp/ccypY4LQ.s 			page 53


 1541              		.loc 3 81 0
 1542 07b8 488B3500 		movq	stdout(%rip), %rsi
 1542      000000
 1543 07bf BF3D0000 		movl	$61, %edi
 1543      00
 1544 07c4 E8000000 		call	_IO_putc@PLT
 1544      00
 1545              	.LVL146:
 1546              	.LBE283:
 1547              	.LBE282:
 163:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 1548              		.loc 1 163 0
 1549 07c9 488BBC24 		movq	624(%rsp), %rdi
 1549      70020000 
 1550 07d1 488BB424 		movq	632(%rsp), %rsi
 1550      78020000 
 1551 07d9 FFD3     		call	*%rbx
 1552              	.LVL147:
 1553              	.LBB284:
 1554              	.LBB285:
 1555              		.loc 2 104 0
 1556 07db 488D3D00 		leaq	.LC20(%rip), %rdi
 1556      000000
 1557 07e2 E8000000 		call	puts@PLT
 1557      00
 1558              	.LVL148:
 1559              	.LBE285:
 1560              	.LBE284:
 1561              	.LBB286:
 1562              	.LBB287:
 1563 07e7 488D3D00 		leaq	.LC59(%rip), %rdi
 1563      000000
 1564 07ee E8000000 		call	puts@PLT
 1564      00
 1565              	.LVL149:
 1566              	.LBE287:
 1567              	.LBE286:
 167:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 1568              		.loc 1 167 0
 1569 07f3 4C8DBC24 		leaq	560(%rsp), %r15
 1569      30020000 
 1570 07fb 4C8DAC24 		leaq	656(%rsp), %r13
 1570      90020000 
 1571 0803 4C89FE   		movq	%r15, %rsi
 1572 0806 4C89EF   		movq	%r13, %rdi
 1573 0809 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1573      00
 1574              	.LVL150:
 168:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 1575              		.loc 1 168 0
 1576 080e 488DB424 		leaq	608(%rsp), %rsi
 1576      60020000 
 1577 0816 4C89EF   		movq	%r13, %rdi
 1578 0819 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1578      00
 1579              	.LVL151:
 1580              	.LBB288:
GAS LISTING /tmp/ccypY4LQ.s 			page 54


 1581              	.LBB289:
 1582              		.loc 2 104 0
 1583 081e 488D3D00 		leaq	.LC60(%rip), %rdi
 1583      000000
 1584 0825 E8000000 		call	puts@PLT
 1584      00
 1585              	.LVL152:
 1586              	.LBE289:
 1587              	.LBE288:
 171:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1588              		.loc 1 171 0
 1589 082a 4C8DA424 		leaq	288(%rsp), %r12
 1589      20010000 
 1590 0832 4C89EE   		movq	%r13, %rsi
 1591 0835 4C89E7   		movq	%r12, %rdi
 1592 0838 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1592      00
 1593              	.LVL153:
 173:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 1594              		.loc 1 173 0
 1595 083d 488D3500 		leaq	.LC61(%rip), %rsi
 1595      000000
 1596 0844 4889EF   		movq	%rbp, %rdi
 1597 0847 E8000000 		call	msg_wrapper_init_cmd@PLT
 1597      00
 1598              	.LVL154:
 1599 084c 488B4424 		movq	32(%rsp), %rax
 1599      20
 1600 0851 488B5424 		movq	40(%rsp), %rdx
 1600      28
 1601 0856 48898424 		movq	%rax, 128(%rsp)
 1601      80000000 
 1602 085e 48899424 		movq	%rdx, 136(%rsp)
 1602      88000000 
 1603 0866 488B4424 		movq	48(%rsp), %rax
 1603      30
 1604 086b 48898424 		movq	%rax, 144(%rsp)
 1604      90000000 
 1605              	.LVL155:
 1606              	.LBB290:
 1607              	.LBB291:
 1608              		.loc 2 104 0
 1609 0873 488D3500 		leaq	.LC62(%rip), %rsi
 1609      000000
 1610 087a BF010000 		movl	$1, %edi
 1610      00
 1611 087f B8000000 		movl	$0, %eax
 1611      00
 1612 0884 E8000000 		call	__printf_chk@PLT
 1612      00
 1613              	.LVL156:
 1614              	.LBE291:
 1615              	.LBE290:
 174:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_wrap.cmd); printf(">\n\n");
 1616              		.loc 1 174 0
 1617 0889 488BBC24 		movq	128(%rsp), %rdi
 1617      80000000 
GAS LISTING /tmp/ccypY4LQ.s 			page 55


 1618 0891 488BB424 		movq	136(%rsp), %rsi
 1618      88000000 
 1619 0899 FFD3     		call	*%rbx
 1620              	.LVL157:
 1621              	.LBB292:
 1622              	.LBB293:
 1623              		.loc 2 104 0
 1624 089b 488D3D00 		leaq	.LC63(%rip), %rdi
 1624      000000
 1625 08a2 E8000000 		call	puts@PLT
 1625      00
 1626              	.LVL158:
 1627              	.LBE293:
 1628              	.LBE292:
 176:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 1629              		.loc 1 176 0
 1630 08a7 488D3500 		leaq	.LC64(%rip), %rsi
 1630      000000
 1631 08ae 4889EF   		movq	%rbp, %rdi
 1632 08b1 E8000000 		call	msg_wrapper_init_cmd@PLT
 1632      00
 1633              	.LVL159:
 1634 08b6 488B4424 		movq	32(%rsp), %rax
 1634      20
 1635 08bb 488B5424 		movq	40(%rsp), %rdx
 1635      28
 1636 08c0 48898424 		movq	%rax, 160(%rsp)
 1636      A0000000 
 1637 08c8 48899424 		movq	%rdx, 168(%rsp)
 1637      A8000000 
 1638 08d0 488B4424 		movq	48(%rsp), %rax
 1638      30
 1639 08d5 48898424 		movq	%rax, 176(%rsp)
 1639      B0000000 
 1640              	.LVL160:
 1641              	.LBB294:
 1642              	.LBB295:
 1643              		.loc 2 104 0
 1644 08dd 488D3500 		leaq	.LC62(%rip), %rsi
 1644      000000
 1645 08e4 BF010000 		movl	$1, %edi
 1645      00
 1646 08e9 B8000000 		movl	$0, %eax
 1646      00
 1647 08ee E8000000 		call	__printf_chk@PLT
 1647      00
 1648              	.LVL161:
 1649              	.LBE295:
 1650              	.LBE294:
 177:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_rem.cmd); printf(">\n\n");
 1651              		.loc 1 177 0
 1652 08f3 488BBC24 		movq	160(%rsp), %rdi
 1652      A0000000 
 1653 08fb 488BB424 		movq	168(%rsp), %rsi
 1653      A8000000 
 1654 0903 FFD3     		call	*%rbx
 1655              	.LVL162:
GAS LISTING /tmp/ccypY4LQ.s 			page 56


 1656              	.LBB296:
 1657              	.LBB297:
 1658              		.loc 2 104 0
 1659 0905 488D3D00 		leaq	.LC63(%rip), %rdi
 1659      000000
 1660 090c E8000000 		call	puts@PLT
 1660      00
 1661              	.LVL163:
 1662              	.LBE297:
 1663              	.LBE296:
 179:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
 1664              		.loc 1 179 0
 1665 0911 BA54F3FF 		movl	$-3244, %edx
 1665      FF
 1666 0916 488D3500 		leaq	.LC65(%rip), %rsi
 1666      000000
 1667 091d 4889EF   		movq	%rbp, %rdi
 1668 0920 E8000000 		call	msg_wrapper_init_int@PLT
 1668      00
 1669              	.LVL164:
 1670 0925 488B4424 		movq	32(%rsp), %rax
 1670      20
 1671 092a 488B5424 		movq	40(%rsp), %rdx
 1671      28
 1672 092f 48898424 		movq	%rax, 320(%rsp)
 1672      40010000 
 1673 0937 48899424 		movq	%rdx, 328(%rsp)
 1673      48010000 
 1674 093f 488B4424 		movq	48(%rsp), %rax
 1674      30
 1675 0944 488B5424 		movq	56(%rsp), %rdx
 1675      38
 1676 0949 48898424 		movq	%rax, 336(%rsp)
 1676      50010000 
 1677 0951 48899424 		movq	%rdx, 344(%rsp)
 1677      58010000 
 1678              	.LVL165:
 1679              	.LBB298:
 1680              	.LBB299:
 1681              		.loc 2 104 0
 1682 0959 488D3500 		leaq	.LC66(%rip), %rsi
 1682      000000
 1683 0960 BF010000 		movl	$1, %edi
 1683      00
 1684 0965 B8000000 		movl	$0, %eax
 1684      00
 1685 096a E8000000 		call	__printf_chk@PLT
 1685      00
 1686              	.LVL166:
 1687              	.LBE299:
 1688              	.LBE298:
 180:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i1.id); printf("=%d\n\n", i1.val);
 1689              		.loc 1 180 0
 1690 096f 488BBC24 		movq	320(%rsp), %rdi
 1690      40010000 
 1691 0977 488BB424 		movq	328(%rsp), %rsi
 1691      48010000 
GAS LISTING /tmp/ccypY4LQ.s 			page 57


 1692 097f FFD3     		call	*%rbx
 1693              	.LVL167:
 1694              	.LBB300:
 1695              	.LBB301:
 1696              		.loc 2 104 0
 1697 0981 8B942450 		movl	336(%rsp), %edx
 1697      010000
 1698 0988 488D3500 		leaq	.LC67(%rip), %rsi
 1698      000000
 1699 098f BF010000 		movl	$1, %edi
 1699      00
 1700 0994 B8000000 		movl	$0, %eax
 1700      00
 1701 0999 E8000000 		call	__printf_chk@PLT
 1701      00
 1702              	.LVL168:
 1703              	.LBE301:
 1704              	.LBE300:
 182:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 1705              		.loc 1 182 0
 1706 099e BA55F806 		movl	$456789, %edx
 1706      00
 1707 09a3 488D3500 		leaq	.LC68(%rip), %rsi
 1707      000000
 1708 09aa 4889EF   		movq	%rbp, %rdi
 1709 09ad E8000000 		call	msg_wrapper_init_int@PLT
 1709      00
 1710              	.LVL169:
 1711 09b2 488B4424 		movq	32(%rsp), %rax
 1711      20
 1712 09b7 488B5424 		movq	40(%rsp), %rdx
 1712      28
 1713 09bc 48898424 		movq	%rax, 352(%rsp)
 1713      60010000 
 1714 09c4 48899424 		movq	%rdx, 360(%rsp)
 1714      68010000 
 1715 09cc 488B4424 		movq	48(%rsp), %rax
 1715      30
 1716 09d1 488B5424 		movq	56(%rsp), %rdx
 1716      38
 1717 09d6 48898424 		movq	%rax, 368(%rsp)
 1717      70010000 
 1718 09de 48899424 		movq	%rdx, 376(%rsp)
 1718      78010000 
 1719              	.LVL170:
 1720              	.LBB302:
 1721              	.LBB303:
 1722              		.loc 2 104 0
 1723 09e6 488D3500 		leaq	.LC66(%rip), %rsi
 1723      000000
 1724 09ed BF010000 		movl	$1, %edi
 1724      00
 1725 09f2 B8000000 		movl	$0, %eax
 1725      00
 1726 09f7 E8000000 		call	__printf_chk@PLT
 1726      00
 1727              	.LVL171:
GAS LISTING /tmp/ccypY4LQ.s 			page 58


 1728              	.LBE303:
 1729              	.LBE302:
 183:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i2.id); printf("=%d\n\n", i2.val);
 1730              		.loc 1 183 0
 1731 09fc 488BBC24 		movq	352(%rsp), %rdi
 1731      60010000 
 1732 0a04 488BB424 		movq	360(%rsp), %rsi
 1732      68010000 
 1733 0a0c FFD3     		call	*%rbx
 1734              	.LVL172:
 1735              	.LBB304:
 1736              	.LBB305:
 1737              		.loc 2 104 0
 1738 0a0e 8B942470 		movl	368(%rsp), %edx
 1738      010000
 1739 0a15 488D3500 		leaq	.LC67(%rip), %rsi
 1739      000000
 1740 0a1c BF010000 		movl	$1, %edi
 1740      00
 1741 0a21 B8000000 		movl	$0, %eax
 1741      00
 1742 0a26 E8000000 		call	__printf_chk@PLT
 1742      00
 1743              	.LVL173:
 1744              	.LBE305:
 1745              	.LBE304:
 185:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 1746              		.loc 1 185 0
 1747 0a2b BA060000 		movl	$6, %edx
 1747      00
 1748 0a30 F30F1005 		movss	.LC70(%rip), %xmm0
 1748      00000000 
 1749 0a38 488D3500 		leaq	.LC69(%rip), %rsi
 1749      000000
 1750 0a3f 4889EF   		movq	%rbp, %rdi
 1751 0a42 E8000000 		call	msg_wrapper_init_float@PLT
 1751      00
 1752              	.LVL174:
 1753 0a47 488B4424 		movq	32(%rsp), %rax
 1753      20
 1754 0a4c 488B5424 		movq	40(%rsp), %rdx
 1754      28
 1755 0a51 48898424 		movq	%rax, 384(%rsp)
 1755      80010000 
 1756 0a59 48899424 		movq	%rdx, 392(%rsp)
 1756      88010000 
 1757 0a61 488B4424 		movq	48(%rsp), %rax
 1757      30
 1758 0a66 488B5424 		movq	56(%rsp), %rdx
 1758      38
 1759 0a6b 48898424 		movq	%rax, 400(%rsp)
 1759      90010000 
 1760 0a73 48899424 		movq	%rdx, 408(%rsp)
 1760      98010000 
 1761              	.LVL175:
 1762              	.LBB306:
 1763              	.LBB307:
GAS LISTING /tmp/ccypY4LQ.s 			page 59


 1764              		.loc 2 104 0
 1765 0a7b 488D3500 		leaq	.LC71(%rip), %rsi
 1765      000000
 1766 0a82 BF010000 		movl	$1, %edi
 1766      00
 1767 0a87 B8000000 		movl	$0, %eax
 1767      00
 1768 0a8c E8000000 		call	__printf_chk@PLT
 1768      00
 1769              	.LVL176:
 1770              	.LBE307:
 1771              	.LBE306:
 186:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f1.id); printf("=%.6f\n\n", f1.val);
 1772              		.loc 1 186 0
 1773 0a91 488BBC24 		movq	384(%rsp), %rdi
 1773      80010000 
 1774 0a99 488BB424 		movq	392(%rsp), %rsi
 1774      88010000 
 1775 0aa1 FFD3     		call	*%rbx
 1776              	.LVL177:
 1777 0aa3 660FEFC0 		pxor	%xmm0, %xmm0
 1778 0aa7 F30F5A84 		cvtss2sd	400(%rsp), %xmm0
 1778      24900100 
 1778      00
 1779              	.LVL178:
 1780              	.LBB308:
 1781              	.LBB309:
 1782              		.loc 2 104 0
 1783 0ab0 488D3500 		leaq	.LC72(%rip), %rsi
 1783      000000
 1784 0ab7 BF010000 		movl	$1, %edi
 1784      00
 1785 0abc B8010000 		movl	$1, %eax
 1785      00
 1786 0ac1 E8000000 		call	__printf_chk@PLT
 1786      00
 1787              	.LVL179:
 1788              	.LBE309:
 1789              	.LBE308:
 188:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 1790              		.loc 1 188 0
 1791 0ac6 BA060000 		movl	$6, %edx
 1791      00
 1792 0acb F30F1005 		movss	.LC74(%rip), %xmm0
 1792      00000000 
 1793 0ad3 488D3500 		leaq	.LC73(%rip), %rsi
 1793      000000
 1794 0ada 4889EF   		movq	%rbp, %rdi
 1795 0add E8000000 		call	msg_wrapper_init_float@PLT
 1795      00
 1796              	.LVL180:
 1797 0ae2 488B4424 		movq	32(%rsp), %rax
 1797      20
 1798 0ae7 488B5424 		movq	40(%rsp), %rdx
 1798      28
 1799 0aec 48898424 		movq	%rax, 416(%rsp)
 1799      A0010000 
GAS LISTING /tmp/ccypY4LQ.s 			page 60


 1800 0af4 48899424 		movq	%rdx, 424(%rsp)
 1800      A8010000 
 1801 0afc 488B4424 		movq	48(%rsp), %rax
 1801      30
 1802 0b01 488B5424 		movq	56(%rsp), %rdx
 1802      38
 1803 0b06 48898424 		movq	%rax, 432(%rsp)
 1803      B0010000 
 1804 0b0e 48899424 		movq	%rdx, 440(%rsp)
 1804      B8010000 
 1805              	.LVL181:
 1806              	.LBB310:
 1807              	.LBB311:
 1808              		.loc 2 104 0
 1809 0b16 488D3500 		leaq	.LC71(%rip), %rsi
 1809      000000
 1810 0b1d BF010000 		movl	$1, %edi
 1810      00
 1811 0b22 B8000000 		movl	$0, %eax
 1811      00
 1812 0b27 E8000000 		call	__printf_chk@PLT
 1812      00
 1813              	.LVL182:
 1814              	.LBE311:
 1815              	.LBE310:
 189:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f2.id); printf("=%.6f\n\n", f2.val);
 1816              		.loc 1 189 0
 1817 0b2c 488BBC24 		movq	416(%rsp), %rdi
 1817      A0010000 
 1818 0b34 488BB424 		movq	424(%rsp), %rsi
 1818      A8010000 
 1819 0b3c FFD3     		call	*%rbx
 1820              	.LVL183:
 1821 0b3e 660FEFC0 		pxor	%xmm0, %xmm0
 1822 0b42 F30F5A84 		cvtss2sd	432(%rsp), %xmm0
 1822      24B00100 
 1822      00
 1823              	.LVL184:
 1824              	.LBB312:
 1825              	.LBB313:
 1826              		.loc 2 104 0
 1827 0b4b 488D3500 		leaq	.LC72(%rip), %rsi
 1827      000000
 1828 0b52 BF010000 		movl	$1, %edi
 1828      00
 1829 0b57 B8010000 		movl	$1, %eax
 1829      00
 1830 0b5c E8000000 		call	__printf_chk@PLT
 1830      00
 1831              	.LVL185:
 1832              	.LBE313:
 1833              	.LBE312:
 191:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 1834              		.loc 1 191 0
 1835 0b61 488D3500 		leaq	.LC75(%rip), %rsi
 1835      000000
 1836 0b68 4889EF   		movq	%rbp, %rdi
GAS LISTING /tmp/ccypY4LQ.s 			page 61


 1837 0b6b E8000000 		call	msg_wrapper_init_obj@PLT
 1837      00
 1838              	.LVL186:
 1839 0b70 488B4424 		movq	32(%rsp), %rax
 1839      20
 1840 0b75 488B5424 		movq	40(%rsp), %rdx
 1840      28
 1841 0b7a 48898424 		movq	%rax, 704(%rsp)
 1841      C0020000 
 1842 0b82 48899424 		movq	%rdx, 712(%rsp)
 1842      C8020000 
 1843 0b8a 488B4424 		movq	48(%rsp), %rax
 1843      30
 1844 0b8f 488B5424 		movq	56(%rsp), %rdx
 1844      38
 1845 0b94 48898424 		movq	%rax, 720(%rsp)
 1845      D0020000 
 1846 0b9c 48899424 		movq	%rdx, 728(%rsp)
 1846      D8020000 
 1847 0ba4 488B4424 		movq	64(%rsp), %rax
 1847      40
 1848 0ba9 488B5424 		movq	72(%rsp), %rdx
 1848      48
 1849 0bae 48898424 		movq	%rax, 736(%rsp)
 1849      E0020000 
 1850 0bb6 48899424 		movq	%rdx, 744(%rsp)
 1850      E8020000 
 1851              	.LVL187:
 1852              	.LBB314:
 1853              	.LBB315:
 1854              		.loc 2 104 0
 1855 0bbe 488D3500 		leaq	.LC51(%rip), %rsi
 1855      000000
 1856 0bc5 BF010000 		movl	$1, %edi
 1856      00
 1857 0bca B8000000 		movl	$0, %eax
 1857      00
 1858 0bcf E8000000 		call	__printf_chk@PLT
 1858      00
 1859              	.LVL188:
 1860              	.LBE315:
 1861              	.LBE314:
 192:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj2_wrap.id); printf("\n\n");
 1862              		.loc 1 192 0
 1863 0bd4 488BBC24 		movq	704(%rsp), %rdi
 1863      C0020000 
 1864 0bdc 488BB424 		movq	712(%rsp), %rsi
 1864      C8020000 
 1865 0be4 FFD3     		call	*%rbx
 1866              	.LVL189:
 1867              	.LBB316:
 1868              	.LBB317:
 1869              		.loc 2 104 0
 1870 0be6 488D3D00 		leaq	.LC20(%rip), %rdi
 1870      000000
 1871 0bed E8000000 		call	puts@PLT
 1871      00
GAS LISTING /tmp/ccypY4LQ.s 			page 62


 1872              	.LVL190:
 1873              	.LBE317:
 1874              	.LBE316:
 1875              	.LBB318:
 1876              	.LBB319:
 1877 0bf2 488D3D00 		leaq	.LC76(%rip), %rdi
 1877      000000
 1878 0bf9 E8000000 		call	puts@PLT
 1878      00
 1879              	.LVL191:
 1880              	.LBE319:
 1881              	.LBE318:
 195:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 1882              		.loc 1 195 0
 1883 0bfe 488DB424 		leaq	320(%rsp), %rsi
 1883      40010000 
 1884 0c06 488DAC24 		leaq	704(%rsp), %rbp
 1884      C0020000 
 1885 0c0e 4889EF   		movq	%rbp, %rdi
 1886 0c11 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1886      00
 1887              	.LVL192:
 196:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 1888              		.loc 1 196 0
 1889 0c16 488D8424 		leaq	352(%rsp), %rax
 1889      60010000 
 1890 0c1e 48890424 		movq	%rax, (%rsp)
 1891 0c22 4889C6   		movq	%rax, %rsi
 1892 0c25 4889EF   		movq	%rbp, %rdi
 1893 0c28 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1893      00
 1894              	.LVL193:
 197:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 1895              		.loc 1 197 0
 1896 0c2d 488D8C24 		leaq	384(%rsp), %rcx
 1896      80010000 
 1897 0c35 48894C24 		movq	%rcx, 8(%rsp)
 1897      08
 1898 0c3a 4889CE   		movq	%rcx, %rsi
 1899 0c3d 4889EF   		movq	%rbp, %rdi
 1900 0c40 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1900      00
 1901              	.LVL194:
 198:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 1902              		.loc 1 198 0
 1903 0c45 488DB424 		leaq	416(%rsp), %rsi
 1903      A0010000 
 1904 0c4d 4889EF   		movq	%rbp, %rdi
 1905 0c50 E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1905      00
 1906              	.LVL195:
 199:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 1907              		.loc 1 199 0
 1908 0c55 4C8DB424 		leaq	512(%rsp), %r14
 1908      00020000 
 1909 0c5d 4C89F6   		movq	%r14, %rsi
 1910 0c60 4889EF   		movq	%rbp, %rdi
GAS LISTING /tmp/ccypY4LQ.s 			page 63


 1911 0c63 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1911      00
 1912              	.LVL196:
 1913              	.LBB320:
 1914              	.LBB321:
 1915              		.loc 2 104 0
 1916 0c68 488D3D00 		leaq	.LC77(%rip), %rdi
 1916      000000
 1917 0c6f E8000000 		call	puts@PLT
 1917      00
 1918              	.LVL197:
 1919              	.LBE321:
 1920              	.LBE320:
 202:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 1921              		.loc 1 202 0
 1922 0c74 488DB424 		leaq	128(%rsp), %rsi
 1922      80000000 
 1923 0c7c 4C89E7   		movq	%r12, %rdi
 1924 0c7f E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1924      00
 1925              	.LVL198:
 1926              	.LBB322:
 1927              	.LBB323:
 1928              		.loc 2 104 0
 1929 0c84 488D3D00 		leaq	.LC78(%rip), %rdi
 1929      000000
 1930 0c8b E8000000 		call	puts@PLT
 1930      00
 1931              	.LVL199:
 1932              	.LBE323:
 1933              	.LBE322:
 205:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 1934              		.loc 1 205 0
 1935 0c90 4889EE   		movq	%rbp, %rsi
 1936 0c93 4C89E7   		movq	%r12, %rdi
 1937 0c96 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1937      00
 1938              	.LVL200:
 1939              	.LBB324:
 1940              	.LBB325:
 1941              		.loc 2 104 0
 1942 0c9b 488D3D00 		leaq	.LC79(%rip), %rdi
 1942      000000
 1943 0ca2 E8000000 		call	puts@PLT
 1943      00
 1944              	.LVL201:
 1945              	.LBE325:
 1946              	.LBE324:
 208:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 1947              		.loc 1 208 0
 1948 0ca7 488D9424 		leaq	160(%rsp), %rdx
 1948      A0000000 
 1949 0caf 48895424 		movq	%rdx, 16(%rsp)
 1949      10
 1950 0cb4 4889D6   		movq	%rdx, %rsi
 1951 0cb7 4C89E7   		movq	%r12, %rdi
 1952 0cba E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
GAS LISTING /tmp/ccypY4LQ.s 			page 64


 1952      00
 1953              	.LVL202:
 1954              	.LBB326:
 1955              	.LBB327:
 1956              		.loc 2 104 0
 1957 0cbf 488D3D00 		leaq	.LC80(%rip), %rdi
 1957      000000
 1958 0cc6 E8000000 		call	puts@PLT
 1958      00
 1959              	.LVL203:
 1960              	.LBE327:
 1961              	.LBE326:
 211:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 1962              		.loc 1 211 0
 1963 0ccb 4C89FE   		movq	%r15, %rsi
 1964 0cce 4C89EF   		movq	%r13, %rdi
 1965 0cd1 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1965      00
 1966              	.LVL204:
 1967              	.LBB328:
 1968              	.LBB329:
 1969              		.loc 2 104 0
 1970 0cd6 488D3D00 		leaq	.LC81(%rip), %rdi
 1970      000000
 1971 0cdd E8000000 		call	puts@PLT
 1971      00
 1972              	.LVL205:
 1973              	.LBE329:
 1974              	.LBE328:
 214:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 1975              		.loc 1 214 0
 1976 0ce2 4C89F6   		movq	%r14, %rsi
 1977 0ce5 4889EF   		movq	%rbp, %rdi
 1978 0ce8 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1978      00
 1979              	.LVL206:
 1980              	.LBB330:
 1981              	.LBB331:
 1982              		.loc 2 104 0
 1983 0ced 488D3D00 		leaq	.LC82(%rip), %rdi
 1983      000000
 1984 0cf4 E8000000 		call	puts@PLT
 1984      00
 1985              	.LVL207:
 1986              	.LBE331:
 1987              	.LBE330:
 217:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 1988              		.loc 1 217 0
 1989 0cf9 488B7424 		movq	8(%rsp), %rsi
 1989      08
 1990 0cfe 4889EF   		movq	%rbp, %rdi
 1991 0d01 E8000000 		call	msg_wrapper_rm_float_from_obj@PLT
 1991      00
 1992              	.LVL208:
 1993              	.LBB332:
 1994              	.LBB333:
 1995              		.loc 2 104 0
GAS LISTING /tmp/ccypY4LQ.s 			page 65


 1996 0d06 488D3D00 		leaq	.LC83(%rip), %rdi
 1996      000000
 1997 0d0d E8000000 		call	puts@PLT
 1997      00
 1998              	.LVL209:
 1999              	.LBE333:
 2000              	.LBE332:
 220:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 2001              		.loc 1 220 0
 2002 0d12 488B3424 		movq	(%rsp), %rsi
 2003 0d16 4889EF   		movq	%rbp, %rdi
 2004 0d19 E8000000 		call	msg_wrapper_rm_int_from_obj@PLT
 2004      00
 2005              	.LVL210:
 2006              	.LBB334:
 2007              	.LBB335:
 2008              		.loc 2 104 0
 2009 0d1e 488D3D00 		leaq	.LC84(%rip), %rdi
 2009      000000
 2010 0d25 E8000000 		call	puts@PLT
 2010      00
 2011              	.LVL211:
 2012              	.LBE335:
 2013              	.LBE334:
 223:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 2014              		.loc 1 223 0
 2015 0d2a 4C89EE   		movq	%r13, %rsi
 2016 0d2d 4C89E7   		movq	%r12, %rdi
 2017 0d30 E8000000 		call	msg_wrapper_rm_obj_from_msg@PLT
 2017      00
 2018              	.LVL212:
 2019              	.LBB336:
 2020              	.LBB337:
 2021              		.loc 2 104 0
 2022 0d35 488D3D00 		leaq	.LC85(%rip), %rdi
 2022      000000
 2023 0d3c E8000000 		call	puts@PLT
 2023      00
 2024              	.LVL213:
 2025              	.LBE337:
 2026              	.LBE336:
 226:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 2027              		.loc 1 226 0
 2028 0d41 488B7424 		movq	16(%rsp), %rsi
 2028      10
 2029 0d46 4C89E7   		movq	%r12, %rdi
 2030 0d49 E8000000 		call	msg_wrapper_rm_cmd_from_msg@PLT
 2030      00
 2031              	.LVL214:
 2032              	.LBB338:
 2033              	.LBB339:
 2034              		.loc 2 104 0
 2035 0d4e 488D3D00 		leaq	.LC86(%rip), %rdi
 2035      000000
 2036 0d55 E8000000 		call	puts@PLT
 2036      00
 2037              	.LVL215:
GAS LISTING /tmp/ccypY4LQ.s 			page 66


 2038              	.LBE339:
 2039              	.LBE338:
 229:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 2040              		.loc 1 229 0
 2041 0d5a 4C89EE   		movq	%r13, %rsi
 2042 0d5d 4C89E7   		movq	%r12, %rdi
 2043 0d60 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 2043      00
 2044              	.LVL216:
 2045              	.LBB340:
 2046              	.LBB341:
 2047              		.loc 2 104 0
 2048 0d65 488D3D00 		leaq	.LC87(%rip), %rdi
 2048      000000
 2049 0d6c E8000000 		call	puts@PLT
 2049      00
 2050              	.LVL217:
 2051              	.LBE341:
 2052              	.LBE340:
 2053              	.LBB342:
 2054              	.LBB343:
 2055 0d71 488D3D00 		leaq	.LC88(%rip), %rdi
 2055      000000
 2056 0d78 E8000000 		call	puts@PLT
 2056      00
 2057              	.LVL218:
 2058              	.LBE343:
 2059              	.LBE342:
 233:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2060              		.loc 1 233 0
 2061 0d7d 4C8BA424 		movq	824(%rsp), %r12
 2061      38030000 
 2062 0d85 FFB42438 		pushq	312(%rsp)
 2062      010000
 2063              	.LCFI101:
 2064              		.cfi_def_cfa_offset 1912
 2065 0d8c FFB42438 		pushq	312(%rsp)
 2065      010000
 2066              	.LCFI102:
 2067              		.cfi_def_cfa_offset 1920
 2068 0d93 FFB42438 		pushq	312(%rsp)
 2068      010000
 2069              	.LCFI103:
 2070              		.cfi_def_cfa_offset 1928
 2071 0d9a FFB42438 		pushq	312(%rsp)
 2071      010000
 2072              	.LCFI104:
 2073              		.cfi_def_cfa_offset 1936
 2074 0da1 41FFD4   		call	*%r12
 2075              	.LVL219:
 2076              	.LBB344:
 2077              	.LBB345:
 2078              		.loc 2 104 0
 2079 0da4 4883C420 		addq	$32, %rsp
 2080              	.LCFI105:
 2081              		.cfi_def_cfa_offset 1904
 2082 0da8 488D3D00 		leaq	.LC20(%rip), %rdi
GAS LISTING /tmp/ccypY4LQ.s 			page 67


 2082      000000
 2083 0daf E8000000 		call	puts@PLT
 2083      00
 2084              	.LVL220:
 2085              	.LBE345:
 2086              	.LBE344:
 238:src/main.c    ****     char buff[1000] = {0};
 2087              		.loc 1 238 0
 2088 0db4 488DBC24 		leaq	832(%rsp), %rdi
 2088      40030000 
 2089 0dbc 41BD0000 		movl	$0, %r13d
 2089      0000
 2090 0dc2 B97D0000 		movl	$125, %ecx
 2090      00
 2091 0dc7 4C89E8   		movq	%r13, %rax
 2092 0dca F348AB   		rep stosq
 239:src/main.c    ****     hnd.init_str_buff(buff, 1000);
 2093              		.loc 1 239 0
 2094 0dcd 488DAC24 		leaq	832(%rsp), %rbp
 2094      40030000 
 2095 0dd5 BEE80300 		movl	$1000, %esi
 2095      00
 2096 0dda 4889EF   		movq	%rbp, %rdi
 2097 0ddd FF942428 		call	*808(%rsp)
 2097      030000
 2098              	.LVL221:
 240:src/main.c    ****     hnd.enable_buff();
 2099              		.loc 1 240 0
 2100 0de4 FF942418 		call	*792(%rsp)
 2100      030000
 2101              	.LVL222:
 241:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2102              		.loc 1 241 0
 2103 0deb FFB42438 		pushq	312(%rsp)
 2103      010000
 2104              	.LCFI106:
 2105              		.cfi_def_cfa_offset 1912
 2106 0df2 FFB42438 		pushq	312(%rsp)
 2106      010000
 2107              	.LCFI107:
 2108              		.cfi_def_cfa_offset 1920
 2109 0df9 FFB42438 		pushq	312(%rsp)
 2109      010000
 2110              	.LCFI108:
 2111              		.cfi_def_cfa_offset 1928
 2112 0e00 FFB42438 		pushq	312(%rsp)
 2112      010000
 2113              	.LCFI109:
 2114              		.cfi_def_cfa_offset 1936
 2115 0e07 41FFD4   		call	*%r12
 2116              	.LVL223:
 2117              	.LBB346:
 2118              	.LBB347:
 2119              		.loc 2 104 0
 2120 0e0a 4883C420 		addq	$32, %rsp
 2121              	.LCFI110:
 2122              		.cfi_def_cfa_offset 1904
GAS LISTING /tmp/ccypY4LQ.s 			page 68


 2123 0e0e 488D3D00 		leaq	.LC89(%rip), %rdi
 2123      000000
 2124 0e15 E8000000 		call	puts@PLT
 2124      00
 2125              	.LVL224:
 2126              	.LBE347:
 2127              	.LBE346:
 243:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 2128              		.loc 1 243 0
 2129 0e1a FFB42438 		pushq	312(%rsp)
 2129      010000
 2130              	.LCFI111:
 2131              		.cfi_def_cfa_offset 1912
 2132 0e21 FFB42438 		pushq	312(%rsp)
 2132      010000
 2133              	.LCFI112:
 2134              		.cfi_def_cfa_offset 1920
 2135 0e28 FFB42438 		pushq	312(%rsp)
 2135      010000
 2136              	.LCFI113:
 2137              		.cfi_def_cfa_offset 1928
 2138 0e2f FFB42438 		pushq	312(%rsp)
 2138      010000
 2139              	.LCFI114:
 2140              		.cfi_def_cfa_offset 1936
 2141 0e36 41FFD4   		call	*%r12
 2142              	.LVL225:
 2143              	.LBB348:
 2144              	.LBB349:
 2145              		.loc 2 104 0
 2146 0e39 4883C420 		addq	$32, %rsp
 2147              	.LCFI115:
 2148              		.cfi_def_cfa_offset 1904
 2149 0e3d 488D3D00 		leaq	.LC90(%rip), %rdi
 2149      000000
 2150 0e44 E8000000 		call	puts@PLT
 2150      00
 2151              	.LVL226:
 2152              	.LBE349:
 2153              	.LBE348:
 245:src/main.c    ****     hnd.disable_buff();
 2154              		.loc 1 245 0
 2155 0e49 FF942420 		call	*800(%rsp)
 2155      030000
 2156              	.LVL227:
 2157              	.LBB350:
 2158              	.LBB351:
 2159              		.loc 2 104 0
 2160 0e50 488D3D00 		leaq	.LC20(%rip), %rdi
 2160      000000
 2161 0e57 E8000000 		call	puts@PLT
 2161      00
 2162              	.LVL228:
 2163              	.LBE351:
 2164              	.LBE350:
 2165              	.LBB352:
 2166              	.LBB353:
GAS LISTING /tmp/ccypY4LQ.s 			page 69


 2167 0e5c 488D3D00 		leaq	.LC91(%rip), %rdi
 2167      000000
 2168 0e63 E8000000 		call	puts@PLT
 2168      00
 2169              	.LVL229:
 2170              	.LBE353:
 2171              	.LBE352:
 2172              	.LBB354:
 2173              	.LBB355:
 2174 0e68 4889EA   		movq	%rbp, %rdx
 2175 0e6b 488D3500 		leaq	.LC24(%rip), %rsi
 2175      000000
 2176 0e72 BF010000 		movl	$1, %edi
 2176      00
 2177 0e77 B8000000 		movl	$0, %eax
 2177      00
 2178 0e7c E8000000 		call	__printf_chk@PLT
 2178      00
 2179              	.LVL230:
 2180              	.LBE355:
 2181              	.LBE354:
 2182              	.LBB356:
 2183              	.LBB357:
 2184 0e81 488D3D00 		leaq	.LC92(%rip), %rdi
 2184      000000
 2185 0e88 E8000000 		call	puts@PLT
 2185      00
 2186              	.LVL231:
 2187              	.LBE357:
 2188              	.LBE356:
 252:src/main.c    ****     msg_reparsed = msg_get(buff, "wrapped_msg", 1000);
 2189              		.loc 1 252 0
 2190 0e8d 488DBC24 		leaq	448(%rsp), %rdi
 2190      C0010000 
 2191 0e95 B9E80300 		movl	$1000, %ecx
 2191      00
 2192 0e9a 488D1500 		leaq	.LC48(%rip), %rdx
 2192      000000
 2193 0ea1 4889EE   		movq	%rbp, %rsi
 2194 0ea4 E8000000 		call	msg_get@PLT
 2194      00
 2195              	.LVL232:
 253:src/main.c    ****     hnd.print_msg(msg_reparsed); printf("\n\n");
 2196              		.loc 1 253 0
 2197 0ea9 FFB424D8 		pushq	472(%rsp)
 2197      010000
 2198              	.LCFI116:
 2199              		.cfi_def_cfa_offset 1912
 2200 0eb0 FFB424D8 		pushq	472(%rsp)
 2200      010000
 2201              	.LCFI117:
 2202              		.cfi_def_cfa_offset 1920
 2203 0eb7 FFB424D8 		pushq	472(%rsp)
 2203      010000
 2204              	.LCFI118:
 2205              		.cfi_def_cfa_offset 1928
 2206 0ebe FFB424D8 		pushq	472(%rsp)
GAS LISTING /tmp/ccypY4LQ.s 			page 70


 2206      010000
 2207              	.LCFI119:
 2208              		.cfi_def_cfa_offset 1936
 2209 0ec5 FF942418 		call	*792(%rsp)
 2209      030000
 2210              	.LVL233:
 2211              	.LBB358:
 2212              	.LBB359:
 2213              		.loc 2 104 0
 2214 0ecc 4883C420 		addq	$32, %rsp
 2215              	.LCFI120:
 2216              		.cfi_def_cfa_offset 1904
 2217 0ed0 488D3D00 		leaq	.LC20(%rip), %rdi
 2217      000000
 2218 0ed7 E8000000 		call	puts@PLT
 2218      00
 2219              	.LVL234:
 2220              	.LBE359:
 2221              	.LBE358:
 254:src/main.c    ****     obj_reparsed = msg_parser_get_obj(msg_reparsed, "wrapped_obj2");
 2222              		.loc 1 254 0
 2223 0edc 488DBC24 		leaq	480(%rsp), %rdi
 2223      E0010000 
 2224 0ee4 FFB424D8 		pushq	472(%rsp)
 2224      010000
 2225              	.LCFI121:
 2226              		.cfi_def_cfa_offset 1912
 2227 0eeb FFB424D8 		pushq	472(%rsp)
 2227      010000
 2228              	.LCFI122:
 2229              		.cfi_def_cfa_offset 1920
 2230 0ef2 FFB424D8 		pushq	472(%rsp)
 2230      010000
 2231              	.LCFI123:
 2232              		.cfi_def_cfa_offset 1928
 2233 0ef9 FFB424D8 		pushq	472(%rsp)
 2233      010000
 2234              	.LCFI124:
 2235              		.cfi_def_cfa_offset 1936
 2236 0f00 488D3500 		leaq	.LC75(%rip), %rsi
 2236      000000
 2237 0f07 E8000000 		call	msg_parser_get_obj@PLT
 2237      00
 2238              	.LVL235:
 255:src/main.c    ****     hnd.print_str(obj_reparsed.content); printf(" len: %d\n\n", obj_reparsed.content.len);
 2239              		.loc 1 255 0
 2240 0f0c 4883C420 		addq	$32, %rsp
 2241              	.LCFI125:
 2242              		.cfi_def_cfa_offset 1904
 2243 0f10 488BBC24 		movq	496(%rsp), %rdi
 2243      F0010000 
 2244 0f18 488BB424 		movq	504(%rsp), %rsi
 2244      F8010000 
 2245 0f20 FFD3     		call	*%rbx
 2246              	.LVL236:
 2247 0f22 0FB79424 		movzwl	504(%rsp), %edx
 2247      F8010000 
GAS LISTING /tmp/ccypY4LQ.s 			page 71


 2248              	.LVL237:
 2249              	.LBB360:
 2250              	.LBB361:
 2251              		.loc 2 104 0
 2252 0f2a 488D3500 		leaq	.LC44(%rip), %rsi
 2252      000000
 2253 0f31 BF010000 		movl	$1, %edi
 2253      00
 2254 0f36 B8000000 		movl	$0, %eax
 2254      00
 2255 0f3b E8000000 		call	__printf_chk@PLT
 2255      00
 2256              	.LVL238:
 2257              	.LBE361:
 2258              	.LBE360:
 258:src/main.c    ****     msg_parser_get_float(&f_val, obj_reparsed, "f2");
 2259              		.loc 1 258 0
 2260 0f40 488D7C24 		leaq	120(%rsp), %rdi
 2260      78
 2261 0f45 FFB424F8 		pushq	504(%rsp)
 2261      010000
 2262              	.LCFI126:
 2263              		.cfi_def_cfa_offset 1912
 2264 0f4c FFB424F8 		pushq	504(%rsp)
 2264      010000
 2265              	.LCFI127:
 2266              		.cfi_def_cfa_offset 1920
 2267 0f53 FFB424F8 		pushq	504(%rsp)
 2267      010000
 2268              	.LCFI128:
 2269              		.cfi_def_cfa_offset 1928
 2270 0f5a FFB424F8 		pushq	504(%rsp)
 2270      010000
 2271              	.LCFI129:
 2272              		.cfi_def_cfa_offset 1936
 2273 0f61 488D3500 		leaq	.LC73(%rip), %rsi
 2273      000000
 2274 0f68 E8000000 		call	msg_parser_get_float@PLT
 2274      00
 2275              	.LVL239:
 259:src/main.c    ****     msg_parser_get_int(&i_val, obj_reparsed, "i1");
 2276              		.loc 1 259 0
 2277 0f6d 4883C420 		addq	$32, %rsp
 2278              	.LCFI130:
 2279              		.cfi_def_cfa_offset 1904
 2280 0f71 488D7C24 		leaq	124(%rsp), %rdi
 2280      7C
 2281 0f76 FFB424F8 		pushq	504(%rsp)
 2281      010000
 2282              	.LCFI131:
 2283              		.cfi_def_cfa_offset 1912
 2284 0f7d FFB424F8 		pushq	504(%rsp)
 2284      010000
 2285              	.LCFI132:
 2286              		.cfi_def_cfa_offset 1920
 2287 0f84 FFB424F8 		pushq	504(%rsp)
 2287      010000
GAS LISTING /tmp/ccypY4LQ.s 			page 72


 2288              	.LCFI133:
 2289              		.cfi_def_cfa_offset 1928
 2290 0f8b FFB424F8 		pushq	504(%rsp)
 2290      010000
 2291              	.LCFI134:
 2292              		.cfi_def_cfa_offset 1936
 2293 0f92 488D3500 		leaq	.LC65(%rip), %rsi
 2293      000000
 2294 0f99 E8000000 		call	msg_parser_get_int@PLT
 2294      00
 2295              	.LVL240:
 260:src/main.c    ****     printf("reparsed $i = %d $f2 = %f\n\n", i_val, f_val);
 2296              		.loc 1 260 0
 2297 0f9e 660FEFC0 		pxor	%xmm0, %xmm0
 2298 0fa2 F30F5A84 		cvtss2sd	152(%rsp), %xmm0
 2298      24980000 
 2298      00
 2299              	.LVL241:
 2300              	.LBB362:
 2301              	.LBB363:
 2302              		.loc 2 104 0
 2303 0fab 4883C420 		addq	$32, %rsp
 2304              	.LCFI135:
 2305              		.cfi_def_cfa_offset 1904
 2306 0faf 8B54247C 		movl	124(%rsp), %edx
 2307 0fb3 488D3500 		leaq	.LC93(%rip), %rsi
 2307      000000
 2308 0fba BF010000 		movl	$1, %edi
 2308      00
 2309 0fbf B8010000 		movl	$1, %eax
 2309      00
 2310 0fc4 E8000000 		call	__printf_chk@PLT
 2310      00
 2311              	.LVL242:
 2312              	.LBE363:
 2313              	.LBE362:
 2314              	.LBB364:
 2315              	.LBB365:
 2316 0fc9 488D3D00 		leaq	.LC20(%rip), %rdi
 2316      000000
 2317 0fd0 E8000000 		call	puts@PLT
 2317      00
 2318              	.LVL243:
 2319              	.LBE365:
 2320              	.LBE364:
 2321              	.LBB366:
 2322              	.LBB367:
 2323 0fd5 488D3D00 		leaq	.LC94(%rip), %rdi
 2323      000000
 2324 0fdc E8000000 		call	puts@PLT
 2324      00
 2325              	.LVL244:
 2326              	.LBE367:
 2327              	.LBE366:
 2328              	.LBB368:
 2329              	.LBB369:
 2330              		.file 4 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
GAS LISTING /tmp/ccypY4LQ.s 			page 73


   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2018 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
GAS LISTING /tmp/ccypY4LQ.s 			page 74


  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 2331              		.loc 4 71 0
 2332 0fe1 B97D0000 		movl	$125, %ecx
 2332      00
 2333 0fe6 4889EF   		movq	%rbp, %rdi
 2334 0fe9 4C89E8   		movq	%r13, %rax
 2335 0fec F348AB   		rep stosq
 2336              	.LVL245:
 2337              	.LBE369:
 2338              	.LBE368:
 268:src/main.c    ****     common_buff.buff = buff;
 2339              		.loc 1 268 0
 2340 0fef 48892D00 		movq	%rbp, common_buff(%rip)
 2340      000000
 269:src/main.c    ****     common_buff.buff_size = 1000;
 2341              		.loc 1 269 0
 2342 0ff6 66C70500 		movw	$1000, 8+common_buff(%rip)
 2342      000000E8 
 2342      03
 271:src/main.c    ****     if(pthread_mutex_init(&outp_lock, NULL)) return 0;
 2343              		.loc 1 271 0
 2344 0fff BE000000 		movl	$0, %esi
 2344      00
 2345 1004 488D3D00 		leaq	outp_lock(%rip), %rdi
 2345      000000
 2346 100b E8000000 		call	pthread_mutex_init@PLT
 2346      00
 2347              	.LVL246:
 2348 1010 85C0     		testl	%eax, %eax
 2349 1012 7474     		je	.L33
 2350              	.LVL247:
 2351              	.L27:
 288:src/main.c    **** }
 2352              		.loc 1 288 0
 2353 1014 B8000000 		movl	$0, %eax
 2353      00
 2354 1019 488B8C24 		movq	1832(%rsp), %rcx
 2354      28070000 
 2355 1021 6448330C 		xorq	%fs:40, %rcx
 2355      25280000 
 2355      00
 2356 102a 0F850601 		jne	.L34
 2356      0000
 2357 1030 4881C438 		addq	$1848, %rsp
GAS LISTING /tmp/ccypY4LQ.s 			page 75


 2357      070000
 2358              	.LCFI136:
 2359              		.cfi_remember_state
 2360              		.cfi_def_cfa_offset 56
 2361 1037 5B       		popq	%rbx
 2362              	.LCFI137:
 2363              		.cfi_def_cfa_offset 48
 2364 1038 5D       		popq	%rbp
 2365              	.LCFI138:
 2366              		.cfi_def_cfa_offset 40
 2367 1039 415C     		popq	%r12
 2368              	.LCFI139:
 2369              		.cfi_def_cfa_offset 32
 2370 103b 415D     		popq	%r13
 2371              	.LCFI140:
 2372              		.cfi_def_cfa_offset 24
 2373 103d 415E     		popq	%r14
 2374              	.LCFI141:
 2375              		.cfi_def_cfa_offset 16
 2376 103f 415F     		popq	%r15
 2377              	.LCFI142:
 2378              		.cfi_def_cfa_offset 8
 2379 1041 C3       		ret
 2380              	.LVL248:
 2381              	.L20:
 2382              	.LCFI143:
 2383              		.cfi_restore_state
 2384              	.LBB370:
 2385              	.LBB371:
 2386              		.loc 2 104 0
 2387 1042 488D3D00 		leaq	.LC21(%rip), %rdi
 2387      000000
 2388 1049 E8000000 		call	puts@PLT
 2388      00
 2389              	.LVL249:
 2390 104e E9C7F0FF 		jmp	.L21
 2390      FF
 2391              	.LVL250:
 2392              	.L29:
 2393              	.LBE371:
 2394              	.LBE370:
  81:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 2395              		.loc 1 81 0
 2396 1053 488D1500 		leaq	.LC13(%rip), %rdx
 2396      000000
 2397 105a E903F1FF 		jmp	.L22
 2397      FF
 2398              	.L30:
  85:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 2399              		.loc 1 85 0
 2400 105f 488D1500 		leaq	.LC13(%rip), %rdx
 2400      000000
 2401 1066 E955F1FF 		jmp	.L23
 2401      FF
 2402              	.L31:
  89:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 2403              		.loc 1 89 0
GAS LISTING /tmp/ccypY4LQ.s 			page 76


 2404 106b 488D1500 		leaq	.LC13(%rip), %rdx
 2404      000000
 2405 1072 E9A7F1FF 		jmp	.L24
 2405      FF
 2406              	.L25:
 2407              	.LVL251:
 2408              	.LBB372:
 2409              	.LBB373:
 2410              		.loc 2 104 0
 2411 1077 488D3D00 		leaq	.LC45(%rip), %rdi
 2411      000000
 2412 107e E8000000 		call	puts@PLT
 2412      00
 2413              	.LVL252:
 2414 1083 E926F4FF 		jmp	.L26
 2414      FF
 2415              	.LVL253:
 2416              	.L33:
 2417              	.LBE373:
 2418              	.LBE372:
 273:src/main.c    ****     pthread_create(&thr_master, NULL, thread_mcu_master_fnc, (void *) &common_buff);
 2419              		.loc 1 273 0
 2420 1088 488D0D00 		leaq	common_buff(%rip), %rcx
 2420      000000
 2421 108f 488D1500 		leaq	thread_mcu_master_fnc(%rip), %rdx
 2421      000000
 2422 1096 BE000000 		movl	$0, %esi
 2422      00
 2423 109b 488D3D00 		leaq	thr_master(%rip), %rdi
 2423      000000
 2424 10a2 E8000000 		call	pthread_create@PLT
 2424      00
 2425              	.LVL254:
 274:src/main.c    ****     pthread_create(&thr_slave, NULL, thread_mcu_slave_fnc, (void *) &common_buff);
 2426              		.loc 1 274 0
 2427 10a7 488D0D00 		leaq	common_buff(%rip), %rcx
 2427      000000
 2428 10ae 488D1500 		leaq	thread_mcu_slave_fnc(%rip), %rdx
 2428      000000
 2429 10b5 BE000000 		movl	$0, %esi
 2429      00
 2430 10ba 488D3D00 		leaq	thr_slave(%rip), %rdi
 2430      000000
 2431 10c1 E8000000 		call	pthread_create@PLT
 2431      00
 2432              	.LVL255:
 277:src/main.c    ****     pthread_join(thr_master, NULL);
 2433              		.loc 1 277 0
 2434 10c6 BE000000 		movl	$0, %esi
 2434      00
 2435 10cb 488B3D00 		movq	thr_master(%rip), %rdi
 2435      000000
 2436 10d2 E8000000 		call	pthread_join@PLT
 2436      00
 2437              	.LVL256:
 278:src/main.c    ****     pthread_join(thr_slave, NULL);
 2438              		.loc 1 278 0
GAS LISTING /tmp/ccypY4LQ.s 			page 77


 2439 10d7 BE000000 		movl	$0, %esi
 2439      00
 2440 10dc 488B3D00 		movq	thr_slave(%rip), %rdi
 2440      000000
 2441 10e3 E8000000 		call	pthread_join@PLT
 2441      00
 2442              	.LVL257:
 279:src/main.c    ****     pthread_mutex_destroy(&outp_lock);
 2443              		.loc 1 279 0
 2444 10e8 488D3D00 		leaq	outp_lock(%rip), %rdi
 2444      000000
 2445 10ef E8000000 		call	pthread_mutex_destroy@PLT
 2445      00
 2446              	.LVL258:
 2447              	.LBB374:
 2448              	.LBB375:
 2449              		.loc 2 104 0
 2450 10f4 488D3D00 		leaq	.LC20(%rip), %rdi
 2450      000000
 2451 10fb E8000000 		call	puts@PLT
 2451      00
 2452              	.LVL259:
 2453              	.LBE375:
 2454              	.LBE374:
 284:src/main.c    ****     end = clock();
 2455              		.loc 1 284 0
 2456 1100 E8000000 		call	clock@PLT
 2456      00
 2457              	.LVL260:
 285:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 2458              		.loc 1 285 0
 2459 1105 482B4424 		subq	24(%rsp), %rax
 2459      18
 2460              	.LVL261:
 2461 110a 660FEFC0 		pxor	%xmm0, %xmm0
 2462 110e F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2462      C0
 2463 1113 F20F5E05 		divsd	.LC95(%rip), %xmm0
 2463      00000000 
 2464              	.LVL262:
 2465              	.LBB376:
 2466              	.LBB377:
 2467              		.loc 2 104 0
 2468 111b 488D3500 		leaq	.LC96(%rip), %rsi
 2468      000000
 2469 1122 BF010000 		movl	$1, %edi
 2469      00
 2470 1127 B8010000 		movl	$1, %eax
 2470      00
 2471 112c E8000000 		call	__printf_chk@PLT
 2471      00
 2472              	.LVL263:
 2473              	.LBE377:
 2474              	.LBE376:
 287:src/main.c    ****     return 0;
 2475              		.loc 1 287 0
 2476 1131 E9DEFEFF 		jmp	.L27
GAS LISTING /tmp/ccypY4LQ.s 			page 78


 2476      FF
 2477              	.L34:
 288:src/main.c    **** }
 2478              		.loc 1 288 0
 2479 1136 E8000000 		call	__stack_chk_fail@PLT
 2479      00
 2480              	.LVL264:
 2481              		.cfi_endproc
 2482              	.LFE68:
 2484              		.comm	common_buff,16,16
 2485              		.comm	thr_slave,8,8
 2486              		.comm	thr_master,8,8
 2487              		.comm	outp_lock,40,32
 2488              		.globl	test_str1
 2489              		.section	.data.test_str1,"aw",@progbits
 2490              		.align 32
 2493              	test_str1:
 2494 0000 23746573 		.string	"#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n\r@obj2  (
 2494      745F6D73 
 2494      677B3C43 
 2494      4D44313E 
 2494      09092040 
 2495              		.section	.rodata.cst4,"aM",@progbits,4
 2496              		.align 4
 2497              	.LC9:
 2498 0000 CDCC0142 		.long	1107414221
 2499              		.align 4
 2500              	.LC10:
 2501 0004 52B8EA41 		.long	1105901650
 2502              		.align 4
 2503              	.LC70:
 2504 0008 10069E3F 		.long	1067320848
 2505              		.align 4
 2506              	.LC74:
 2507 000c 9643ABBE 		.long	3198894998
 2508              		.section	.rodata.cst8,"aM",@progbits,8
 2509              		.align 8
 2510              	.LC95:
 2511 0000 00000000 		.long	0
 2512 0004 80842E41 		.long	1093567616
 2513              		.text
 2514              	.Letext0:
 2515              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 2516              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2517              		.file 7 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 2518              		.file 8 "/usr/include/stdio.h"
 2519              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2520              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 2521              		.file 11 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
 2522              		.file 12 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
 2523              		.file 13 "/usr/include/time.h"
 2524              		.file 14 "/usr/include/unistd.h"
 2525              		.file 15 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h"
 2526              		.file 16 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 2527              		.file 17 "inc/mcu_msg_cfg.h"
 2528              		.file 18 "inc/mcu_msg.h"
 2529              		.file 19 "/usr/include/pthread.h"
GAS LISTING /tmp/ccypY4LQ.s 			page 79


 2530              		.file 20 "<built-in>"
GAS LISTING /tmp/ccypY4LQ.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccypY4LQ.s:31     .text.thread_mcu_master_fnc:0000000000000000 thread_mcu_master_fnc
                            *COM*:0000000000000028 outp_lock
     /tmp/ccypY4LQ.s:323    .text.thread_mcu_slave_fnc:0000000000000000 thread_mcu_slave_fnc
     /tmp/ccypY4LQ.s:774    .text.main:0000000000000000 main
     /tmp/ccypY4LQ.s:2493   .data.test_str1:0000000000000000 test_str1
                            *COM*:0000000000000010 common_buff
                            *COM*:0000000000000008 thr_master
                            *COM*:0000000000000008 thr_slave
     /tmp/ccypY4LQ.s:5      .rodata.thread_mcu_master_fnc.str1.1:0000000000000000 .LC0
     /tmp/ccypY4LQ.s:7      .rodata.thread_mcu_master_fnc.str1.1:000000000000000b .LC1
     /tmp/ccypY4LQ.s:9      .rodata.thread_mcu_master_fnc.str1.1:0000000000000014 .LC2
     /tmp/ccypY4LQ.s:11     .rodata.thread_mcu_master_fnc.str1.1:000000000000001f .LC3
     /tmp/ccypY4LQ.s:13     .rodata.thread_mcu_master_fnc.str1.1:0000000000000029 .LC4
     /tmp/ccypY4LQ.s:15     .rodata.thread_mcu_master_fnc.str1.1:000000000000002e .LC5
     /tmp/ccypY4LQ.s:22     .rodata.thread_mcu_master_fnc.str1.1:0000000000000031 .LC7
     /tmp/ccypY4LQ.s:26     .rodata.thread_mcu_master_fnc.str1.8:0000000000000020 .LC8
     /tmp/ccypY4LQ.s:19     .rodata.thread_mcu_master_fnc.str1.8:0000000000000000 .LC6
     /tmp/ccypY4LQ.s:2497   .rodata.cst4:0000000000000000 .LC9
     /tmp/ccypY4LQ.s:2500   .rodata.cst4:0000000000000004 .LC10
     /tmp/ccypY4LQ.s:318    .rodata.thread_mcu_slave_fnc.str1.1:0000000000000000 .LC11
     /tmp/ccypY4LQ.s:571    .rodata.main.str1.1:000000000000000b .LC14
     /tmp/ccypY4LQ.s:573    .rodata.main.str1.1:000000000000001f .LC15
     /tmp/ccypY4LQ.s:575    .rodata.main.str1.1:0000000000000033 .LC16
     /tmp/ccypY4LQ.s:577    .rodata.main.str1.1:0000000000000046 .LC17
     /tmp/ccypY4LQ.s:579    .rodata.main.str1.1:000000000000005d .LC18
     /tmp/ccypY4LQ.s:583    .rodata.main.str1.8:0000000000000000 .LC19
     /tmp/ccypY4LQ.s:586    .rodata.main.str1.1:0000000000000066 .LC20
     /tmp/ccypY4LQ.s:590    .rodata.main.str1.1:000000000000007c .LC22
     /tmp/ccypY4LQ.s:592    .rodata.main.str1.1:0000000000000093 .LC23
     /tmp/ccypY4LQ.s:567    .rodata.main.str1.1:0000000000000000 .LC12
     /tmp/ccypY4LQ.s:594    .rodata.main.str1.1:0000000000000098 .LC24
     /tmp/ccypY4LQ.s:596    .rodata.main.str1.1:000000000000009d .LC25
     /tmp/ccypY4LQ.s:598    .rodata.main.str1.1:00000000000000b4 .LC26
     /tmp/ccypY4LQ.s:600    .rodata.main.str1.1:00000000000000b9 .LC27
     /tmp/ccypY4LQ.s:602    .rodata.main.str1.1:00000000000000d4 .LC28
     /tmp/ccypY4LQ.s:604    .rodata.main.str1.1:00000000000000dd .LC29
     /tmp/ccypY4LQ.s:606    .rodata.main.str1.1:00000000000000f0 .LC30
     /tmp/ccypY4LQ.s:610    .rodata.main.str1.8:0000000000000028 .LC31
     /tmp/ccypY4LQ.s:613    .rodata.main.str1.1:00000000000000f5 .LC32
     /tmp/ccypY4LQ.s:615    .rodata.main.str1.1:0000000000000108 .LC33
     /tmp/ccypY4LQ.s:619    .rodata.main.str1.8:0000000000000050 .LC34
     /tmp/ccypY4LQ.s:622    .rodata.main.str1.8:0000000000000078 .LC35
     /tmp/ccypY4LQ.s:625    .rodata.main.str1.1:000000000000010d .LC37
     /tmp/ccypY4LQ.s:627    .rodata.main.str1.1:0000000000000113 .LC38
     /tmp/ccypY4LQ.s:631    .rodata.main.str1.8:00000000000000a0 .LC39
     /tmp/ccypY4LQ.s:634    .rodata.main.str1.1:0000000000000126 .LC40
     /tmp/ccypY4LQ.s:636    .rodata.main.str1.1:000000000000012c .LC41
     /tmp/ccypY4LQ.s:640    .rodata.main.str1.8:00000000000000c0 .LC42
     /tmp/ccypY4LQ.s:643    .rodata.main.str1.1:0000000000000142 .LC43
     /tmp/ccypY4LQ.s:645    .rodata.main.str1.1:0000000000000148 .LC44
     /tmp/ccypY4LQ.s:649    .rodata.main.str1.1:0000000000000169 .LC46
     /tmp/ccypY4LQ.s:651    .rodata.main.str1.1:000000000000017e .LC47
     /tmp/ccypY4LQ.s:653    .rodata.main.str1.1:0000000000000193 .LC48
     /tmp/ccypY4LQ.s:655    .rodata.main.str1.1:000000000000019f .LC49
     /tmp/ccypY4LQ.s:657    .rodata.main.str1.1:00000000000001b2 .LC50
GAS LISTING /tmp/ccypY4LQ.s 			page 81


     /tmp/ccypY4LQ.s:659    .rodata.main.str1.1:00000000000001bf .LC51
     /tmp/ccypY4LQ.s:661    .rodata.main.str1.1:00000000000001d2 .LC52
     /tmp/ccypY4LQ.s:663    .rodata.main.str1.1:00000000000001e5 .LC53
     /tmp/ccypY4LQ.s:665    .rodata.main.str1.1:00000000000001ea .LC54
     /tmp/ccypY4LQ.s:667    .rodata.main.str1.1:00000000000001fd .LC55
     /tmp/ccypY4LQ.s:669    .rodata.main.str1.1:0000000000000210 .LC56
     /tmp/ccypY4LQ.s:671    .rodata.main.str1.1:0000000000000215 .LC57
     /tmp/ccypY4LQ.s:673    .rodata.main.str1.1:0000000000000225 .LC58
     /tmp/ccypY4LQ.s:677    .rodata.main.str1.8:00000000000000e8 .LC59
     /tmp/ccypY4LQ.s:680    .rodata.main.str1.8:0000000000000118 .LC60
     /tmp/ccypY4LQ.s:683    .rodata.main.str1.1:000000000000022a .LC61
     /tmp/ccypY4LQ.s:685    .rodata.main.str1.1:0000000000000233 .LC62
     /tmp/ccypY4LQ.s:687    .rodata.main.str1.1:0000000000000246 .LC63
     /tmp/ccypY4LQ.s:689    .rodata.main.str1.1:0000000000000249 .LC64
     /tmp/ccypY4LQ.s:691    .rodata.main.str1.1:0000000000000258 .LC65
     /tmp/ccypY4LQ.s:693    .rodata.main.str1.1:000000000000025b .LC66
     /tmp/ccypY4LQ.s:695    .rodata.main.str1.1:000000000000026e .LC67
     /tmp/ccypY4LQ.s:697    .rodata.main.str1.1:0000000000000274 .LC68
     /tmp/ccypY4LQ.s:2503   .rodata.cst4:0000000000000008 .LC70
     /tmp/ccypY4LQ.s:699    .rodata.main.str1.1:0000000000000277 .LC69
     /tmp/ccypY4LQ.s:701    .rodata.main.str1.1:000000000000027a .LC71
     /tmp/ccypY4LQ.s:703    .rodata.main.str1.1:000000000000028f .LC72
     /tmp/ccypY4LQ.s:2506   .rodata.cst4:000000000000000c .LC74
     /tmp/ccypY4LQ.s:705    .rodata.main.str1.1:0000000000000297 .LC73
     /tmp/ccypY4LQ.s:707    .rodata.main.str1.1:000000000000029a .LC75
     /tmp/ccypY4LQ.s:711    .rodata.main.str1.8:0000000000000148 .LC76
     /tmp/ccypY4LQ.s:714    .rodata.main.str1.8:0000000000000188 .LC77
     /tmp/ccypY4LQ.s:717    .rodata.main.str1.8:00000000000001b0 .LC78
     /tmp/ccypY4LQ.s:720    .rodata.main.str1.8:00000000000001e0 .LC79
     /tmp/ccypY4LQ.s:723    .rodata.main.str1.8:0000000000000210 .LC80
     /tmp/ccypY4LQ.s:726    .rodata.main.str1.8:0000000000000238 .LC81
     /tmp/ccypY4LQ.s:729    .rodata.main.str1.8:0000000000000260 .LC82
     /tmp/ccypY4LQ.s:732    .rodata.main.str1.8:0000000000000288 .LC83
     /tmp/ccypY4LQ.s:735    .rodata.main.str1.8:00000000000002b0 .LC84
     /tmp/ccypY4LQ.s:738    .rodata.main.str1.8:00000000000002e0 .LC85
     /tmp/ccypY4LQ.s:741    .rodata.main.str1.8:0000000000000310 .LC86
     /tmp/ccypY4LQ.s:744    .rodata.main.str1.1:00000000000002a7 .LC87
     /tmp/ccypY4LQ.s:746    .rodata.main.str1.1:00000000000002b8 .LC88
     /tmp/ccypY4LQ.s:748    .rodata.main.str1.1:00000000000002c9 .LC89
     /tmp/ccypY4LQ.s:752    .rodata.main.str1.8:0000000000000340 .LC90
     /tmp/ccypY4LQ.s:755    .rodata.main.str1.1:00000000000002e2 .LC91
     /tmp/ccypY4LQ.s:759    .rodata.main.str1.8:0000000000000368 .LC92
     /tmp/ccypY4LQ.s:762    .rodata.main.str1.1:00000000000002f2 .LC93
     /tmp/ccypY4LQ.s:766    .rodata.main.str1.8:0000000000000398 .LC94
     /tmp/ccypY4LQ.s:588    .rodata.main.str1.1:0000000000000068 .LC21
     /tmp/ccypY4LQ.s:569    .rodata.main.str1.1:0000000000000005 .LC13
     /tmp/ccypY4LQ.s:647    .rodata.main.str1.1:0000000000000153 .LC45
     /tmp/ccypY4LQ.s:2510   .rodata.cst8:0000000000000000 .LC95
     /tmp/ccypY4LQ.s:769    .rodata.main.str1.1:000000000000030e .LC96

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
putchar
msg_hnd_create
msg_wrapper_init_msg
msg_wrapper_init_cmd
msg_wrapper_add_cmd_to_msg
GAS LISTING /tmp/ccypY4LQ.s 			page 82


pthread_mutex_lock
__printf_chk
pthread_mutex_unlock
msg_get
usleep
msg_parser_get_obj
msg_parser_get_float
__stack_chk_fail
msg_wrapper_init_obj
msg_wrapper_init_float
msg_wrapper_add_float_to_obj
msg_wrapper_add_object_to_msg
msg_parser_get_cmd
clock
puts
msg_parser_get_int
msg_parser_get_string
msg_wrapper_init_string
stdout
_IO_putc
msg_wrapper_add_string_to_obj
msg_wrapper_init_int
msg_wrapper_add_int_to_obj
msg_wrapper_rm_string_from_obj
msg_wrapper_rm_float_from_obj
msg_wrapper_rm_int_from_obj
msg_wrapper_rm_obj_from_msg
msg_wrapper_rm_cmd_from_msg
pthread_mutex_init
pthread_create
pthread_join
pthread_mutex_destroy
