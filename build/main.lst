GAS LISTING /tmp/ccWN1hS6.s 			page 1


   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.main.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 54455354 		.string	"TEST mcu-msg-wrapper"
   6      206D6375 
   6      2D6D7367 
   6      2D777261 
   6      70706572 
   7              	.LC1:
   8 0015 2D2D2D2D 		.string	"-------------------"
   8      2D2D2D2D 
   8      2D2D2D2D 
   8      2D2D2D2D 
   8      2D2D2D00 
   9              	.LC2:
  10 0029 77726170 		.string	"wrapped_msg"
  10      7065645F 
  10      6D736700 
  11              	.LC3:
  12 0035 77726170 		.string	"wrapped_obj1"
  12      7065645F 
  12      6F626A31 
  12      00
  13              	.LC4:
  14 0042 54686973 		.string	"This is \"string 1\""
  14      20697320 
  14      22737472 
  14      696E6720 
  14      312200
  15              	.LC5:
  16 0055 73747231 		.string	"str1"
  16      00
  17              	.LC6:
  18 005a 54686973 		.string	"This is \"string 2\""
  18      20697320 
  18      22737472 
  18      696E6720 
  18      322200
  19              	.LC7:
  20 006d 73747232 		.string	"str2"
  20      00
  21              	.LC8:
  22 0072 2E2E2E2E 		.string	".... \"string 3\""
  22      20227374 
  22      72696E67 
  22      20332200 
  23              	.LC9:
  24 0082 73747233 		.string	"str3"
  24      00
  25              	.LC10:
  26 0087 434D445F 		.string	"CMD_WRAP"
  26      57524150 
  26      00
  27              	.LC11:
  28 0090 693100   		.string	"i1"
GAS LISTING /tmp/ccWN1hS6.s 			page 2


  29              	.LC12:
  30 0093 693200   		.string	"i2"
  31              	.LC13:
  32 0096 663100   		.string	"f1"
  33              	.LC15:
  34 0099 663200   		.string	"f2"
  35              	.LC17:
  36 009c 77726170 		.string	"wrapped_obj2"
  36      7065645F 
  36      6F626A32 
  36      00
  37              	.LC19:
  38 00a9 45786563 		.string	"Execution time: %f s\n"
  38      7574696F 
  38      6E207469 
  38      6D653A20 
  38      25662073 
  39              		.section	.text.main,"ax",@progbits
  40              		.globl	main
  42              	main:
  43              	.LFB56:
  44              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author Istvan Milak (istvan.milak@gmail.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2019-12-15
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright Copyright (c) 2019
   9:src/main.c    ****  * 
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stdio.h>
  13:src/main.c    **** #include <stdlib.h>
  14:src/main.c    **** #include <string.h>
  15:src/main.c    **** #include <time.h>
  16:src/main.c    **** #include "mcu_msg.h"
  17:src/main.c    **** 
  18:src/main.c    **** /*string printer on i386*/
  19:src/main.c    **** 
  20:src/main.c    **** const char *test_str1 = "#test_msg{<CMD1>\t\t @obj1($key11 =\t-1123334567  ; $key12 = 'string \"val
  21:src/main.c    **** \r@obj2  ($key21 =   -1.123456789; $key22   = 'val22'; $key23 = 1000; $key24 = 12.34)<CMD_last>}";
  22:src/main.c    **** 
  23:src/main.c    **** 
  24:src/main.c    **** void print_int(int i);
  25:src/main.c    **** void print_float(float f, uint8_t prec);
  26:src/main.c    **** 
  27:src/main.c    **** int main()
  28:src/main.c    **** {
  45              		.loc 1 28 0
  46              		.cfi_startproc
  47 0000 4155     		pushq	%r13
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 16
  50              		.cfi_offset 13, -16
  51 0002 4154     		pushq	%r12
GAS LISTING /tmp/ccWN1hS6.s 			page 3


  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 24
  54              		.cfi_offset 12, -24
  55 0004 55       		pushq	%rbp
  56              	.LCFI2:
  57              		.cfi_def_cfa_offset 32
  58              		.cfi_offset 6, -32
  59 0005 53       		pushq	%rbx
  60              	.LCFI3:
  61              		.cfi_def_cfa_offset 40
  62              		.cfi_offset 3, -40
  63 0006 4881EC38 		subq	$568, %rsp
  63      020000
  64              	.LCFI4:
  65              		.cfi_def_cfa_offset 608
  66              		.loc 1 28 0
  67 000d 64488B04 		movq	%fs:40, %rax
  67      25280000 
  67      00
  68 0016 48898424 		movq	%rax, 552(%rsp)
  68      28020000 
  69 001e 31C0     		xorl	%eax, %eax
  29:src/main.c    ****     /*start the clock*/
  30:src/main.c    ****     clock_t begin = clock();
  70              		.loc 1 30 0
  71 0020 E8000000 		call	clock@PLT
  71      00
  72              	.LVL0:
  73 0025 4989C5   		movq	%rax, %r13
  74              	.LVL1:
  75              	.LBB10:
  76              	.LBB11:
  77              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
GAS LISTING /tmp/ccWN1hS6.s 			page 4


  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
GAS LISTING /tmp/ccWN1hS6.s 			page 5


  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  78              		.loc 2 104 0
  79 0028 488D3D00 		leaq	.LC0(%rip), %rdi
  79      000000
  80 002f E8000000 		call	puts@PLT
  80      00
  81              	.LVL2:
  82              	.LBE11:
  83              	.LBE10:
  84              	.LBB12:
  85              	.LBB13:
  86 0034 488D3D00 		leaq	.LC1(%rip), %rdi
  86      000000
  87 003b E8000000 		call	puts@PLT
  87      00
  88              	.LVL3:
  89              	.LBE13:
  90              	.LBE12:
  31:src/main.c    ****     clock_t end;
  32:src/main.c    ****     double exec_time = 0.0;
  33:src/main.c    **** 
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  37:src/main.c    **** //                                 MCU-MSG Parser test                                       //
  38:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  39:src/main.c    **** 
  40:src/main.c    ****     // mmsg_t msg;
  41:src/main.c    ****     // mmsg_obj_t obj1, obj2;
  42:src/main.c    ****     // mmsg_cmd_t cmd;
  43:src/main.c    ****     // mmsg_string_hnd_t str_hnd = mmsg_string_hnd_create(putchar);
  44:src/main.c    ****     
  45:src/main.c    ****     // printf("TEST mcu-msg-parser\n");
  46:src/main.c    ****     // printf("-------------------\n");
  47:src/main.c    **** 
GAS LISTING /tmp/ccWN1hS6.s 			page 6


  48:src/main.c    ****     // printf("test_str1 = \"%s\"\n\n", test_str1);
  49:src/main.c    **** 
  50:src/main.c    ****     // //##########################################################################################
  51:src/main.c    ****     // printf(">> getting test_msg...\n");
  52:src/main.c    ****     // msg = mmsg_get(test_str1, "test_msg", strlen(test_str1));
  53:src/main.c    ****     // if(msg.content.s != NULL) {
  54:src/main.c    ****     //     printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
  55:src/main.c    ****     //     str_hnd.print(msg.id);
  56:src/main.c    ****     //     printf(":");
  57:src/main.c    ****     //     str_hnd.print(msg.content);
  58:src/main.c    ****     //     printf("\n\n");
  59:src/main.c    ****     // } else {
  60:src/main.c    ****     //     printf("message not found!\n\n");
  61:src/main.c    ****     // }
  62:src/main.c    **** 
  63:src/main.c    ****     // //##########################################################################################
  64:src/main.c    ****     // printf(">> getting CMD1 cmd...\n");
  65:src/main.c    ****     // cmd = mmsg_parser_get_cmd(msg, "CMD1");
  66:src/main.c    ****     // printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  67:src/main.c    **** 
  68:src/main.c    ****     // printf(">> getting CMD2 cmd...\n");
  69:src/main.c    ****     // cmd = mmsg_parser_get_cmd(msg, "CMD2");
  70:src/main.c    ****     // printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  71:src/main.c    **** 
  72:src/main.c    ****     // printf(">> getting CMD_last cmd...\n");
  73:src/main.c    ****     // cmd = mmsg_parser_get_cmd(msg, "CMD_last");
  74:src/main.c    ****     // printf("%s\n\n", cmd.cmd.s ? "True" : "False");
  75:src/main.c    **** 
  76:src/main.c    ****     // //##########################################################################################
  77:src/main.c    ****     // printf(">> getting obj1...\n");
  78:src/main.c    ****     // obj1 = mmsg_parser_get_obj(msg, "obj1");
  79:src/main.c    ****     // printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
  80:src/main.c    ****     // str_hnd.print(obj1.id); printf(":"); str_hnd.print(obj1.content);
  81:src/main.c    ****     // printf("\n\n");
  82:src/main.c    **** 
  83:src/main.c    ****     // //##########################################################################################
  84:src/main.c    ****     // printf(">> getting obj2...\n");
  85:src/main.c    ****     // obj2 = mmsg_parser_get_obj(msg, "obj2");
  86:src/main.c    ****     // printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
  87:src/main.c    ****     // str_hnd.print(obj2.id); printf(":"); str_hnd.print(obj2.content);
  88:src/main.c    ****     // printf("\n\n");
  89:src/main.c    ****     
  90:src/main.c    ****     // //##########################################################################################
  91:src/main.c    ****     // printf(">> getting obj1->key11 integer...\n");
  92:src/main.c    ****     // int ival = 0, res;
  93:src/main.c    ****     // float fval = 0.0;
  94:src/main.c    ****     // res = mmsg_parser_get_int(&ival, obj1, "key11");
  95:src/main.c    ****     // printf("r = %d ival = %d\n\n", res, ival);
  96:src/main.c    ****     
  97:src/main.c    ****     // //##########################################################################################
  98:src/main.c    ****     // printf(">> getting obj2->key21 float...\n");
  99:src/main.c    ****     // res = mmsg_parser_get_float(&fval, obj2, "key21");
 100:src/main.c    ****     // printf("r = %d fval = %.11f\n\n", res, fval);
 101:src/main.c    **** 
 102:src/main.c    ****     // //##########################################################################################
 103:src/main.c    ****     // printf(">> getting obj1->key12 string...\n");
 104:src/main.c    ****     // mmsg_string_t str = mmsg_parser_get_string(obj1, "key12");
GAS LISTING /tmp/ccWN1hS6.s 			page 7


 105:src/main.c    ****     // if(str.s != NULL) {
 106:src/main.c    ****     //     str_hnd.print(str); printf(" len: %d\n\n", str.len);
 107:src/main.c    ****     // } else {
 108:src/main.c    ****     //     printf("error getting string\n\n");
 109:src/main.c    ****     // }
 110:src/main.c    ****     
 111:src/main.c    ****     
 112:src/main.c    **** 
 113:src/main.c    **** 
 114:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 115:src/main.c    **** //                                 MCU-MSG Wrapper test                                      //
 116:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 117:src/main.c    ****     
 118:src/main.c    ****     // print_int(-2147483648L);
 119:src/main.c    ****     // putchar('\n');
 120:src/main.c    ****     // print_int(2147483647L);
 121:src/main.c    ****     // putchar('\n');
 122:src/main.c    ****     // print_int(-456L);
 123:src/main.c    ****     // putchar('\n');
 124:src/main.c    ****     // print_float(1.234, 3);
 125:src/main.c    ****     // putchar('\n');
 126:src/main.c    ****     // printf("printf(1.234) = %.3f\n", 1.234);
 127:src/main.c    ****     // print_float(-456.823456, 8);
 128:src/main.c    ****     // putchar('\n');
 129:src/main.c    ****     // printf("printf(-456.823456) = %.6f\n", -456.823456);
 130:src/main.c    ****     
 131:src/main.c    ****     printf("TEST mcu-msg-wrapper\n");
 132:src/main.c    ****     printf("-------------------\n");
 133:src/main.c    **** 
 134:src/main.c    ****     mmsg_wrap_hnd_t wrapper_hnd = mmsg_wrapper_hnd_create(putchar);
  91              		.loc 1 134 0
  92 0040 488D7C24 		leaq	112(%rsp), %rdi
  92      70
  93 0045 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
  93      000000
  94 004c E8000000 		call	mmsg_wrapper_hnd_create@PLT
  94      00
  95              	.LVL4:
 135:src/main.c    ****     mmsg_wrap_t msg_wrap;
 136:src/main.c    ****     mmsg_obj_wrap_t obj1_wrap, obj2_wrap;
 137:src/main.c    ****     mmsg_string_wrap_t str1, str2, str3;
 138:src/main.c    ****     mmsg_int_wrap_t i1, i2;
 139:src/main.c    ****     mmsg_float_wrap_t f1, f2;
 140:src/main.c    ****     mmsg_cmd_wrap_t cmd_wrap;
 141:src/main.c    ****     // const char * cmd_str = "CMD_BLABLA";
 142:src/main.c    **** 
 143:src/main.c    ****     msg_wrap = mmsg_wrapper_init_msg("wrapped_msg");
  96              		.loc 1 143 0
  97 0051 488D7C24 		leaq	48(%rsp), %rdi
  97      30
  98 0056 488D3500 		leaq	.LC2(%rip), %rsi
  98      000000
  99 005d E8000000 		call	mmsg_wrapper_init_msg@PLT
  99      00
 100              	.LVL5:
 101 0062 488B4424 		movq	48(%rsp), %rax
 101      30
GAS LISTING /tmp/ccWN1hS6.s 			page 8


 102 0067 488B5424 		movq	56(%rsp), %rdx
 102      38
 103 006c 48898424 		movq	%rax, 144(%rsp)
 103      90000000 
 104 0074 48899424 		movq	%rdx, 152(%rsp)
 104      98000000 
 105 007c 488B4424 		movq	64(%rsp), %rax
 105      40
 106 0081 488B5424 		movq	72(%rsp), %rdx
 106      48
 107 0086 48898424 		movq	%rax, 160(%rsp)
 107      A0000000 
 108 008e 48899424 		movq	%rdx, 168(%rsp)
 108      A8000000 
 144:src/main.c    ****     obj1_wrap = mmsg_wrapper_init_obj("wrapped_obj1");
 109              		.loc 1 144 0
 110 0096 4889E3   		movq	%rsp, %rbx
 111 0099 488D3500 		leaq	.LC3(%rip), %rsi
 111      000000
 112 00a0 4889DF   		movq	%rbx, %rdi
 113 00a3 E8000000 		call	mmsg_wrapper_init_obj@PLT
 113      00
 114              	.LVL6:
 115 00a8 488B0424 		movq	(%rsp), %rax
 116 00ac 488B5424 		movq	8(%rsp), %rdx
 116      08
 117 00b1 48898424 		movq	%rax, 448(%rsp)
 117      C0010000 
 118 00b9 48899424 		movq	%rdx, 456(%rsp)
 118      C8010000 
 119 00c1 488B4424 		movq	16(%rsp), %rax
 119      10
 120 00c6 488B5424 		movq	24(%rsp), %rdx
 120      18
 121 00cb 48898424 		movq	%rax, 464(%rsp)
 121      D0010000 
 122 00d3 48899424 		movq	%rdx, 472(%rsp)
 122      D8010000 
 123 00db 488B4424 		movq	32(%rsp), %rax
 123      20
 124 00e0 488B5424 		movq	40(%rsp), %rdx
 124      28
 125 00e5 48898424 		movq	%rax, 480(%rsp)
 125      E0010000 
 126 00ed 48899424 		movq	%rdx, 488(%rsp)
 126      E8010000 
 145:src/main.c    ****     str1 = mmsg_wrapper_init_string("str1", "This is \"string 1\"");
 127              		.loc 1 145 0
 128 00f5 488D1500 		leaq	.LC4(%rip), %rdx
 128      000000
 129 00fc 488D3500 		leaq	.LC5(%rip), %rsi
 129      000000
 130 0103 4889DF   		movq	%rbx, %rdi
 131 0106 E8000000 		call	mmsg_wrapper_init_string@PLT
 131      00
 132              	.LVL7:
 133 010b 488B0424 		movq	(%rsp), %rax
GAS LISTING /tmp/ccWN1hS6.s 			page 9


 134 010f 488B5424 		movq	8(%rsp), %rdx
 134      08
 135 0114 48898424 		movq	%rax, 304(%rsp)
 135      30010000 
 136 011c 48899424 		movq	%rdx, 312(%rsp)
 136      38010000 
 137 0124 488B4424 		movq	16(%rsp), %rax
 137      10
 138 0129 488B5424 		movq	24(%rsp), %rdx
 138      18
 139 012e 48898424 		movq	%rax, 320(%rsp)
 139      40010000 
 140 0136 48899424 		movq	%rdx, 328(%rsp)
 140      48010000 
 141 013e 488B4424 		movq	32(%rsp), %rax
 141      20
 142 0143 48898424 		movq	%rax, 336(%rsp)
 142      50010000 
 146:src/main.c    ****     str2 = mmsg_wrapper_init_string("str2", "This is \"string 2\"");
 143              		.loc 1 146 0
 144 014b 488D1500 		leaq	.LC6(%rip), %rdx
 144      000000
 145 0152 488D3500 		leaq	.LC7(%rip), %rsi
 145      000000
 146 0159 4889DF   		movq	%rbx, %rdi
 147 015c E8000000 		call	mmsg_wrapper_init_string@PLT
 147      00
 148              	.LVL8:
 149 0161 488B0424 		movq	(%rsp), %rax
 150 0165 488B5424 		movq	8(%rsp), %rdx
 150      08
 151 016a 48898424 		movq	%rax, 352(%rsp)
 151      60010000 
 152 0172 48899424 		movq	%rdx, 360(%rsp)
 152      68010000 
 153 017a 488B4424 		movq	16(%rsp), %rax
 153      10
 154 017f 488B5424 		movq	24(%rsp), %rdx
 154      18
 155 0184 48898424 		movq	%rax, 368(%rsp)
 155      70010000 
 156 018c 48899424 		movq	%rdx, 376(%rsp)
 156      78010000 
 157 0194 488B4424 		movq	32(%rsp), %rax
 157      20
 158 0199 48898424 		movq	%rax, 384(%rsp)
 158      80010000 
 147:src/main.c    ****     str3 = mmsg_wrapper_init_string("str3", ".... \"string 3\"");
 159              		.loc 1 147 0
 160 01a1 488D1500 		leaq	.LC8(%rip), %rdx
 160      000000
 161 01a8 488D3500 		leaq	.LC9(%rip), %rsi
 161      000000
 162 01af 4889DF   		movq	%rbx, %rdi
 163 01b2 E8000000 		call	mmsg_wrapper_init_string@PLT
 163      00
 164              	.LVL9:
GAS LISTING /tmp/ccWN1hS6.s 			page 10


 165 01b7 488B0424 		movq	(%rsp), %rax
 166 01bb 488B5424 		movq	8(%rsp), %rdx
 166      08
 167 01c0 48898424 		movq	%rax, 400(%rsp)
 167      90010000 
 168 01c8 48899424 		movq	%rdx, 408(%rsp)
 168      98010000 
 169 01d0 488B4424 		movq	16(%rsp), %rax
 169      10
 170 01d5 488B5424 		movq	24(%rsp), %rdx
 170      18
 171 01da 48898424 		movq	%rax, 416(%rsp)
 171      A0010000 
 172 01e2 48899424 		movq	%rdx, 424(%rsp)
 172      A8010000 
 173 01ea 488B4424 		movq	32(%rsp), %rax
 173      20
 174 01ef 48898424 		movq	%rax, 432(%rsp)
 174      B0010000 
 148:src/main.c    ****     
 149:src/main.c    ****     /* Preapare object */
 150:src/main.c    ****     // mmsg_wrapper_add_string_to_obj(&obj1_wrap, &str1);
 151:src/main.c    ****     mmsg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 175              		.loc 1 151 0
 176 01f7 488DB424 		leaq	352(%rsp), %rsi
 176      60010000 
 177 01ff 4C8DA424 		leaq	448(%rsp), %r12
 177      C0010000 
 178 0207 4C89E7   		movq	%r12, %rdi
 179 020a E8000000 		call	mmsg_wrapper_add_string_to_obj@PLT
 179      00
 180              	.LVL10:
 152:src/main.c    ****     mmsg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 181              		.loc 1 152 0
 182 020f 488DB424 		leaq	400(%rsp), %rsi
 182      90010000 
 183 0217 4C89E7   		movq	%r12, %rdi
 184 021a E8000000 		call	mmsg_wrapper_add_string_to_obj@PLT
 184      00
 185              	.LVL11:
 153:src/main.c    **** 
 154:src/main.c    ****     mmsg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 186              		.loc 1 154 0
 187 021f 488DAC24 		leaq	144(%rsp), %rbp
 187      90000000 
 188 0227 4C89E6   		movq	%r12, %rsi
 189 022a 4889EF   		movq	%rbp, %rdi
 190 022d E8000000 		call	mmsg_wrapper_add_object_to_msg@PLT
 190      00
 191              	.LVL12:
 155:src/main.c    **** 
 156:src/main.c    ****     cmd_wrap = mmsg_wrapper_init_cmd("CMD_WRAP");
 192              		.loc 1 156 0
 193 0232 488D3500 		leaq	.LC10(%rip), %rsi
 193      000000
 194 0239 4889DF   		movq	%rbx, %rdi
 195 023c E8000000 		call	mmsg_wrapper_init_cmd@PLT
GAS LISTING /tmp/ccWN1hS6.s 			page 11


 195      00
 196              	.LVL13:
 197 0241 488B0424 		movq	(%rsp), %rax
 198 0245 488B5424 		movq	8(%rsp), %rdx
 198      08
 199 024a 48894424 		movq	%rax, 80(%rsp)
 199      50
 200 024f 48895424 		movq	%rdx, 88(%rsp)
 200      58
 201 0254 488B4424 		movq	16(%rsp), %rax
 201      10
 202 0259 48894424 		movq	%rax, 96(%rsp)
 202      60
 157:src/main.c    ****     i1 = mmsg_wrapper_init_int("i1", 0);
 203              		.loc 1 157 0
 204 025e BA000000 		movl	$0, %edx
 204      00
 205 0263 488D3500 		leaq	.LC11(%rip), %rsi
 205      000000
 206 026a 4889DF   		movq	%rbx, %rdi
 207 026d E8000000 		call	mmsg_wrapper_init_int@PLT
 207      00
 208              	.LVL14:
 209 0272 488B0424 		movq	(%rsp), %rax
 210 0276 488B5424 		movq	8(%rsp), %rdx
 210      08
 211 027b 48898424 		movq	%rax, 176(%rsp)
 211      B0000000 
 212 0283 48899424 		movq	%rdx, 184(%rsp)
 212      B8000000 
 213 028b 488B4424 		movq	16(%rsp), %rax
 213      10
 214 0290 488B5424 		movq	24(%rsp), %rdx
 214      18
 215 0295 48898424 		movq	%rax, 192(%rsp)
 215      C0000000 
 216 029d 48899424 		movq	%rdx, 200(%rsp)
 216      C8000000 
 158:src/main.c    ****     i2 = mmsg_wrapper_init_int("i2", 456789);
 217              		.loc 1 158 0
 218 02a5 BA55F806 		movl	$456789, %edx
 218      00
 219 02aa 488D3500 		leaq	.LC12(%rip), %rsi
 219      000000
 220 02b1 4889DF   		movq	%rbx, %rdi
 221 02b4 E8000000 		call	mmsg_wrapper_init_int@PLT
 221      00
 222              	.LVL15:
 223 02b9 488B0424 		movq	(%rsp), %rax
 224 02bd 488B5424 		movq	8(%rsp), %rdx
 224      08
 225 02c2 48898424 		movq	%rax, 208(%rsp)
 225      D0000000 
 226 02ca 48899424 		movq	%rdx, 216(%rsp)
 226      D8000000 
 227 02d2 488B4424 		movq	16(%rsp), %rax
 227      10
GAS LISTING /tmp/ccWN1hS6.s 			page 12


 228 02d7 488B5424 		movq	24(%rsp), %rdx
 228      18
 229 02dc 48898424 		movq	%rax, 224(%rsp)
 229      E0000000 
 230 02e4 48899424 		movq	%rdx, 232(%rsp)
 230      E8000000 
 159:src/main.c    ****     f1 = mmsg_wrapper_init_float("f1", 1.23456, 6);
 231              		.loc 1 159 0
 232 02ec BA060000 		movl	$6, %edx
 232      00
 233 02f1 F30F1005 		movss	.LC14(%rip), %xmm0
 233      00000000 
 234 02f9 488D3500 		leaq	.LC13(%rip), %rsi
 234      000000
 235 0300 4889DF   		movq	%rbx, %rdi
 236 0303 E8000000 		call	mmsg_wrapper_init_float@PLT
 236      00
 237              	.LVL16:
 238 0308 488B0424 		movq	(%rsp), %rax
 239 030c 488B5424 		movq	8(%rsp), %rdx
 239      08
 240 0311 48898424 		movq	%rax, 240(%rsp)
 240      F0000000 
 241 0319 48899424 		movq	%rdx, 248(%rsp)
 241      F8000000 
 242 0321 488B4424 		movq	16(%rsp), %rax
 242      10
 243 0326 488B5424 		movq	24(%rsp), %rdx
 243      18
 244 032b 48898424 		movq	%rax, 256(%rsp)
 244      00010000 
 245 0333 48899424 		movq	%rdx, 264(%rsp)
 245      08010000 
 160:src/main.c    ****     f2 = mmsg_wrapper_init_float("f2", -0.3345, 6);
 246              		.loc 1 160 0
 247 033b BA060000 		movl	$6, %edx
 247      00
 248 0340 F30F1005 		movss	.LC16(%rip), %xmm0
 248      00000000 
 249 0348 488D3500 		leaq	.LC15(%rip), %rsi
 249      000000
 250 034f 4889DF   		movq	%rbx, %rdi
 251 0352 E8000000 		call	mmsg_wrapper_init_float@PLT
 251      00
 252              	.LVL17:
 253 0357 488B0424 		movq	(%rsp), %rax
 254 035b 488B5424 		movq	8(%rsp), %rdx
 254      08
 255 0360 48898424 		movq	%rax, 272(%rsp)
 255      10010000 
 256 0368 48899424 		movq	%rdx, 280(%rsp)
 256      18010000 
 257 0370 488B4424 		movq	16(%rsp), %rax
 257      10
 258 0375 488B5424 		movq	24(%rsp), %rdx
 258      18
 259 037a 48898424 		movq	%rax, 288(%rsp)
GAS LISTING /tmp/ccWN1hS6.s 			page 13


 259      20010000 
 260 0382 48899424 		movq	%rdx, 296(%rsp)
 260      28010000 
 161:src/main.c    **** 
 162:src/main.c    ****     obj2_wrap = mmsg_wrapper_init_obj("wrapped_obj2");
 261              		.loc 1 162 0
 262 038a 488D3500 		leaq	.LC17(%rip), %rsi
 262      000000
 263 0391 4889DF   		movq	%rbx, %rdi
 264 0394 E8000000 		call	mmsg_wrapper_init_obj@PLT
 264      00
 265              	.LVL18:
 266 0399 488B0424 		movq	(%rsp), %rax
 267 039d 488B5424 		movq	8(%rsp), %rdx
 267      08
 268 03a2 48898424 		movq	%rax, 496(%rsp)
 268      F0010000 
 269 03aa 48899424 		movq	%rdx, 504(%rsp)
 269      F8010000 
 270 03b2 488B4424 		movq	16(%rsp), %rax
 270      10
 271 03b7 488B5424 		movq	24(%rsp), %rdx
 271      18
 272 03bc 48898424 		movq	%rax, 512(%rsp)
 272      00020000 
 273 03c4 48899424 		movq	%rdx, 520(%rsp)
 273      08020000 
 274 03cc 488B4424 		movq	32(%rsp), %rax
 274      20
 275 03d1 488B5424 		movq	40(%rsp), %rdx
 275      28
 276 03d6 48898424 		movq	%rax, 528(%rsp)
 276      10020000 
 277 03de 48899424 		movq	%rdx, 536(%rsp)
 277      18020000 
 163:src/main.c    ****     mmsg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 278              		.loc 1 163 0
 279 03e6 488DB424 		leaq	176(%rsp), %rsi
 279      B0000000 
 280 03ee 488D9C24 		leaq	496(%rsp), %rbx
 280      F0010000 
 281 03f6 4889DF   		movq	%rbx, %rdi
 282 03f9 E8000000 		call	mmsg_wrapper_add_int_to_obj@PLT
 282      00
 283              	.LVL19:
 164:src/main.c    ****     mmsg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 284              		.loc 1 164 0
 285 03fe 488DB424 		leaq	208(%rsp), %rsi
 285      D0000000 
 286 0406 4889DF   		movq	%rbx, %rdi
 287 0409 E8000000 		call	mmsg_wrapper_add_int_to_obj@PLT
 287      00
 288              	.LVL20:
 165:src/main.c    ****     mmsg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 289              		.loc 1 165 0
 290 040e 488DB424 		leaq	240(%rsp), %rsi
 290      F0000000 
GAS LISTING /tmp/ccWN1hS6.s 			page 14


 291 0416 4889DF   		movq	%rbx, %rdi
 292 0419 E8000000 		call	mmsg_wrapper_add_float_to_obj@PLT
 292      00
 293              	.LVL21:
 166:src/main.c    ****     mmsg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 294              		.loc 1 166 0
 295 041e 488DB424 		leaq	272(%rsp), %rsi
 295      10010000 
 296 0426 4889DF   		movq	%rbx, %rdi
 297 0429 E8000000 		call	mmsg_wrapper_add_float_to_obj@PLT
 297      00
 298              	.LVL22:
 167:src/main.c    ****     mmsg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 299              		.loc 1 167 0
 300 042e 488DB424 		leaq	304(%rsp), %rsi
 300      30010000 
 301 0436 4889DF   		movq	%rbx, %rdi
 302 0439 E8000000 		call	mmsg_wrapper_add_string_to_obj@PLT
 302      00
 303              	.LVL23:
 168:src/main.c    **** 
 169:src/main.c    ****     mmsg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 304              		.loc 1 169 0
 305 043e 488D7424 		leaq	80(%rsp), %rsi
 305      50
 306 0443 4889EF   		movq	%rbp, %rdi
 307 0446 E8000000 		call	mmsg_wrapper_add_cmd_to_msg@PLT
 307      00
 308              	.LVL24:
 170:src/main.c    ****     mmsg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 309              		.loc 1 170 0
 310 044b 4889DE   		movq	%rbx, %rsi
 311 044e 4889EF   		movq	%rbp, %rdi
 312 0451 E8000000 		call	mmsg_wrapper_add_object_to_msg@PLT
 312      00
 313              	.LVL25:
 171:src/main.c    ****     
 172:src/main.c    ****     // wrapper_hnd.print_cmd(cmd_wrap);
 173:src/main.c    ****     // putchar('\n');
 174:src/main.c    ****     // wrapper_hnd.print_obj(obj1_wrap);
 175:src/main.c    ****     // putchar('\n');
 176:src/main.c    ****     // wrapper_hnd.print_obj(obj2_wrap);
 177:src/main.c    ****     // putchar('\n');
 178:src/main.c    ****     wrapper_hnd.print(msg_wrap);
 314              		.loc 1 178 0
 315 0456 FFB424A8 		pushq	168(%rsp)
 315      000000
 316              	.LCFI5:
 317              		.cfi_def_cfa_offset 616
 318 045d FFB424A8 		pushq	168(%rsp)
 318      000000
 319              	.LCFI6:
 320              		.cfi_def_cfa_offset 624
 321 0464 FFB424A8 		pushq	168(%rsp)
 321      000000
 322              	.LCFI7:
 323              		.cfi_def_cfa_offset 632
GAS LISTING /tmp/ccWN1hS6.s 			page 15


 324 046b FFB424A8 		pushq	168(%rsp)
 324      000000
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 640
 327 0472 FF942490 		call	*144(%rsp)
 327      000000
 328              	.LVL26:
 329              	.LBB14:
 330              	.LBB15:
 331              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Optimizing macros and inline functions for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Copyright (C) 1998-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # error "Never include <bits/stdio.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef __extern_inline
  24:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE inline
  25:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #else
  26:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE __extern_inline
  27:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  28:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifdef __USE_EXTERN_INLINES
  31:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
  32:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    inline.  */
  33:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
  34:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write formatted output to stdout from argument list ARG.  */
  35:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  36:/usr/include/x86_64-linux-gnu/bits/stdio.h **** vprintf (const char *__restrict __fmt, _G_va_list __arg)
  37:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  38:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return vfprintf (stdout, __fmt, __arg);
  39:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  40:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Read a character from stdin.  */
  43:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  44:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar (void)
  45:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc (stdin);
  47:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
GAS LISTING /tmp/ccWN1hS6.s 			page 16


  48:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_MISC
  51:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Faster version when locking is not necessary.  */
  52:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  53:/usr/include/x86_64-linux-gnu/bits/stdio.h **** fgetc_unlocked (FILE *__fp)
  54:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  55:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  56:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  57:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif /* misc */
  58:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_POSIX
  61:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  62:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  63:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getc_unlocked (FILE *__fp)
  64:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  66:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  68:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  69:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  70:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar_unlocked (void)
  71:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  72:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (stdin);
  73:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  74:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif	/* POSIX */
  75:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  77:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write a character to stdout.  */
  78:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  79:/usr/include/x86_64-linux-gnu/bits/stdio.h **** putchar (int __c)
  80:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  81:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_putc (__c, stdout);
 332              		.loc 3 81 0
 333 0479 4883C420 		addq	$32, %rsp
 334              	.LCFI9:
 335              		.cfi_def_cfa_offset 608
 336 047d 488B3500 		movq	stdout(%rip), %rsi
 336      000000
 337 0484 BF0A0000 		movl	$10, %edi
 337      00
 338 0489 E8000000 		call	_IO_putc@PLT
 338      00
 339              	.LVL27:
 340              	.LBE15:
 341              	.LBE14:
 179:src/main.c    ****     putchar('\n');
 180:src/main.c    **** 
 181:src/main.c    ****     end = clock();
 342              		.loc 1 181 0
 343 048e E8000000 		call	clock@PLT
 343      00
 344              	.LVL28:
 182:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 345              		.loc 1 182 0
 346 0493 4C29E8   		subq	%r13, %rax
GAS LISTING /tmp/ccWN1hS6.s 			page 17


 347              	.LVL29:
 348 0496 660FEFC0 		pxor	%xmm0, %xmm0
 349 049a F2480F2A 		cvtsi2sdq	%rax, %xmm0
 349      C0
 350 049f F20F5E05 		divsd	.LC18(%rip), %xmm0
 350      00000000 
 351              	.LVL30:
 352              	.LBB16:
 353              	.LBB17:
 354              		.loc 2 104 0
 355 04a7 488D3500 		leaq	.LC19(%rip), %rsi
 355      000000
 356 04ae BF010000 		movl	$1, %edi
 356      00
 357 04b3 B8010000 		movl	$1, %eax
 357      00
 358 04b8 E8000000 		call	__printf_chk@PLT
 358      00
 359              	.LVL31:
 360              	.LBE17:
 361              	.LBE16:
 183:src/main.c    ****     printf("Execution time: %f s\n", exec_time);
 184:src/main.c    ****     return 0;
 185:src/main.c    **** }
 362              		.loc 1 185 0
 363 04bd 488B8C24 		movq	552(%rsp), %rcx
 363      28020000 
 364 04c5 6448330C 		xorq	%fs:40, %rcx
 364      25280000 
 364      00
 365 04ce 7513     		jne	.L4
 366 04d0 B8000000 		movl	$0, %eax
 366      00
 367 04d5 4881C438 		addq	$568, %rsp
 367      020000
 368              	.LCFI10:
 369              		.cfi_remember_state
 370              		.cfi_def_cfa_offset 40
 371 04dc 5B       		popq	%rbx
 372              	.LCFI11:
 373              		.cfi_def_cfa_offset 32
 374 04dd 5D       		popq	%rbp
 375              	.LCFI12:
 376              		.cfi_def_cfa_offset 24
 377 04de 415C     		popq	%r12
 378              	.LCFI13:
 379              		.cfi_def_cfa_offset 16
 380 04e0 415D     		popq	%r13
 381              	.LCFI14:
 382              		.cfi_def_cfa_offset 8
 383              	.LVL32:
 384 04e2 C3       		ret
 385              	.LVL33:
 386              	.L4:
 387              	.LCFI15:
 388              		.cfi_restore_state
 389 04e3 E8000000 		call	__stack_chk_fail@PLT
GAS LISTING /tmp/ccWN1hS6.s 			page 18


 389      00
 390              	.LVL34:
 391              		.cfi_endproc
 392              	.LFE56:
 394              		.globl	test_str1
 395              		.section	.rodata.str1.8,"aMS",@progbits,1
 396              		.align 8
 397              	.LC20:
 398 0000 23746573 		.string	"#test_msg{<CMD1>\t\t @obj1($key11 =\t-1123334567  ; $key12 = 'string \"value\"')\n\r@obj2
 398      745F6D73 
 398      677B3C43 
 398      4D44313E 
 398      09092040 
 399              		.section	.data.rel.local.test_str1,"aw",@progbits
 400              		.align 8
 403              	test_str1:
 404 0000 00000000 		.quad	.LC20
 404      00000000 
 405              		.section	.rodata.cst4,"aM",@progbits,4
 406              		.align 4
 407              	.LC14:
 408 0000 10069E3F 		.long	1067320848
 409              		.align 4
 410              	.LC16:
 411 0004 9643ABBE 		.long	3198894998
 412              		.section	.rodata.cst8,"aM",@progbits,8
 413              		.align 8
 414              	.LC18:
 415 0000 00000000 		.long	0
 416 0004 80842E41 		.long	1093567616
 417              		.text
 418              	.Letext0:
 419              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 420              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 421              		.file 6 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 422              		.file 7 "/usr/include/stdio.h"
 423              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 424              		.file 9 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 425              		.file 10 "/usr/include/time.h"
 426              		.file 11 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 427              		.file 12 "inc/mcu_msg_cfg.h"
 428              		.file 13 "inc/mcu_msg.h"
 429              		.file 14 "<built-in>"
GAS LISTING /tmp/ccWN1hS6.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWN1hS6.s:42     .text.main:0000000000000000 main
     /tmp/ccWN1hS6.s:403    .data.rel.local.test_str1:0000000000000000 test_str1
     /tmp/ccWN1hS6.s:5      .rodata.main.str1.1:0000000000000000 .LC0
     /tmp/ccWN1hS6.s:7      .rodata.main.str1.1:0000000000000015 .LC1
     /tmp/ccWN1hS6.s:9      .rodata.main.str1.1:0000000000000029 .LC2
     /tmp/ccWN1hS6.s:11     .rodata.main.str1.1:0000000000000035 .LC3
     /tmp/ccWN1hS6.s:13     .rodata.main.str1.1:0000000000000042 .LC4
     /tmp/ccWN1hS6.s:15     .rodata.main.str1.1:0000000000000055 .LC5
     /tmp/ccWN1hS6.s:17     .rodata.main.str1.1:000000000000005a .LC6
     /tmp/ccWN1hS6.s:19     .rodata.main.str1.1:000000000000006d .LC7
     /tmp/ccWN1hS6.s:21     .rodata.main.str1.1:0000000000000072 .LC8
     /tmp/ccWN1hS6.s:23     .rodata.main.str1.1:0000000000000082 .LC9
     /tmp/ccWN1hS6.s:25     .rodata.main.str1.1:0000000000000087 .LC10
     /tmp/ccWN1hS6.s:27     .rodata.main.str1.1:0000000000000090 .LC11
     /tmp/ccWN1hS6.s:29     .rodata.main.str1.1:0000000000000093 .LC12
     /tmp/ccWN1hS6.s:407    .rodata.cst4:0000000000000000 .LC14
     /tmp/ccWN1hS6.s:31     .rodata.main.str1.1:0000000000000096 .LC13
     /tmp/ccWN1hS6.s:410    .rodata.cst4:0000000000000004 .LC16
     /tmp/ccWN1hS6.s:33     .rodata.main.str1.1:0000000000000099 .LC15
     /tmp/ccWN1hS6.s:35     .rodata.main.str1.1:000000000000009c .LC17
     /tmp/ccWN1hS6.s:414    .rodata.cst8:0000000000000000 .LC18
     /tmp/ccWN1hS6.s:37     .rodata.main.str1.1:00000000000000a9 .LC19

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
clock
puts
putchar
mmsg_wrapper_hnd_create
mmsg_wrapper_init_msg
mmsg_wrapper_init_obj
mmsg_wrapper_init_string
mmsg_wrapper_add_string_to_obj
mmsg_wrapper_add_object_to_msg
mmsg_wrapper_init_cmd
mmsg_wrapper_init_int
mmsg_wrapper_init_float
mmsg_wrapper_add_int_to_obj
mmsg_wrapper_add_float_to_obj
mmsg_wrapper_add_cmd_to_msg
stdout
_IO_putc
__printf_chk
__stack_chk_fail
