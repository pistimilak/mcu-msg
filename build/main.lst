GAS LISTING /tmp/cc4D9KId.s 			page 1


   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.main.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 54727565 		.string	"True"
   6      00
   7              	.LC1:
   8 0005 46616C73 		.string	"False"
   8      6500
   9              	.LC2:
  10 000b 54455354 		.string	"TEST mcu-msg-parser"
  10      206D6375 
  10      2D6D7367 
  10      2D706172 
  10      73657200 
  11              	.LC3:
  12 001f 3D3D3D3D 		.string	"==================="
  12      3D3D3D3D 
  12      3D3D3D3D 
  12      3D3D3D3D 
  12      3D3D3D00 
  13              	.LC4:
  14 0033 74657374 		.string	"test_str1 = \"%s\"\n\n"
  14      5F737472 
  14      31203D20 
  14      22257322 
  14      0A0A00
  15              	.LC5:
  16 0046 3E3E2067 		.string	">> getting test_msg..."
  16      65747469 
  16      6E672074 
  16      6573745F 
  16      6D73672E 
  17              	.LC6:
  18 005d 74657374 		.string	"test_msg"
  18      5F6D7367 
  18      00
  19              		.section	.rodata.main.str1.8,"aMS",@progbits,1
  20              		.align 8
  21              	.LC7:
  22 0000 6D73672E 		.string	"msg.id_len: %d msg.content_len: %d\n"
  22      69645F6C 
  22      656E3A20 
  22      2564206D 
  22      73672E63 
  23              		.section	.rodata.main.str1.1
  24              	.LC8:
  25 0066 0A00     		.string	"\n"
  26              	.LC9:
  27 0068 6D657373 		.string	"message not found!\n"
  27      61676520 
  27      6E6F7420 
  27      666F756E 
  27      64210A00 
  28              	.LC10:
  29 007c 3E3E2067 		.string	">> getting CMD1 cmd..."
GAS LISTING /tmp/cc4D9KId.s 			page 2


  29      65747469 
  29      6E672043 
  29      4D443120 
  29      636D642E 
  30              	.LC11:
  31 0093 434D4431 		.string	"CMD1"
  31      00
  32              	.LC12:
  33 0098 25730A0A 		.string	"%s\n\n"
  33      00
  34              	.LC13:
  35 009d 3E3E2067 		.string	">> getting CMD2 cmd..."
  35      65747469 
  35      6E672043 
  35      4D443220 
  35      636D642E 
  36              	.LC14:
  37 00b4 434D4432 		.string	"CMD2"
  37      00
  38              	.LC15:
  39 00b9 3E3E2067 		.string	">> getting CMD_last cmd..."
  39      65747469 
  39      6E672043 
  39      4D445F6C 
  39      61737420 
  40              	.LC16:
  41 00d4 434D445F 		.string	"CMD_last"
  41      6C617374 
  41      00
  42              	.LC17:
  43 00dd 3E3E2067 		.string	">> getting obj1..."
  43      65747469 
  43      6E67206F 
  43      626A312E 
  43      2E2E00
  44              	.LC18:
  45 00f0 6F626A31 		.string	"obj1"
  45      00
  46              		.section	.rodata.main.str1.8
  47 0024 00000000 		.align 8
  48              	.LC19:
  49 0028 6F626A31 		.string	"obj1.id_len: %d obj1.content_len: %d\n"
  49      2E69645F 
  49      6C656E3A 
  49      20256420 
  49      6F626A31 
  50              		.section	.rodata.main.str1.1
  51              	.LC20:
  52 00f5 3E3E2067 		.string	">> getting obj2..."
  52      65747469 
  52      6E67206F 
  52      626A322E 
  52      2E2E00
  53              	.LC21:
  54 0108 6F626A32 		.string	"obj2"
  54      00
  55              		.section	.rodata.main.str1.8
GAS LISTING /tmp/cc4D9KId.s 			page 3


  56 004e 0000     		.align 8
  57              	.LC22:
  58 0050 6F626A32 		.string	"obj2.id_len: %d obj2.content_len: %d\n"
  58      2E69645F 
  58      6C656E3A 
  58      20256420 
  58      6F626A32 
  59 0076 0000     		.align 8
  60              	.LC23:
  61 0078 3E3E2067 		.string	">> getting obj1->key11 integer..."
  61      65747469 
  61      6E67206F 
  61      626A312D 
  61      3E6B6579 
  62              		.section	.rodata.main.str1.1
  63              	.LC25:
  64 010d 6B657931 		.string	"key11"
  64      3100
  65              	.LC26:
  66 0113 72203D20 		.string	"r = %d ival = %d\n\n"
  66      25642069 
  66      76616C20 
  66      3D202564 
  66      0A0A00
  67              		.section	.rodata.main.str1.8
  68 009a 00000000 		.align 8
  68      0000
  69              	.LC27:
  70 00a0 3E3E2067 		.string	">> getting obj2->key21 float..."
  70      65747469 
  70      6E67206F 
  70      626A322D 
  70      3E6B6579 
  71              		.section	.rodata.main.str1.1
  72              	.LC28:
  73 0126 6B657932 		.string	"key21"
  73      3100
  74              	.LC29:
  75 012c 72203D20 		.string	"r = %d fval = %.11f\n\n"
  75      25642066 
  75      76616C20 
  75      3D20252E 
  75      3131660A 
  76              		.section	.rodata.main.str1.8
  77              		.align 8
  78              	.LC30:
  79 00c0 3E3E2067 		.string	">> getting obj1->key12 string..."
  79      65747469 
  79      6E67206F 
  79      626A312D 
  79      3E6B6579 
  80              		.section	.rodata.main.str1.1
  81              	.LC31:
  82 0142 6B657931 		.string	"key12"
  82      3200
  83              	.LC32:
  84 0148 206C656E 		.string	" len: %d\n\n"
GAS LISTING /tmp/cc4D9KId.s 			page 4


  84      3A202564 
  84      0A0A00
  85              	.LC33:
  86 0153 6572726F 		.string	"error getting string\n"
  86      72206765 
  86      7474696E 
  86      67207374 
  86      72696E67 
  87              	.LC34:
  88 0169 54455354 		.string	"TEST mcu-msg-wrapper"
  88      206D6375 
  88      2D6D7367 
  88      2D777261 
  88      70706572 
  89              	.LC35:
  90 017e 3D3D3D3D 		.string	"===================="
  90      3D3D3D3D 
  90      3D3D3D3D 
  90      3D3D3D3D 
  90      3D3D3D3D 
  91              	.LC36:
  92 0193 77726170 		.string	"wrapped_msg"
  92      7065645F 
  92      6D736700 
  93              	.LC37:
  94 019f 496E6974 		.string	"Initialized msg: #"
  94      69616C69 
  94      7A656420 
  94      6D73673A 
  94      202300
  95              	.LC38:
  96 01b2 77726170 		.string	"wrapped_obj1"
  96      7065645F 
  96      6F626A31 
  96      00
  97              	.LC39:
  98 01bf 496E6974 		.string	"Initialized obj: @"
  98      69616C69 
  98      7A656420 
  98      6F626A3A 
  98      204000
  99              	.LC40:
 100 01d2 54686973 		.string	"This is \"string 1\""
 100      20697320 
 100      22737472 
 100      696E6720 
 100      312200
 101              	.LC41:
 102 01e5 73747231 		.string	"str1"
 102      00
 103              	.LC42:
 104 01ea 496E6974 		.string	"Initialized str: $"
 104      69616C69 
 104      7A656420 
 104      7374723A 
 104      202400
 105              	.LC43:
GAS LISTING /tmp/cc4D9KId.s 			page 5


 106 01fd 54686973 		.string	"This is 'string 2'"
 106      20697320 
 106      27737472 
 106      696E6720 
 106      322700
 107              	.LC44:
 108 0210 73747232 		.string	"str2"
 108      00
 109              	.LC45:
 110 0215 2E2E2E2E 		.string	".... \"string 3\""
 110      20227374 
 110      72696E67 
 110      20332200 
 111              	.LC46:
 112 0225 73747233 		.string	"str3"
 112      00
 113              		.section	.rodata.main.str1.8
 114 00e1 00000000 		.align 8
 114      000000
 115              	.LC47:
 116 00e8 41646420 		.string	"Add '$str2', '$str3' to '@wrapped_obj1'...\n"
 116      27247374 
 116      7232272C 
 116      20272473 
 116      74723327 
 117 0114 00000000 		.align 8
 118              	.LC48:
 119 0118 41646420 		.string	"Add '@wrapped_obj1' to '#wrapped_msg'...\n"
 119      27407772 
 119      61707065 
 119      645F6F62 
 119      6A312720 
 120              		.section	.rodata.main.str1.1
 121              	.LC49:
 122 022a 434D445F 		.string	"CMD_WRAP"
 122      57524150 
 122      00
 123              	.LC50:
 124 0233 496E6974 		.string	"Initialized cmd: <"
 124      69616C69 
 124      7A656420 
 124      636D643A 
 124      203C00
 125              	.LC51:
 126 0246 3E0A00   		.string	">\n"
 127              	.LC52:
 128 0249 434D445F 		.string	"CMD_REMOVEABLE"
 128      52454D4F 
 128      56454142 
 128      4C4500
 129              	.LC53:
 130 0258 693100   		.string	"i1"
 131              	.LC54:
 132 025b 496E6974 		.string	"Initialized int: $"
 132      69616C69 
 132      7A656420 
 132      696E743A 
GAS LISTING /tmp/cc4D9KId.s 			page 6


 132      202400
 133              	.LC55:
 134 026e 3D25640A 		.string	"=%d\n\n"
 134      0A00
 135              	.LC56:
 136 0274 693200   		.string	"i2"
 137              	.LC57:
 138 0277 663100   		.string	"f1"
 139              	.LC59:
 140 027a 496E6974 		.string	"Initialized float: $"
 140      69616C69 
 140      7A656420 
 140      666C6F61 
 140      743A2024 
 141              	.LC60:
 142 028f 3D252E36 		.string	"=%.6f\n\n"
 142      660A0A00 
 143              	.LC61:
 144 0297 663200   		.string	"f2"
 145              	.LC63:
 146 029a 77726170 		.string	"wrapped_obj2"
 146      7065645F 
 146      6F626A32 
 146      00
 147              		.section	.rodata.main.str1.8
 148 0142 00000000 		.align 8
 148      0000
 149              	.LC64:
 150 0148 41646420 		.string	"Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n"
 150      27246931 
 150      272C2027 
 150      24693227 
 150      2C202724 
 151 0187 00       		.align 8
 152              	.LC65:
 153 0188 41646420 		.string	"Add '<CMD_WRAP>' to '#wrapped_msg'...\n"
 153      273C434D 
 153      445F5752 
 153      41503E27 
 153      20746F20 
 154 01af 00       		.align 8
 155              	.LC66:
 156 01b0 41646420 		.string	"Add '@wrapped_obj2' to '#wrapped_msg'...\n"
 156      27407772 
 156      61707065 
 156      645F6F62 
 156      6A322720 
 157 01da 00000000 		.align 8
 157      0000
 158              	.LC67:
 159 01e0 41646420 		.string	"Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n"
 159      273C434D 
 159      445F5245 
 159      4D4F5641 
 159      424C453E 
 160 020c 00000000 		.align 8
 161              	.LC68:
GAS LISTING /tmp/cc4D9KId.s 			page 7


 162 0210 52656D6F 		.string	"Removing $str2 from @wrapped_obj1...\n"
 162      76696E67 
 162      20247374 
 162      72322066 
 162      726F6D20 
 163 0236 0000     		.align 8
 164              	.LC69:
 165 0238 52656D6F 		.string	"Removing $str1 from @wrapped_obj2...\n"
 165      76696E67 
 165      20247374 
 165      72312066 
 165      726F6D20 
 166 025e 0000     		.align 8
 167              	.LC70:
 168 0260 52656D6F 		.string	"Removing $f1 from @wrapped_obj2...\n"
 168      76696E67 
 168      20246631 
 168      2066726F 
 168      6D204077 
 169 0284 00000000 		.align 8
 170              	.LC71:
 171 0288 52656D6F 		.string	"Removing $i2 from @wrapped_obj2...\n"
 171      76696E67 
 171      20246932 
 171      2066726F 
 171      6D204077 
 172 02ac 00000000 		.align 8
 173              	.LC72:
 174 02b0 52656D6F 		.string	"Removing @wrapped_obj1 from #wrapped_msg...\n"
 174      76696E67 
 174      20407772 
 174      61707065 
 174      645F6F62 
 175 02dd 000000   		.align 8
 176              	.LC73:
 177 02e0 52656D6F 		.string	"Removing <CMD_REMOVABLE> from #wrapped_msg...\n"
 177      76696E67 
 177      203C434D 
 177      445F5245 
 177      4D4F5641 
 178 030f 00       		.align 8
 179              	.LC74:
 180 0310 41646420 		.string	"Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n"
 180      27407772 
 180      61707065 
 180      645F6F62 
 180      6A312720 
 181              		.section	.rodata.main.str1.1
 182              	.LC75:
 183 02a7 57726170 		.string	"Wrapped message:"
 183      70656420 
 183      6D657373 
 183      6167653A 
 183      00
 184              	.LC76:
 185 02b8 2D2D2D2D 		.string	"---------------\n"
 185      2D2D2D2D 
GAS LISTING /tmp/cc4D9KId.s 			page 8


 185      2D2D2D2D 
 185      2D2D2D0A 
 185      00
 186              	.LC78:
 187 02c9 45786563 		.string	"Execution time: %f s\n"
 187      7574696F 
 187      6E207469 
 187      6D653A20 
 187      25662073 
 188              		.section	.text.main,"ax",@progbits
 189              		.globl	main
 191              	main:
 192              	.LFB68:
 193              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author Istvan Milak (istvan.milak@gmail.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2019-12-15
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright Copyright (c) 2019
   9:src/main.c    ****  * 
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stdio.h>
  13:src/main.c    **** #include <stdlib.h>
  14:src/main.c    **** #include <string.h>
  15:src/main.c    **** #include <time.h>
  16:src/main.c    **** #include <unistd.h>
  17:src/main.c    **** #include <pthread.h>
  18:src/main.c    **** #include "mcu_msg.h"
  19:src/main.c    **** 
  20:src/main.c    **** /*string printer on i386*/
  21:src/main.c    **** 
  22:src/main.c    **** char test_str1[] = "#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n
  23:src/main.c    **** \r@obj2  ($key21 =   -1.123456789; $key22   = 'val22'; $key23 = 1000; $key24 = 12.34)<CMD_last>}";
  24:src/main.c    **** 
  25:src/main.c    **** 
  26:src/main.c    **** void print_int(int i , int (*__putchar)(char));
  27:src/main.c    **** void print_float(float f, uint8_t prec, int (*__putchar)(char));
  28:src/main.c    **** 
  29:src/main.c    **** int main()
  30:src/main.c    **** {
 194              		.loc 1 30 0
 195              		.cfi_startproc
 196 0000 4157     		pushq	%r15
 197              	.LCFI0:
 198              		.cfi_def_cfa_offset 16
 199              		.cfi_offset 15, -16
 200 0002 4156     		pushq	%r14
 201              	.LCFI1:
 202              		.cfi_def_cfa_offset 24
 203              		.cfi_offset 14, -24
 204 0004 4155     		pushq	%r13
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/cc4D9KId.s 			page 9


 207              		.cfi_offset 13, -32
 208 0006 4154     		pushq	%r12
 209              	.LCFI3:
 210              		.cfi_def_cfa_offset 40
 211              		.cfi_offset 12, -40
 212 0008 55       		pushq	%rbp
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 48
 215              		.cfi_offset 6, -48
 216 0009 53       		pushq	%rbx
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 56
 219              		.cfi_offset 3, -56
 220 000a 4881ECF8 		subq	$760, %rsp
 220      020000
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 816
 223              		.loc 1 30 0
 224 0011 64488B04 		movq	%fs:40, %rax
 224      25280000 
 224      00
 225 001a 48898424 		movq	%rax, 744(%rsp)
 225      E8020000 
 226 0022 31C0     		xorl	%eax, %eax
  31:src/main.c    ****     // print_int(-1000, putchar);
  32:src/main.c    ****     // putchar('\n');
  33:src/main.c    ****     // print_int(1000, putchar);
  34:src/main.c    ****     // putchar('\n');
  35:src/main.c    ****     // print_int(-128, putchar);
  36:src/main.c    ****     // putchar('\n');
  37:src/main.c    ****     // print_int(127, putchar);
  38:src/main.c    ****     // putchar('\n');
  39:src/main.c    ****     // print_int(256, putchar);
  40:src/main.c    ****     // putchar('\n');
  41:src/main.c    ****     // print_int(-32768, putchar);
  42:src/main.c    ****     // putchar('\n');
  43:src/main.c    ****     // print_int(32767, putchar);
  44:src/main.c    ****     // putchar('\n');
  45:src/main.c    ****     // print_int(65535, putchar);
  46:src/main.c    ****     // putchar('\n');
  47:src/main.c    ****     // print_int(-2147483648, putchar);
  48:src/main.c    ****     // putchar('\n');
  49:src/main.c    ****     // print_int(2147483647, putchar);
  50:src/main.c    ****     // putchar('\n');
  51:src/main.c    ****     // print_int(4294967295, putchar);
  52:src/main.c    ****     // putchar('\n');
  53:src/main.c    **** 
  54:src/main.c    ****     // print_float(-1000.1234, 4,putchar);
  55:src/main.c    ****     // putchar('\n');
  56:src/main.c    ****     // print_float(3.1234, 4,putchar);
  57:src/main.c    ****     // putchar('\n');
  58:src/main.c    ****     // print_float(-123.56789, 6,putchar);
  59:src/main.c    ****     // putchar('\n');
  60:src/main.c    ****     // print_float(-456.12, 2,putchar);
  61:src/main.c    ****     // putchar('\n');
  62:src/main.c    ****     // print_float(67.128789, 4,putchar);
  63:src/main.c    ****     // putchar('\n');
GAS LISTING /tmp/cc4D9KId.s 			page 10


  64:src/main.c    **** 
  65:src/main.c    ****     // return;
  66:src/main.c    ****     /*start the clock*/
  67:src/main.c    ****     clock_t begin = clock();
 227              		.loc 1 67 0
 228 0024 E8000000 		call	clock@PLT
 228      00
 229              	.LVL0:
 230 0029 48894424 		movq	%rax, 8(%rsp)
 230      08
 231              	.LVL1:
  68:src/main.c    ****     clock_t end;
  69:src/main.c    ****     double exec_time = 0.0;
  70:src/main.c    **** 
  71:src/main.c    **** 
  72:src/main.c    **** 
  73:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  74:src/main.c    **** //                                 MCU-MSG Parser test                                       //
  75:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
  76:src/main.c    **** 
  77:src/main.c    ****     msg_t msg;
  78:src/main.c    ****     msg_obj_t obj1, obj2;
  79:src/main.c    ****     msg_cmd_t cmd;
  80:src/main.c    ****     msg_hnd_t hnd = msg_hnd_create(putchar);
 232              		.loc 1 80 0
 233 002e 488DBC24 		leaq	688(%rsp), %rdi
 233      B0020000 
 234 0036 488B3500 		movq	putchar@GOTPCREL(%rip), %rsi
 234      000000
 235 003d E8000000 		call	msg_hnd_create@PLT
 235      00
 236              	.LVL2:
 237              	.LBB154:
 238              	.LBB155:
 239              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
GAS LISTING /tmp/cc4D9KId.s 			page 11


  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
GAS LISTING /tmp/cc4D9KId.s 			page 12


  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 240              		.loc 2 104 0
 241 0042 488D3D00 		leaq	.LC2(%rip), %rdi
 241      000000
 242 0049 E8000000 		call	puts@PLT
 242      00
 243              	.LVL3:
 244              	.LBE155:
 245              	.LBE154:
 246              	.LBB156:
 247              	.LBB157:
 248 004e 488D3D00 		leaq	.LC3(%rip), %rdi
 248      000000
 249 0055 E8000000 		call	puts@PLT
 249      00
 250              	.LVL4:
 251              	.LBE157:
 252              	.LBE156:
 253              	.LBB158:
 254              	.LBB159:
 255 005a 488D1500 		leaq	test_str1(%rip), %rdx
 255      000000
 256 0061 488D3500 		leaq	.LC4(%rip), %rsi
 256      000000
 257 0068 BF010000 		movl	$1, %edi
 257      00
 258 006d B8000000 		movl	$0, %eax
 258      00
 259 0072 E8000000 		call	__printf_chk@PLT
 259      00
 260              	.LVL5:
 261              	.LBE159:
 262              	.LBE158:
GAS LISTING /tmp/cc4D9KId.s 			page 13


 263              	.LBB160:
 264              	.LBB161:
 265 0077 488D3D00 		leaq	.LC5(%rip), %rdi
 265      000000
 266 007e E8000000 		call	puts@PLT
 266      00
 267              	.LVL6:
 268              	.LBE161:
 269              	.LBE160:
  81:src/main.c    ****     
  82:src/main.c    ****     printf("TEST mcu-msg-parser\n");
  83:src/main.c    ****     printf("===================\n");
  84:src/main.c    **** 
  85:src/main.c    ****     printf("test_str1 = \"%s\"\n\n", test_str1);
  86:src/main.c    **** 
  87:src/main.c    ****     //#############################################################################################
  88:src/main.c    ****     printf(">> getting test_msg...\n");
  89:src/main.c    ****     msg = msg_get(test_str1, "test_msg", sizeof(test_str1));
 270              		.loc 1 89 0
 271 0083 488DBC24 		leaq	192(%rsp), %rdi
 271      C0000000 
 272 008b B9AA0000 		movl	$170, %ecx
 272      00
 273 0090 488D1500 		leaq	.LC6(%rip), %rdx
 273      000000
 274 0097 488D3500 		leaq	test_str1(%rip), %rsi
 274      000000
 275 009e E8000000 		call	msg_get@PLT
 275      00
 276              	.LVL7:
  90:src/main.c    ****     if(msg.content.s != NULL) {
 277              		.loc 1 90 0
 278 00a3 4883BC24 		cmpq	$0, 208(%rsp)
 278      D0000000 
 278      00
 279 00ac 0F84600D 		je	.L2
 279      0000
  91:src/main.c    ****         printf("msg.id_len: %d msg.content_len: %d\n", msg.id.len, msg.content.len);
 280              		.loc 1 91 0
 281 00b2 0FB78C24 		movzwl	216(%rsp), %ecx
 281      D8000000 
 282 00ba 0FB79424 		movzwl	200(%rsp), %edx
 282      C8000000 
 283              	.LVL8:
 284              	.LBB162:
 285              	.LBB163:
 286              		.loc 2 104 0
 287 00c2 488D3500 		leaq	.LC7(%rip), %rsi
 287      000000
 288 00c9 BF010000 		movl	$1, %edi
 288      00
 289 00ce B8000000 		movl	$0, %eax
 289      00
 290 00d3 E8000000 		call	__printf_chk@PLT
 290      00
 291              	.LVL9:
 292              	.LBE163:
GAS LISTING /tmp/cc4D9KId.s 			page 14


 293              	.LBE162:
  92:src/main.c    ****         hnd.print_str(msg.id);
 294              		.loc 1 92 0
 295 00d8 488B9C24 		movq	704(%rsp), %rbx
 295      C0020000 
 296 00e0 488BBC24 		movq	192(%rsp), %rdi
 296      C0000000 
 297 00e8 488BB424 		movq	200(%rsp), %rsi
 297      C8000000 
 298 00f0 FFD3     		call	*%rbx
 299              	.LVL10:
 300              	.LBB164:
 301              	.LBB165:
 302              		.loc 2 104 0
 303 00f2 BF3A0000 		movl	$58, %edi
 303      00
 304 00f7 E8000000 		call	putchar@PLT
 304      00
 305              	.LVL11:
 306              	.LBE165:
 307              	.LBE164:
  93:src/main.c    ****         printf(":");
  94:src/main.c    ****         hnd.print_str(msg.content);
 308              		.loc 1 94 0
 309 00fc 488BBC24 		movq	208(%rsp), %rdi
 309      D0000000 
 310 0104 488BB424 		movq	216(%rsp), %rsi
 310      D8000000 
 311 010c FFD3     		call	*%rbx
 312              	.LVL12:
 313              	.LBB166:
 314              	.LBB167:
 315              		.loc 2 104 0
 316 010e 488D3D00 		leaq	.LC8(%rip), %rdi
 316      000000
 317 0115 E8000000 		call	puts@PLT
 317      00
 318              	.LVL13:
 319              	.L3:
 320              	.LBE167:
 321              	.LBE166:
 322              	.LBB168:
 323              	.LBB169:
 324 011a 488D3D00 		leaq	.LC10(%rip), %rdi
 324      000000
 325 0121 E8000000 		call	puts@PLT
 325      00
 326              	.LVL14:
 327              	.LBE169:
 328              	.LBE168:
  95:src/main.c    ****         printf("\n\n");
  96:src/main.c    ****     } else {
  97:src/main.c    ****         printf("message not found!\n\n");
  98:src/main.c    ****     }
  99:src/main.c    **** 
 100:src/main.c    ****     //#############################################################################################
 101:src/main.c    ****     printf(">> getting CMD1 cmd...\n");
GAS LISTING /tmp/cc4D9KId.s 			page 15


 102:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD1");
 329              		.loc 1 102 0
 330 0126 FFB424D8 		pushq	216(%rsp)
 330      000000
 331              	.LCFI7:
 332              		.cfi_def_cfa_offset 824
 333 012d FFB424D8 		pushq	216(%rsp)
 333      000000
 334              	.LCFI8:
 335              		.cfi_def_cfa_offset 832
 336 0134 FFB424D8 		pushq	216(%rsp)
 336      000000
 337              	.LCFI9:
 338              		.cfi_def_cfa_offset 840
 339 013b FFB424D8 		pushq	216(%rsp)
 339      000000
 340              	.LCFI10:
 341              		.cfi_def_cfa_offset 848
 342 0142 488D3D00 		leaq	.LC11(%rip), %rdi
 342      000000
 343 0149 E8000000 		call	msg_parser_get_cmd@PLT
 343      00
 344              	.LVL15:
 103:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 345              		.loc 1 103 0
 346 014e 4883C420 		addq	$32, %rsp
 347              	.LCFI11:
 348              		.cfi_def_cfa_offset 816
 349              	.LVL16:
 350 0152 4885C0   		testq	%rax, %rax
 351 0155 0F84C80C 		je	.L10
 351      0000
 352 015b 488D1500 		leaq	.LC0(%rip), %rdx
 352      000000
 353              	.L4:
 354              	.LVL17:
 355              	.LBB170:
 356              	.LBB171:
 357              		.loc 2 104 0 discriminator 4
 358 0162 488D3500 		leaq	.LC12(%rip), %rsi
 358      000000
 359 0169 BF010000 		movl	$1, %edi
 359      00
 360 016e B8000000 		movl	$0, %eax
 360      00
 361 0173 E8000000 		call	__printf_chk@PLT
 361      00
 362              	.LVL18:
 363              	.LBE171:
 364              	.LBE170:
 365              	.LBB172:
 366              	.LBB173:
 367 0178 488D3D00 		leaq	.LC13(%rip), %rdi
 367      000000
 368 017f E8000000 		call	puts@PLT
 368      00
 369              	.LVL19:
GAS LISTING /tmp/cc4D9KId.s 			page 16


 370              	.LBE173:
 371              	.LBE172:
 104:src/main.c    **** 
 105:src/main.c    ****     printf(">> getting CMD2 cmd...\n");
 106:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD2");
 372              		.loc 1 106 0 discriminator 4
 373 0184 FFB424D8 		pushq	216(%rsp)
 373      000000
 374              	.LCFI12:
 375              		.cfi_def_cfa_offset 824
 376 018b FFB424D8 		pushq	216(%rsp)
 376      000000
 377              	.LCFI13:
 378              		.cfi_def_cfa_offset 832
 379 0192 FFB424D8 		pushq	216(%rsp)
 379      000000
 380              	.LCFI14:
 381              		.cfi_def_cfa_offset 840
 382 0199 FFB424D8 		pushq	216(%rsp)
 382      000000
 383              	.LCFI15:
 384              		.cfi_def_cfa_offset 848
 385 01a0 488D3D00 		leaq	.LC14(%rip), %rdi
 385      000000
 386 01a7 E8000000 		call	msg_parser_get_cmd@PLT
 386      00
 387              	.LVL20:
 107:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 388              		.loc 1 107 0 discriminator 4
 389 01ac 4883C420 		addq	$32, %rsp
 390              	.LCFI16:
 391              		.cfi_def_cfa_offset 816
 392 01b0 4885C0   		testq	%rax, %rax
 393 01b3 0F84760C 		je	.L11
 393      0000
 394              		.loc 1 107 0 is_stmt 0
 395 01b9 488D1500 		leaq	.LC0(%rip), %rdx
 395      000000
 396              	.L5:
 397              	.LVL21:
 398              	.LBB174:
 399              	.LBB175:
 400              		.loc 2 104 0 is_stmt 1 discriminator 4
 401 01c0 488D3500 		leaq	.LC12(%rip), %rsi
 401      000000
 402 01c7 BF010000 		movl	$1, %edi
 402      00
 403 01cc B8000000 		movl	$0, %eax
 403      00
 404 01d1 E8000000 		call	__printf_chk@PLT
 404      00
 405              	.LVL22:
 406              	.LBE175:
 407              	.LBE174:
 408              	.LBB176:
 409              	.LBB177:
 410 01d6 488D3D00 		leaq	.LC15(%rip), %rdi
GAS LISTING /tmp/cc4D9KId.s 			page 17


 410      000000
 411 01dd E8000000 		call	puts@PLT
 411      00
 412              	.LVL23:
 413              	.LBE177:
 414              	.LBE176:
 108:src/main.c    **** 
 109:src/main.c    ****     printf(">> getting CMD_last cmd...\n");
 110:src/main.c    ****     cmd = msg_parser_get_cmd(msg, "CMD_last");
 415              		.loc 1 110 0 discriminator 4
 416 01e2 FFB424D8 		pushq	216(%rsp)
 416      000000
 417              	.LCFI17:
 418              		.cfi_def_cfa_offset 824
 419 01e9 FFB424D8 		pushq	216(%rsp)
 419      000000
 420              	.LCFI18:
 421              		.cfi_def_cfa_offset 832
 422 01f0 FFB424D8 		pushq	216(%rsp)
 422      000000
 423              	.LCFI19:
 424              		.cfi_def_cfa_offset 840
 425 01f7 FFB424D8 		pushq	216(%rsp)
 425      000000
 426              	.LCFI20:
 427              		.cfi_def_cfa_offset 848
 428 01fe 488D3D00 		leaq	.LC16(%rip), %rdi
 428      000000
 429 0205 E8000000 		call	msg_parser_get_cmd@PLT
 429      00
 430              	.LVL24:
 111:src/main.c    ****     printf("%s\n\n", cmd.cmd.s ? "True" : "False");
 431              		.loc 1 111 0 discriminator 4
 432 020a 4883C420 		addq	$32, %rsp
 433              	.LCFI21:
 434              		.cfi_def_cfa_offset 816
 435 020e 4885C0   		testq	%rax, %rax
 436 0211 0F84240C 		je	.L12
 436      0000
 437              		.loc 1 111 0 is_stmt 0
 438 0217 488D1500 		leaq	.LC0(%rip), %rdx
 438      000000
 439              	.L6:
 440              	.LVL25:
 441              	.LBB178:
 442              	.LBB179:
 443              		.loc 2 104 0 is_stmt 1 discriminator 4
 444 021e 488D3500 		leaq	.LC12(%rip), %rsi
 444      000000
 445 0225 BF010000 		movl	$1, %edi
 445      00
 446 022a B8000000 		movl	$0, %eax
 446      00
 447 022f E8000000 		call	__printf_chk@PLT
 447      00
 448              	.LVL26:
 449              	.LBE179:
GAS LISTING /tmp/cc4D9KId.s 			page 18


 450              	.LBE178:
 451              	.LBB180:
 452              	.LBB181:
 453 0234 488D3D00 		leaq	.LC17(%rip), %rdi
 453      000000
 454 023b E8000000 		call	puts@PLT
 454      00
 455              	.LVL27:
 456              	.LBE181:
 457              	.LBE180:
 112:src/main.c    **** 
 113:src/main.c    ****     //#############################################################################################
 114:src/main.c    ****     printf(">> getting obj1...\n");
 115:src/main.c    ****     obj1 = msg_parser_get_obj(msg, "obj1");
 458              		.loc 1 115 0 discriminator 4
 459 0240 488DBC24 		leaq	224(%rsp), %rdi
 459      E0000000 
 460 0248 FFB424D8 		pushq	216(%rsp)
 460      000000
 461              	.LCFI22:
 462              		.cfi_def_cfa_offset 824
 463 024f FFB424D8 		pushq	216(%rsp)
 463      000000
 464              	.LCFI23:
 465              		.cfi_def_cfa_offset 832
 466 0256 FFB424D8 		pushq	216(%rsp)
 466      000000
 467              	.LCFI24:
 468              		.cfi_def_cfa_offset 840
 469 025d FFB424D8 		pushq	216(%rsp)
 469      000000
 470              	.LCFI25:
 471              		.cfi_def_cfa_offset 848
 472 0264 488D3500 		leaq	.LC18(%rip), %rsi
 472      000000
 473 026b E8000000 		call	msg_parser_get_obj@PLT
 473      00
 474              	.LVL28:
 116:src/main.c    ****     printf("obj1.id_len: %d obj1.content_len: %d\n", obj1.id.len, obj1.content.len);
 475              		.loc 1 116 0 discriminator 4
 476 0270 0FB78C24 		movzwl	280(%rsp), %ecx
 476      18010000 
 477 0278 0FB79424 		movzwl	264(%rsp), %edx
 477      08010000 
 478              	.LVL29:
 479              	.LBB182:
 480              	.LBB183:
 481              		.loc 2 104 0 discriminator 4
 482 0280 4883C420 		addq	$32, %rsp
 483              	.LCFI26:
 484              		.cfi_def_cfa_offset 816
 485 0284 488D3500 		leaq	.LC19(%rip), %rsi
 485      000000
 486 028b BF010000 		movl	$1, %edi
 486      00
 487 0290 B8000000 		movl	$0, %eax
 487      00
GAS LISTING /tmp/cc4D9KId.s 			page 19


 488 0295 E8000000 		call	__printf_chk@PLT
 488      00
 489              	.LVL30:
 490              	.LBE183:
 491              	.LBE182:
 117:src/main.c    ****     hnd.print_str(obj1.id); printf(":"); hnd.print_str(obj1.content);
 492              		.loc 1 117 0 discriminator 4
 493 029a 488B9C24 		movq	704(%rsp), %rbx
 493      C0020000 
 494 02a2 488BBC24 		movq	224(%rsp), %rdi
 494      E0000000 
 495 02aa 488BB424 		movq	232(%rsp), %rsi
 495      E8000000 
 496 02b2 FFD3     		call	*%rbx
 497              	.LVL31:
 498              	.LBB184:
 499              	.LBB185:
 500              		.loc 2 104 0 discriminator 4
 501 02b4 BF3A0000 		movl	$58, %edi
 501      00
 502 02b9 E8000000 		call	putchar@PLT
 502      00
 503              	.LVL32:
 504              	.LBE185:
 505              	.LBE184:
 506              		.loc 1 117 0 discriminator 4
 507 02be 488BBC24 		movq	240(%rsp), %rdi
 507      F0000000 
 508 02c6 488BB424 		movq	248(%rsp), %rsi
 508      F8000000 
 509 02ce FFD3     		call	*%rbx
 510              	.LVL33:
 511              	.LBB186:
 512              	.LBB187:
 513              		.loc 2 104 0 discriminator 4
 514 02d0 488D3D00 		leaq	.LC8(%rip), %rdi
 514      000000
 515 02d7 E8000000 		call	puts@PLT
 515      00
 516              	.LVL34:
 517              	.LBE187:
 518              	.LBE186:
 519              	.LBB188:
 520              	.LBB189:
 521 02dc 488D3D00 		leaq	.LC20(%rip), %rdi
 521      000000
 522 02e3 E8000000 		call	puts@PLT
 522      00
 523              	.LVL35:
 524              	.LBE189:
 525              	.LBE188:
 118:src/main.c    ****     printf("\n\n");
 119:src/main.c    **** 
 120:src/main.c    ****     //#############################################################################################
 121:src/main.c    ****     printf(">> getting obj2...\n");
 122:src/main.c    ****     obj2 = msg_parser_get_obj(msg, "obj2");
 526              		.loc 1 122 0 discriminator 4
GAS LISTING /tmp/cc4D9KId.s 			page 20


 527 02e8 488DBC24 		leaq	256(%rsp), %rdi
 527      00010000 
 528 02f0 FFB424D8 		pushq	216(%rsp)
 528      000000
 529              	.LCFI27:
 530              		.cfi_def_cfa_offset 824
 531 02f7 FFB424D8 		pushq	216(%rsp)
 531      000000
 532              	.LCFI28:
 533              		.cfi_def_cfa_offset 832
 534 02fe FFB424D8 		pushq	216(%rsp)
 534      000000
 535              	.LCFI29:
 536              		.cfi_def_cfa_offset 840
 537 0305 FFB424D8 		pushq	216(%rsp)
 537      000000
 538              	.LCFI30:
 539              		.cfi_def_cfa_offset 848
 540 030c 488D3500 		leaq	.LC21(%rip), %rsi
 540      000000
 541 0313 E8000000 		call	msg_parser_get_obj@PLT
 541      00
 542              	.LVL36:
 123:src/main.c    ****     printf("obj2.id_len: %d obj2.content_len: %d\n", obj2.id.len, obj2.content.len);
 543              		.loc 1 123 0 discriminator 4
 544 0318 0FB78C24 		movzwl	312(%rsp), %ecx
 544      38010000 
 545 0320 0FB79424 		movzwl	296(%rsp), %edx
 545      28010000 
 546              	.LVL37:
 547              	.LBB190:
 548              	.LBB191:
 549              		.loc 2 104 0 discriminator 4
 550 0328 4883C420 		addq	$32, %rsp
 551              	.LCFI31:
 552              		.cfi_def_cfa_offset 816
 553 032c 488D3500 		leaq	.LC22(%rip), %rsi
 553      000000
 554 0333 BF010000 		movl	$1, %edi
 554      00
 555 0338 B8000000 		movl	$0, %eax
 555      00
 556 033d E8000000 		call	__printf_chk@PLT
 556      00
 557              	.LVL38:
 558              	.LBE191:
 559              	.LBE190:
 124:src/main.c    ****     hnd.print_str(obj2.id); printf(":"); hnd.print_str(obj2.content);
 560              		.loc 1 124 0 discriminator 4
 561 0342 488BBC24 		movq	256(%rsp), %rdi
 561      00010000 
 562 034a 488BB424 		movq	264(%rsp), %rsi
 562      08010000 
 563 0352 FFD3     		call	*%rbx
 564              	.LVL39:
 565              	.LBB192:
 566              	.LBB193:
GAS LISTING /tmp/cc4D9KId.s 			page 21


 567              		.loc 2 104 0 discriminator 4
 568 0354 BF3A0000 		movl	$58, %edi
 568      00
 569 0359 E8000000 		call	putchar@PLT
 569      00
 570              	.LVL40:
 571              	.LBE193:
 572              	.LBE192:
 573              		.loc 1 124 0 discriminator 4
 574 035e 488BBC24 		movq	272(%rsp), %rdi
 574      10010000 
 575 0366 488BB424 		movq	280(%rsp), %rsi
 575      18010000 
 576 036e FFD3     		call	*%rbx
 577              	.LVL41:
 578              	.LBB194:
 579              	.LBB195:
 580              		.loc 2 104 0 discriminator 4
 581 0370 488D3D00 		leaq	.LC8(%rip), %rdi
 581      000000
 582 0377 E8000000 		call	puts@PLT
 582      00
 583              	.LVL42:
 584              	.LBE195:
 585              	.LBE194:
 586              	.LBB196:
 587              	.LBB197:
 588 037c 488D3D00 		leaq	.LC23(%rip), %rdi
 588      000000
 589 0383 E8000000 		call	puts@PLT
 589      00
 590              	.LVL43:
 591              	.LBE197:
 592              	.LBE196:
 125:src/main.c    ****     printf("\n\n");
 126:src/main.c    ****     
 127:src/main.c    ****     //#############################################################################################
 128:src/main.c    ****     printf(">> getting obj1->key11 integer...\n");
 129:src/main.c    ****     int ival = 0, res;
 593              		.loc 1 129 0 discriminator 4
 594 0388 C7442478 		movl	$0, 120(%rsp)
 594      00000000 
 130:src/main.c    ****     float fval = 0.0;
 595              		.loc 1 130 0 discriminator 4
 596 0390 C744247C 		movl	$0x00000000, 124(%rsp)
 596      00000000 
 131:src/main.c    ****     res = msg_parser_get_int(&ival, obj1, "key11");
 597              		.loc 1 131 0 discriminator 4
 598 0398 488D7C24 		leaq	120(%rsp), %rdi
 598      78
 599 039d FFB424F8 		pushq	248(%rsp)
 599      000000
 600              	.LCFI32:
 601              		.cfi_def_cfa_offset 824
 602 03a4 FFB424F8 		pushq	248(%rsp)
 602      000000
 603              	.LCFI33:
GAS LISTING /tmp/cc4D9KId.s 			page 22


 604              		.cfi_def_cfa_offset 832
 605 03ab FFB424F8 		pushq	248(%rsp)
 605      000000
 606              	.LCFI34:
 607              		.cfi_def_cfa_offset 840
 608 03b2 FFB424F8 		pushq	248(%rsp)
 608      000000
 609              	.LCFI35:
 610              		.cfi_def_cfa_offset 848
 611 03b9 488D3500 		leaq	.LC25(%rip), %rsi
 611      000000
 612 03c0 E8000000 		call	msg_parser_get_int@PLT
 612      00
 613              	.LVL44:
 614 03c5 0FBED0   		movsbl	%al, %edx
 615              	.LVL45:
 616              	.LBB198:
 617              	.LBB199:
 618              		.loc 2 104 0 discriminator 4
 619 03c8 4883C420 		addq	$32, %rsp
 620              	.LCFI36:
 621              		.cfi_def_cfa_offset 816
 622 03cc 8B4C2478 		movl	120(%rsp), %ecx
 623 03d0 488D3500 		leaq	.LC26(%rip), %rsi
 623      000000
 624 03d7 BF010000 		movl	$1, %edi
 624      00
 625 03dc B8000000 		movl	$0, %eax
 625      00
 626 03e1 E8000000 		call	__printf_chk@PLT
 626      00
 627              	.LVL46:
 628              	.LBE199:
 629              	.LBE198:
 630              	.LBB200:
 631              	.LBB201:
 632 03e6 488D3D00 		leaq	.LC27(%rip), %rdi
 632      000000
 633 03ed E8000000 		call	puts@PLT
 633      00
 634              	.LVL47:
 635              	.LBE201:
 636              	.LBE200:
 132:src/main.c    ****     printf("r = %d ival = %d\n\n", res, ival);
 133:src/main.c    ****     
 134:src/main.c    ****     //#############################################################################################
 135:src/main.c    ****     printf(">> getting obj2->key21 float...\n");
 136:src/main.c    ****     res = msg_parser_get_float(&fval, obj2, "key21");
 637              		.loc 1 136 0 discriminator 4
 638 03f2 488D7C24 		leaq	124(%rsp), %rdi
 638      7C
 639 03f7 FFB42418 		pushq	280(%rsp)
 639      010000
 640              	.LCFI37:
 641              		.cfi_def_cfa_offset 824
 642 03fe FFB42418 		pushq	280(%rsp)
 642      010000
GAS LISTING /tmp/cc4D9KId.s 			page 23


 643              	.LCFI38:
 644              		.cfi_def_cfa_offset 832
 645 0405 FFB42418 		pushq	280(%rsp)
 645      010000
 646              	.LCFI39:
 647              		.cfi_def_cfa_offset 840
 648 040c FFB42418 		pushq	280(%rsp)
 648      010000
 649              	.LCFI40:
 650              		.cfi_def_cfa_offset 848
 651 0413 488D3500 		leaq	.LC28(%rip), %rsi
 651      000000
 652 041a E8000000 		call	msg_parser_get_float@PLT
 652      00
 653              	.LVL48:
 654 041f 0FBED0   		movsbl	%al, %edx
 655              	.LVL49:
 137:src/main.c    ****     printf("r = %d fval = %.11f\n\n", res, fval);
 656              		.loc 1 137 0 discriminator 4
 657 0422 660FEFC0 		pxor	%xmm0, %xmm0
 658 0426 F30F5A84 		cvtss2sd	156(%rsp), %xmm0
 658      249C0000 
 658      00
 659              	.LVL50:
 660              	.LBB202:
 661              	.LBB203:
 662              		.loc 2 104 0 discriminator 4
 663 042f 4883C420 		addq	$32, %rsp
 664              	.LCFI41:
 665              		.cfi_def_cfa_offset 816
 666 0433 488D3500 		leaq	.LC29(%rip), %rsi
 666      000000
 667 043a BF010000 		movl	$1, %edi
 667      00
 668 043f B8010000 		movl	$1, %eax
 668      00
 669 0444 E8000000 		call	__printf_chk@PLT
 669      00
 670              	.LVL51:
 671              	.LBE203:
 672              	.LBE202:
 673              	.LBB204:
 674              	.LBB205:
 675 0449 488D3D00 		leaq	.LC30(%rip), %rdi
 675      000000
 676 0450 E8000000 		call	puts@PLT
 676      00
 677              	.LVL52:
 678              	.LBE205:
 679              	.LBE204:
 138:src/main.c    **** 
 139:src/main.c    ****     //#############################################################################################
 140:src/main.c    ****     printf(">> getting obj1->key12 string...\n");
 141:src/main.c    ****     msg_str_t str = msg_parser_get_string(obj1, "key12");
 680              		.loc 1 141 0 discriminator 4
 681 0455 FFB424F8 		pushq	248(%rsp)
 681      000000
GAS LISTING /tmp/cc4D9KId.s 			page 24


 682              	.LCFI42:
 683              		.cfi_def_cfa_offset 824
 684 045c FFB424F8 		pushq	248(%rsp)
 684      000000
 685              	.LCFI43:
 686              		.cfi_def_cfa_offset 832
 687 0463 FFB424F8 		pushq	248(%rsp)
 687      000000
 688              	.LCFI44:
 689              		.cfi_def_cfa_offset 840
 690 046a FFB424F8 		pushq	248(%rsp)
 690      000000
 691              	.LCFI45:
 692              		.cfi_def_cfa_offset 848
 693 0471 488D3D00 		leaq	.LC31(%rip), %rdi
 693      000000
 694 0478 E8000000 		call	msg_parser_get_string@PLT
 694      00
 695              	.LVL53:
 696 047d 4889D5   		movq	%rdx, %rbp
 697              	.LVL54:
 142:src/main.c    ****     if(str.s != NULL) {
 698              		.loc 1 142 0 discriminator 4
 699 0480 4883C420 		addq	$32, %rsp
 700              	.LCFI46:
 701              		.cfi_def_cfa_offset 816
 702 0484 4885C0   		testq	%rax, %rax
 703 0487 0F84BA09 		je	.L7
 703      0000
 143:src/main.c    ****         hnd.print_str(str); printf(" len: %d\n\n", str.len);
 704              		.loc 1 143 0
 705 048d 4889C7   		movq	%rax, %rdi
 706              	.LVL55:
 707 0490 4889D6   		movq	%rdx, %rsi
 708 0493 FFD3     		call	*%rbx
 709              	.LVL56:
 710 0495 0FB7D5   		movzwl	%bp, %edx
 711              	.LVL57:
 712              	.LBB206:
 713              	.LBB207:
 714              		.loc 2 104 0
 715 0498 488D3500 		leaq	.LC32(%rip), %rsi
 715      000000
 716 049f BF010000 		movl	$1, %edi
 716      00
 717 04a4 B8000000 		movl	$0, %eax
 717      00
 718 04a9 E8000000 		call	__printf_chk@PLT
 718      00
 719              	.LVL58:
 720              	.L8:
 721              	.LBE207:
 722              	.LBE206:
 723              	.LBB208:
 724              	.LBB209:
 725 04ae 488D3D00 		leaq	.LC34(%rip), %rdi
 725      000000
GAS LISTING /tmp/cc4D9KId.s 			page 25


 726 04b5 E8000000 		call	puts@PLT
 726      00
 727              	.LVL59:
 728              	.LBE209:
 729              	.LBE208:
 730              	.LBB210:
 731              	.LBB211:
 732 04ba 488D3D00 		leaq	.LC35(%rip), %rdi
 732      000000
 733 04c1 E8000000 		call	puts@PLT
 733      00
 734              	.LVL60:
 735              	.LBE211:
 736              	.LBE210:
 144:src/main.c    ****     } else {
 145:src/main.c    ****         printf("error getting string\n\n");
 146:src/main.c    ****     }
 147:src/main.c    ****     
 148:src/main.c    ****     
 149:src/main.c    **** 
 150:src/main.c    **** 
 151:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 152:src/main.c    **** //                                 MCU-MSG Wrapper test                                      //
 153:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////////
 154:src/main.c    **** #if MCU_MSG_USE_WRAPPER  
 155:src/main.c    **** 
 156:src/main.c    ****     printf("TEST mcu-msg-wrapper\n");
 157:src/main.c    ****     printf("====================\n");
 158:src/main.c    **** 
 159:src/main.c    ****     // msg_wrap_hnd_t wrapper_hnd = msg_wrapper_hnd_create(putchar);
 160:src/main.c    ****     msg_wrap_t msg_wrap;
 161:src/main.c    ****     msg_wrap_obj_t obj1_wrap, obj2_wrap;
 162:src/main.c    ****     msg_wrap_str_t str1, str2, str3;
 163:src/main.c    ****     msg_wrap_int_t i1, i2;
 164:src/main.c    ****     msg_wrap_float_t f1, f2;
 165:src/main.c    ****     msg_wrap_cmd_t cmd_wrap, cmd_rem;
 166:src/main.c    ****     msg_t msg_reparsed;
 167:src/main.c    ****     msg_obj_t obj_reparsed;
 168:src/main.c    ****     float f_val; 
 169:src/main.c    ****     int i_val;
 170:src/main.c    ****     
 171:src/main.c    ****     msg_wrap = msg_wrapper_init_msg("wrapped_msg");
 737              		.loc 1 171 0
 738 04c6 488D7C24 		leaq	80(%rsp), %rdi
 738      50
 739 04cb 488D3500 		leaq	.LC36(%rip), %rsi
 739      000000
 740 04d2 E8000000 		call	msg_wrapper_init_msg@PLT
 740      00
 741              	.LVL61:
 742 04d7 488B4424 		movq	80(%rsp), %rax
 742      50
 743 04dc 488B5424 		movq	88(%rsp), %rdx
 743      58
 744 04e1 48898424 		movq	%rax, 288(%rsp)
 744      20010000 
 745 04e9 48899424 		movq	%rdx, 296(%rsp)
GAS LISTING /tmp/cc4D9KId.s 			page 26


 745      28010000 
 746 04f1 488B4424 		movq	96(%rsp), %rax
 746      60
 747 04f6 488B5424 		movq	104(%rsp), %rdx
 747      68
 748 04fb 48898424 		movq	%rax, 304(%rsp)
 748      30010000 
 749 0503 48899424 		movq	%rdx, 312(%rsp)
 749      38010000 
 750              	.LVL62:
 751              	.LBB212:
 752              	.LBB213:
 753              		.loc 2 104 0
 754 050b 488D3500 		leaq	.LC37(%rip), %rsi
 754      000000
 755 0512 BF010000 		movl	$1, %edi
 755      00
 756 0517 B8000000 		movl	$0, %eax
 756      00
 757 051c E8000000 		call	__printf_chk@PLT
 757      00
 758              	.LVL63:
 759              	.LBE213:
 760              	.LBE212:
 172:src/main.c    ****     printf("Initialized msg: #"); hnd.print_str(msg_wrap.id); printf("\n\n");
 761              		.loc 1 172 0
 762 0521 488B9C24 		movq	704(%rsp), %rbx
 762      C0020000 
 763 0529 488BBC24 		movq	288(%rsp), %rdi
 763      20010000 
 764 0531 488BB424 		movq	296(%rsp), %rsi
 764      28010000 
 765 0539 FFD3     		call	*%rbx
 766              	.LVL64:
 767              	.LBB214:
 768              	.LBB215:
 769              		.loc 2 104 0
 770 053b 488D3D00 		leaq	.LC8(%rip), %rdi
 770      000000
 771 0542 E8000000 		call	puts@PLT
 771      00
 772              	.LVL65:
 773              	.LBE215:
 774              	.LBE214:
 173:src/main.c    ****     
 174:src/main.c    ****     obj1_wrap = msg_wrapper_init_obj("wrapped_obj1");
 775              		.loc 1 174 0
 776 0547 4C8D6C24 		leaq	32(%rsp), %r13
 776      20
 777 054c 488D3500 		leaq	.LC38(%rip), %rsi
 777      000000
 778 0553 4C89EF   		movq	%r13, %rdi
 779 0556 E8000000 		call	msg_wrapper_init_obj@PLT
 779      00
 780              	.LVL66:
 781 055b 488B4424 		movq	32(%rsp), %rax
 781      20
GAS LISTING /tmp/cc4D9KId.s 			page 27


 782 0560 488B5424 		movq	40(%rsp), %rdx
 782      28
 783 0565 48898424 		movq	%rax, 592(%rsp)
 783      50020000 
 784 056d 48899424 		movq	%rdx, 600(%rsp)
 784      58020000 
 785 0575 488B4424 		movq	48(%rsp), %rax
 785      30
 786 057a 488B5424 		movq	56(%rsp), %rdx
 786      38
 787 057f 48898424 		movq	%rax, 608(%rsp)
 787      60020000 
 788 0587 48899424 		movq	%rdx, 616(%rsp)
 788      68020000 
 789 058f 488B4424 		movq	64(%rsp), %rax
 789      40
 790 0594 488B5424 		movq	72(%rsp), %rdx
 790      48
 791 0599 48898424 		movq	%rax, 624(%rsp)
 791      70020000 
 792 05a1 48899424 		movq	%rdx, 632(%rsp)
 792      78020000 
 793              	.LVL67:
 794              	.LBB216:
 795              	.LBB217:
 796              		.loc 2 104 0
 797 05a9 488D3500 		leaq	.LC39(%rip), %rsi
 797      000000
 798 05b0 BF010000 		movl	$1, %edi
 798      00
 799 05b5 B8000000 		movl	$0, %eax
 799      00
 800 05ba E8000000 		call	__printf_chk@PLT
 800      00
 801              	.LVL68:
 802              	.LBE217:
 803              	.LBE216:
 175:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj1_wrap.id); printf("\n\n");
 804              		.loc 1 175 0
 805 05bf 488BBC24 		movq	592(%rsp), %rdi
 805      50020000 
 806 05c7 488BB424 		movq	600(%rsp), %rsi
 806      58020000 
 807 05cf FFD3     		call	*%rbx
 808              	.LVL69:
 809              	.LBB218:
 810              	.LBB219:
 811              		.loc 2 104 0
 812 05d1 488D3D00 		leaq	.LC8(%rip), %rdi
 812      000000
 813 05d8 E8000000 		call	puts@PLT
 813      00
 814              	.LVL70:
 815              	.LBE219:
 816              	.LBE218:
 176:src/main.c    **** 
 177:src/main.c    **** 
GAS LISTING /tmp/cc4D9KId.s 			page 28


 178:src/main.c    ****     str1 = msg_wrapper_init_string("str1", "This is \"string 1\"");
 817              		.loc 1 178 0
 818 05dd 488D1500 		leaq	.LC40(%rip), %rdx
 818      000000
 819 05e4 488D3500 		leaq	.LC41(%rip), %rsi
 819      000000
 820 05eb 4C89EF   		movq	%r13, %rdi
 821 05ee E8000000 		call	msg_wrapper_init_string@PLT
 821      00
 822              	.LVL71:
 823 05f3 488B4424 		movq	32(%rsp), %rax
 823      20
 824 05f8 488B5424 		movq	40(%rsp), %rdx
 824      28
 825 05fd 48898424 		movq	%rax, 448(%rsp)
 825      C0010000 
 826 0605 48899424 		movq	%rdx, 456(%rsp)
 826      C8010000 
 827 060d 488B4424 		movq	48(%rsp), %rax
 827      30
 828 0612 488B5424 		movq	56(%rsp), %rdx
 828      38
 829 0617 48898424 		movq	%rax, 464(%rsp)
 829      D0010000 
 830 061f 48899424 		movq	%rdx, 472(%rsp)
 830      D8010000 
 831 0627 488B4424 		movq	64(%rsp), %rax
 831      40
 832 062c 48898424 		movq	%rax, 480(%rsp)
 832      E0010000 
 833              	.LVL72:
 834              	.LBB220:
 835              	.LBB221:
 836              		.loc 2 104 0
 837 0634 488D3500 		leaq	.LC42(%rip), %rsi
 837      000000
 838 063b BF010000 		movl	$1, %edi
 838      00
 839 0640 B8000000 		movl	$0, %eax
 839      00
 840 0645 E8000000 		call	__printf_chk@PLT
 840      00
 841              	.LVL73:
 842              	.LBE221:
 843              	.LBE220:
 179:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str1.id); putchar('='); hnd.print_str(str1.content)
 844              		.loc 1 179 0
 845 064a 488BBC24 		movq	448(%rsp), %rdi
 845      C0010000 
 846 0652 488BB424 		movq	456(%rsp), %rsi
 846      C8010000 
 847 065a FFD3     		call	*%rbx
 848              	.LVL74:
 849              	.LBB222:
 850              	.LBB223:
 851              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Optimizing macros and inline functions for stdio functions.
GAS LISTING /tmp/cc4D9KId.s 			page 29


   2:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Copyright (C) 1998-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # error "Never include <bits/stdio.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifndef __extern_inline
  24:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE inline
  25:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #else
  26:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # define __STDIO_INLINE __extern_inline
  27:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #endif
  28:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/stdio.h **** #ifdef __USE_EXTERN_INLINES
  31:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
  32:/usr/include/x86_64-linux-gnu/bits/stdio.h ****    inline.  */
  33:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
  34:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write formatted output to stdout from argument list ARG.  */
  35:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  36:/usr/include/x86_64-linux-gnu/bits/stdio.h **** vprintf (const char *__restrict __fmt, _G_va_list __arg)
  37:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  38:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return vfprintf (stdout, __fmt, __arg);
  39:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  40:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Read a character from stdin.  */
  43:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  44:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar (void)
  45:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc (stdin);
  47:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  48:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_MISC
  51:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Faster version when locking is not necessary.  */
  52:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  53:/usr/include/x86_64-linux-gnu/bits/stdio.h **** fgetc_unlocked (FILE *__fp)
  54:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  55:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  56:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  57:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif /* misc */
  58:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
GAS LISTING /tmp/cc4D9KId.s 			page 30


  59:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  60:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # ifdef __USE_POSIX
  61:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  62:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  63:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getc_unlocked (FILE *__fp)
  64:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  65:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (__fp);
  66:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  68:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* This is defined in POSIX.1:1996.  */
  69:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  70:/usr/include/x86_64-linux-gnu/bits/stdio.h **** getchar_unlocked (void)
  71:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  72:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_getc_unlocked (stdin);
  73:/usr/include/x86_64-linux-gnu/bits/stdio.h **** }
  74:/usr/include/x86_64-linux-gnu/bits/stdio.h **** # endif	/* POSIX */
  75:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  76:/usr/include/x86_64-linux-gnu/bits/stdio.h **** 
  77:/usr/include/x86_64-linux-gnu/bits/stdio.h **** /* Write a character to stdout.  */
  78:/usr/include/x86_64-linux-gnu/bits/stdio.h **** __STDIO_INLINE int
  79:/usr/include/x86_64-linux-gnu/bits/stdio.h **** putchar (int __c)
  80:/usr/include/x86_64-linux-gnu/bits/stdio.h **** {
  81:/usr/include/x86_64-linux-gnu/bits/stdio.h ****   return _IO_putc (__c, stdout);
 852              		.loc 3 81 0
 853 065c 488B3500 		movq	stdout(%rip), %rsi
 853      000000
 854 0663 BF3D0000 		movl	$61, %edi
 854      00
 855 0668 E8000000 		call	_IO_putc@PLT
 855      00
 856              	.LVL75:
 857              	.LBE223:
 858              	.LBE222:
 859              		.loc 1 179 0
 860 066d 488BBC24 		movq	464(%rsp), %rdi
 860      D0010000 
 861 0675 488BB424 		movq	472(%rsp), %rsi
 861      D8010000 
 862 067d FFD3     		call	*%rbx
 863              	.LVL76:
 864              	.LBB224:
 865              	.LBB225:
 866              		.loc 2 104 0
 867 067f 488D3D00 		leaq	.LC8(%rip), %rdi
 867      000000
 868 0686 E8000000 		call	puts@PLT
 868      00
 869              	.LVL77:
 870              	.LBE225:
 871              	.LBE224:
 180:src/main.c    ****     
 181:src/main.c    ****     str2 = msg_wrapper_init_string("str2", "This is 'string 2'");
 872              		.loc 1 181 0
 873 068b 488D1500 		leaq	.LC43(%rip), %rdx
 873      000000
 874 0692 488D3500 		leaq	.LC44(%rip), %rsi
 874      000000
GAS LISTING /tmp/cc4D9KId.s 			page 31


 875 0699 4C89EF   		movq	%r13, %rdi
 876 069c E8000000 		call	msg_wrapper_init_string@PLT
 876      00
 877              	.LVL78:
 878 06a1 488B4424 		movq	32(%rsp), %rax
 878      20
 879 06a6 488B5424 		movq	40(%rsp), %rdx
 879      28
 880 06ab 48898424 		movq	%rax, 496(%rsp)
 880      F0010000 
 881 06b3 48899424 		movq	%rdx, 504(%rsp)
 881      F8010000 
 882 06bb 488B4424 		movq	48(%rsp), %rax
 882      30
 883 06c0 488B5424 		movq	56(%rsp), %rdx
 883      38
 884 06c5 48898424 		movq	%rax, 512(%rsp)
 884      00020000 
 885 06cd 48899424 		movq	%rdx, 520(%rsp)
 885      08020000 
 886 06d5 488B4424 		movq	64(%rsp), %rax
 886      40
 887 06da 48898424 		movq	%rax, 528(%rsp)
 887      10020000 
 888              	.LVL79:
 889              	.LBB226:
 890              	.LBB227:
 891              		.loc 2 104 0
 892 06e2 488D3500 		leaq	.LC42(%rip), %rsi
 892      000000
 893 06e9 BF010000 		movl	$1, %edi
 893      00
 894 06ee B8000000 		movl	$0, %eax
 894      00
 895 06f3 E8000000 		call	__printf_chk@PLT
 895      00
 896              	.LVL80:
 897              	.LBE227:
 898              	.LBE226:
 182:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str2.id); putchar('='); hnd.print_str(str2.content)
 899              		.loc 1 182 0
 900 06f8 488BBC24 		movq	496(%rsp), %rdi
 900      F0010000 
 901 0700 488BB424 		movq	504(%rsp), %rsi
 901      F8010000 
 902 0708 FFD3     		call	*%rbx
 903              	.LVL81:
 904              	.LBB228:
 905              	.LBB229:
 906              		.loc 3 81 0
 907 070a 488B3500 		movq	stdout(%rip), %rsi
 907      000000
 908 0711 BF3D0000 		movl	$61, %edi
 908      00
 909 0716 E8000000 		call	_IO_putc@PLT
 909      00
 910              	.LVL82:
GAS LISTING /tmp/cc4D9KId.s 			page 32


 911              	.LBE229:
 912              	.LBE228:
 913              		.loc 1 182 0
 914 071b 488BBC24 		movq	512(%rsp), %rdi
 914      00020000 
 915 0723 488BB424 		movq	520(%rsp), %rsi
 915      08020000 
 916 072b FFD3     		call	*%rbx
 917              	.LVL83:
 918              	.LBB230:
 919              	.LBB231:
 920              		.loc 2 104 0
 921 072d 488D3D00 		leaq	.LC8(%rip), %rdi
 921      000000
 922 0734 E8000000 		call	puts@PLT
 922      00
 923              	.LVL84:
 924              	.LBE231:
 925              	.LBE230:
 183:src/main.c    **** 
 184:src/main.c    ****     str3 = msg_wrapper_init_string("str3", ".... \"string 3\"");
 926              		.loc 1 184 0
 927 0739 488D1500 		leaq	.LC45(%rip), %rdx
 927      000000
 928 0740 488D3500 		leaq	.LC46(%rip), %rsi
 928      000000
 929 0747 4C89EF   		movq	%r13, %rdi
 930 074a E8000000 		call	msg_wrapper_init_string@PLT
 930      00
 931              	.LVL85:
 932 074f 488B4424 		movq	32(%rsp), %rax
 932      20
 933 0754 488B5424 		movq	40(%rsp), %rdx
 933      28
 934 0759 48898424 		movq	%rax, 544(%rsp)
 934      20020000 
 935 0761 48899424 		movq	%rdx, 552(%rsp)
 935      28020000 
 936 0769 488B4424 		movq	48(%rsp), %rax
 936      30
 937 076e 488B5424 		movq	56(%rsp), %rdx
 937      38
 938 0773 48898424 		movq	%rax, 560(%rsp)
 938      30020000 
 939 077b 48899424 		movq	%rdx, 568(%rsp)
 939      38020000 
 940 0783 488B4424 		movq	64(%rsp), %rax
 940      40
 941 0788 48898424 		movq	%rax, 576(%rsp)
 941      40020000 
 942              	.LVL86:
 943              	.LBB232:
 944              	.LBB233:
 945              		.loc 2 104 0
 946 0790 488D3500 		leaq	.LC42(%rip), %rsi
 946      000000
 947 0797 BF010000 		movl	$1, %edi
GAS LISTING /tmp/cc4D9KId.s 			page 33


 947      00
 948 079c B8000000 		movl	$0, %eax
 948      00
 949 07a1 E8000000 		call	__printf_chk@PLT
 949      00
 950              	.LVL87:
 951              	.LBE233:
 952              	.LBE232:
 185:src/main.c    ****     printf("Initialized str: $"); hnd.print_str(str3.id); putchar('='); hnd.print_str(str3.content)
 953              		.loc 1 185 0
 954 07a6 488BBC24 		movq	544(%rsp), %rdi
 954      20020000 
 955 07ae 488BB424 		movq	552(%rsp), %rsi
 955      28020000 
 956 07b6 FFD3     		call	*%rbx
 957              	.LVL88:
 958              	.LBB234:
 959              	.LBB235:
 960              		.loc 3 81 0
 961 07b8 488B3500 		movq	stdout(%rip), %rsi
 961      000000
 962 07bf BF3D0000 		movl	$61, %edi
 962      00
 963 07c4 E8000000 		call	_IO_putc@PLT
 963      00
 964              	.LVL89:
 965              	.LBE235:
 966              	.LBE234:
 967              		.loc 1 185 0
 968 07c9 488BBC24 		movq	560(%rsp), %rdi
 968      30020000 
 969 07d1 488BB424 		movq	568(%rsp), %rsi
 969      38020000 
 970 07d9 FFD3     		call	*%rbx
 971              	.LVL90:
 972              	.LBB236:
 973              	.LBB237:
 974              		.loc 2 104 0
 975 07db 488D3D00 		leaq	.LC8(%rip), %rdi
 975      000000
 976 07e2 E8000000 		call	puts@PLT
 976      00
 977              	.LVL91:
 978              	.LBE237:
 979              	.LBE236:
 980              	.LBB238:
 981              	.LBB239:
 982 07e7 488D3D00 		leaq	.LC47(%rip), %rdi
 982      000000
 983 07ee E8000000 		call	puts@PLT
 983      00
 984              	.LVL92:
 985              	.LBE239:
 986              	.LBE238:
 186:src/main.c    **** 
 187:src/main.c    ****     /* Preapare object */
 188:src/main.c    ****     printf("Add '$str2', '$str3' to '@wrapped_obj1'...\n\n");
GAS LISTING /tmp/cc4D9KId.s 			page 34


 189:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str2);
 987              		.loc 1 189 0
 988 07f3 4C8DBC24 		leaq	496(%rsp), %r15
 988      F0010000 
 989 07fb 4C8DA424 		leaq	592(%rsp), %r12
 989      50020000 
 990 0803 4C89FE   		movq	%r15, %rsi
 991 0806 4C89E7   		movq	%r12, %rdi
 992 0809 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 992      00
 993              	.LVL93:
 190:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj1_wrap, &str3);
 994              		.loc 1 190 0
 995 080e 488DB424 		leaq	544(%rsp), %rsi
 995      20020000 
 996 0816 4C89E7   		movq	%r12, %rdi
 997 0819 E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 997      00
 998              	.LVL94:
 999              	.LBB240:
 1000              	.LBB241:
 1001              		.loc 2 104 0
 1002 081e 488D3D00 		leaq	.LC48(%rip), %rdi
 1002      000000
 1003 0825 E8000000 		call	puts@PLT
 1003      00
 1004              	.LVL95:
 1005              	.LBE241:
 1006              	.LBE240:
 191:src/main.c    **** 
 192:src/main.c    ****     printf("Add '@wrapped_obj1' to '#wrapped_msg'...\n\n");
 193:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1007              		.loc 1 193 0
 1008 082a 488DAC24 		leaq	288(%rsp), %rbp
 1008      20010000 
 1009 0832 4C89E6   		movq	%r12, %rsi
 1010 0835 4889EF   		movq	%rbp, %rdi
 1011 0838 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1011      00
 1012              	.LVL96:
 194:src/main.c    **** 
 195:src/main.c    ****     cmd_wrap = msg_wrapper_init_cmd("CMD_WRAP");
 1013              		.loc 1 195 0
 1014 083d 488D3500 		leaq	.LC49(%rip), %rsi
 1014      000000
 1015 0844 4C89EF   		movq	%r13, %rdi
 1016 0847 E8000000 		call	msg_wrapper_init_cmd@PLT
 1016      00
 1017              	.LVL97:
 1018 084c 488B4424 		movq	32(%rsp), %rax
 1018      20
 1019 0851 488B5424 		movq	40(%rsp), %rdx
 1019      28
 1020 0856 48898424 		movq	%rax, 128(%rsp)
 1020      80000000 
 1021 085e 48899424 		movq	%rdx, 136(%rsp)
 1021      88000000 
GAS LISTING /tmp/cc4D9KId.s 			page 35


 1022 0866 488B4424 		movq	48(%rsp), %rax
 1022      30
 1023 086b 48898424 		movq	%rax, 144(%rsp)
 1023      90000000 
 1024              	.LVL98:
 1025              	.LBB242:
 1026              	.LBB243:
 1027              		.loc 2 104 0
 1028 0873 488D3500 		leaq	.LC50(%rip), %rsi
 1028      000000
 1029 087a BF010000 		movl	$1, %edi
 1029      00
 1030 087f B8000000 		movl	$0, %eax
 1030      00
 1031 0884 E8000000 		call	__printf_chk@PLT
 1031      00
 1032              	.LVL99:
 1033              	.LBE243:
 1034              	.LBE242:
 196:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_wrap.cmd); printf(">\n\n");
 1035              		.loc 1 196 0
 1036 0889 488BBC24 		movq	128(%rsp), %rdi
 1036      80000000 
 1037 0891 488BB424 		movq	136(%rsp), %rsi
 1037      88000000 
 1038 0899 FFD3     		call	*%rbx
 1039              	.LVL100:
 1040              	.LBB244:
 1041              	.LBB245:
 1042              		.loc 2 104 0
 1043 089b 488D3D00 		leaq	.LC51(%rip), %rdi
 1043      000000
 1044 08a2 E8000000 		call	puts@PLT
 1044      00
 1045              	.LVL101:
 1046              	.LBE245:
 1047              	.LBE244:
 197:src/main.c    ****     
 198:src/main.c    ****     cmd_rem = msg_wrapper_init_cmd("CMD_REMOVEABLE");
 1048              		.loc 1 198 0
 1049 08a7 488D3500 		leaq	.LC52(%rip), %rsi
 1049      000000
 1050 08ae 4C89EF   		movq	%r13, %rdi
 1051 08b1 E8000000 		call	msg_wrapper_init_cmd@PLT
 1051      00
 1052              	.LVL102:
 1053 08b6 488B4424 		movq	32(%rsp), %rax
 1053      20
 1054 08bb 488B5424 		movq	40(%rsp), %rdx
 1054      28
 1055 08c0 48898424 		movq	%rax, 160(%rsp)
 1055      A0000000 
 1056 08c8 48899424 		movq	%rdx, 168(%rsp)
 1056      A8000000 
 1057 08d0 488B4424 		movq	48(%rsp), %rax
 1057      30
 1058 08d5 48898424 		movq	%rax, 176(%rsp)
GAS LISTING /tmp/cc4D9KId.s 			page 36


 1058      B0000000 
 1059              	.LVL103:
 1060              	.LBB246:
 1061              	.LBB247:
 1062              		.loc 2 104 0
 1063 08dd 488D3500 		leaq	.LC50(%rip), %rsi
 1063      000000
 1064 08e4 BF010000 		movl	$1, %edi
 1064      00
 1065 08e9 B8000000 		movl	$0, %eax
 1065      00
 1066 08ee E8000000 		call	__printf_chk@PLT
 1066      00
 1067              	.LVL104:
 1068              	.LBE247:
 1069              	.LBE246:
 199:src/main.c    ****     printf("Initialized cmd: <"); hnd.print_str(cmd_rem.cmd); printf(">\n\n");
 1070              		.loc 1 199 0
 1071 08f3 488BBC24 		movq	160(%rsp), %rdi
 1071      A0000000 
 1072 08fb 488BB424 		movq	168(%rsp), %rsi
 1072      A8000000 
 1073 0903 FFD3     		call	*%rbx
 1074              	.LVL105:
 1075              	.LBB248:
 1076              	.LBB249:
 1077              		.loc 2 104 0
 1078 0905 488D3D00 		leaq	.LC51(%rip), %rdi
 1078      000000
 1079 090c E8000000 		call	puts@PLT
 1079      00
 1080              	.LVL106:
 1081              	.LBE249:
 1082              	.LBE248:
 200:src/main.c    **** 
 201:src/main.c    ****     i1 = msg_wrapper_init_int("i1", -3244);
 1083              		.loc 1 201 0
 1084 0911 BA54F3FF 		movl	$-3244, %edx
 1084      FF
 1085 0916 488D3500 		leaq	.LC53(%rip), %rsi
 1085      000000
 1086 091d 4C89EF   		movq	%r13, %rdi
 1087 0920 E8000000 		call	msg_wrapper_init_int@PLT
 1087      00
 1088              	.LVL107:
 1089 0925 488B4424 		movq	32(%rsp), %rax
 1089      20
 1090 092a 488B5424 		movq	40(%rsp), %rdx
 1090      28
 1091 092f 48898424 		movq	%rax, 320(%rsp)
 1091      40010000 
 1092 0937 48899424 		movq	%rdx, 328(%rsp)
 1092      48010000 
 1093 093f 488B4424 		movq	48(%rsp), %rax
 1093      30
 1094 0944 488B5424 		movq	56(%rsp), %rdx
 1094      38
GAS LISTING /tmp/cc4D9KId.s 			page 37


 1095 0949 48898424 		movq	%rax, 336(%rsp)
 1095      50010000 
 1096 0951 48899424 		movq	%rdx, 344(%rsp)
 1096      58010000 
 1097              	.LVL108:
 1098              	.LBB250:
 1099              	.LBB251:
 1100              		.loc 2 104 0
 1101 0959 488D3500 		leaq	.LC54(%rip), %rsi
 1101      000000
 1102 0960 BF010000 		movl	$1, %edi
 1102      00
 1103 0965 B8000000 		movl	$0, %eax
 1103      00
 1104 096a E8000000 		call	__printf_chk@PLT
 1104      00
 1105              	.LVL109:
 1106              	.LBE251:
 1107              	.LBE250:
 202:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i1.id); printf("=%d\n\n", i1.val);
 1108              		.loc 1 202 0
 1109 096f 488BBC24 		movq	320(%rsp), %rdi
 1109      40010000 
 1110 0977 488BB424 		movq	328(%rsp), %rsi
 1110      48010000 
 1111 097f FFD3     		call	*%rbx
 1112              	.LVL110:
 1113              	.LBB252:
 1114              	.LBB253:
 1115              		.loc 2 104 0
 1116 0981 8B942450 		movl	336(%rsp), %edx
 1116      010000
 1117 0988 488D3500 		leaq	.LC55(%rip), %rsi
 1117      000000
 1118 098f BF010000 		movl	$1, %edi
 1118      00
 1119 0994 B8000000 		movl	$0, %eax
 1119      00
 1120 0999 E8000000 		call	__printf_chk@PLT
 1120      00
 1121              	.LVL111:
 1122              	.LBE253:
 1123              	.LBE252:
 203:src/main.c    **** 
 204:src/main.c    ****     i2 = msg_wrapper_init_int("i2", 456789);
 1124              		.loc 1 204 0
 1125 099e BA55F806 		movl	$456789, %edx
 1125      00
 1126 09a3 488D3500 		leaq	.LC56(%rip), %rsi
 1126      000000
 1127 09aa 4C89EF   		movq	%r13, %rdi
 1128 09ad E8000000 		call	msg_wrapper_init_int@PLT
 1128      00
 1129              	.LVL112:
 1130 09b2 488B4424 		movq	32(%rsp), %rax
 1130      20
 1131 09b7 488B5424 		movq	40(%rsp), %rdx
GAS LISTING /tmp/cc4D9KId.s 			page 38


 1131      28
 1132 09bc 48898424 		movq	%rax, 352(%rsp)
 1132      60010000 
 1133 09c4 48899424 		movq	%rdx, 360(%rsp)
 1133      68010000 
 1134 09cc 488B4424 		movq	48(%rsp), %rax
 1134      30
 1135 09d1 488B5424 		movq	56(%rsp), %rdx
 1135      38
 1136 09d6 48898424 		movq	%rax, 368(%rsp)
 1136      70010000 
 1137 09de 48899424 		movq	%rdx, 376(%rsp)
 1137      78010000 
 1138              	.LVL113:
 1139              	.LBB254:
 1140              	.LBB255:
 1141              		.loc 2 104 0
 1142 09e6 488D3500 		leaq	.LC54(%rip), %rsi
 1142      000000
 1143 09ed BF010000 		movl	$1, %edi
 1143      00
 1144 09f2 B8000000 		movl	$0, %eax
 1144      00
 1145 09f7 E8000000 		call	__printf_chk@PLT
 1145      00
 1146              	.LVL114:
 1147              	.LBE255:
 1148              	.LBE254:
 205:src/main.c    ****     printf("Initialized int: $"); hnd.print_str(i2.id); printf("=%d\n\n", i2.val);
 1149              		.loc 1 205 0
 1150 09fc 488BBC24 		movq	352(%rsp), %rdi
 1150      60010000 
 1151 0a04 488BB424 		movq	360(%rsp), %rsi
 1151      68010000 
 1152 0a0c FFD3     		call	*%rbx
 1153              	.LVL115:
 1154              	.LBB256:
 1155              	.LBB257:
 1156              		.loc 2 104 0
 1157 0a0e 8B942470 		movl	368(%rsp), %edx
 1157      010000
 1158 0a15 488D3500 		leaq	.LC55(%rip), %rsi
 1158      000000
 1159 0a1c BF010000 		movl	$1, %edi
 1159      00
 1160 0a21 B8000000 		movl	$0, %eax
 1160      00
 1161 0a26 E8000000 		call	__printf_chk@PLT
 1161      00
 1162              	.LVL116:
 1163              	.LBE257:
 1164              	.LBE256:
 206:src/main.c    ****     
 207:src/main.c    ****     f1 = msg_wrapper_init_float("f1", 1.23456, 6);
 1165              		.loc 1 207 0
 1166 0a2b BA060000 		movl	$6, %edx
 1166      00
GAS LISTING /tmp/cc4D9KId.s 			page 39


 1167 0a30 F30F1005 		movss	.LC58(%rip), %xmm0
 1167      00000000 
 1168 0a38 488D3500 		leaq	.LC57(%rip), %rsi
 1168      000000
 1169 0a3f 4C89EF   		movq	%r13, %rdi
 1170 0a42 E8000000 		call	msg_wrapper_init_float@PLT
 1170      00
 1171              	.LVL117:
 1172 0a47 488B4424 		movq	32(%rsp), %rax
 1172      20
 1173 0a4c 488B5424 		movq	40(%rsp), %rdx
 1173      28
 1174 0a51 48898424 		movq	%rax, 384(%rsp)
 1174      80010000 
 1175 0a59 48899424 		movq	%rdx, 392(%rsp)
 1175      88010000 
 1176 0a61 488B4424 		movq	48(%rsp), %rax
 1176      30
 1177 0a66 488B5424 		movq	56(%rsp), %rdx
 1177      38
 1178 0a6b 48898424 		movq	%rax, 400(%rsp)
 1178      90010000 
 1179 0a73 48899424 		movq	%rdx, 408(%rsp)
 1179      98010000 
 1180              	.LVL118:
 1181              	.LBB258:
 1182              	.LBB259:
 1183              		.loc 2 104 0
 1184 0a7b 488D3500 		leaq	.LC59(%rip), %rsi
 1184      000000
 1185 0a82 BF010000 		movl	$1, %edi
 1185      00
 1186 0a87 B8000000 		movl	$0, %eax
 1186      00
 1187 0a8c E8000000 		call	__printf_chk@PLT
 1187      00
 1188              	.LVL119:
 1189              	.LBE259:
 1190              	.LBE258:
 208:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f1.id); printf("=%.6f\n\n", f1.val);
 1191              		.loc 1 208 0
 1192 0a91 488BBC24 		movq	384(%rsp), %rdi
 1192      80010000 
 1193 0a99 488BB424 		movq	392(%rsp), %rsi
 1193      88010000 
 1194 0aa1 FFD3     		call	*%rbx
 1195              	.LVL120:
 1196 0aa3 660FEFC0 		pxor	%xmm0, %xmm0
 1197 0aa7 F30F5A84 		cvtss2sd	400(%rsp), %xmm0
 1197      24900100 
 1197      00
 1198              	.LVL121:
 1199              	.LBB260:
 1200              	.LBB261:
 1201              		.loc 2 104 0
 1202 0ab0 488D3500 		leaq	.LC60(%rip), %rsi
 1202      000000
GAS LISTING /tmp/cc4D9KId.s 			page 40


 1203 0ab7 BF010000 		movl	$1, %edi
 1203      00
 1204 0abc B8010000 		movl	$1, %eax
 1204      00
 1205 0ac1 E8000000 		call	__printf_chk@PLT
 1205      00
 1206              	.LVL122:
 1207              	.LBE261:
 1208              	.LBE260:
 209:src/main.c    **** 
 210:src/main.c    ****     f2 = msg_wrapper_init_float("f2", -0.3345, 6);
 1209              		.loc 1 210 0
 1210 0ac6 BA060000 		movl	$6, %edx
 1210      00
 1211 0acb F30F1005 		movss	.LC62(%rip), %xmm0
 1211      00000000 
 1212 0ad3 488D3500 		leaq	.LC61(%rip), %rsi
 1212      000000
 1213 0ada 4C89EF   		movq	%r13, %rdi
 1214 0add E8000000 		call	msg_wrapper_init_float@PLT
 1214      00
 1215              	.LVL123:
 1216 0ae2 488B4424 		movq	32(%rsp), %rax
 1216      20
 1217 0ae7 488B5424 		movq	40(%rsp), %rdx
 1217      28
 1218 0aec 48898424 		movq	%rax, 416(%rsp)
 1218      A0010000 
 1219 0af4 48899424 		movq	%rdx, 424(%rsp)
 1219      A8010000 
 1220 0afc 488B4424 		movq	48(%rsp), %rax
 1220      30
 1221 0b01 488B5424 		movq	56(%rsp), %rdx
 1221      38
 1222 0b06 48898424 		movq	%rax, 432(%rsp)
 1222      B0010000 
 1223 0b0e 48899424 		movq	%rdx, 440(%rsp)
 1223      B8010000 
 1224              	.LVL124:
 1225              	.LBB262:
 1226              	.LBB263:
 1227              		.loc 2 104 0
 1228 0b16 488D3500 		leaq	.LC59(%rip), %rsi
 1228      000000
 1229 0b1d BF010000 		movl	$1, %edi
 1229      00
 1230 0b22 B8000000 		movl	$0, %eax
 1230      00
 1231 0b27 E8000000 		call	__printf_chk@PLT
 1231      00
 1232              	.LVL125:
 1233              	.LBE263:
 1234              	.LBE262:
 211:src/main.c    ****     printf("Initialized float: $"); hnd.print_str(f2.id); printf("=%.6f\n\n", f2.val);
 1235              		.loc 1 211 0
 1236 0b2c 488BBC24 		movq	416(%rsp), %rdi
 1236      A0010000 
GAS LISTING /tmp/cc4D9KId.s 			page 41


 1237 0b34 488BB424 		movq	424(%rsp), %rsi
 1237      A8010000 
 1238 0b3c FFD3     		call	*%rbx
 1239              	.LVL126:
 1240 0b3e 660FEFC0 		pxor	%xmm0, %xmm0
 1241 0b42 F30F5A84 		cvtss2sd	432(%rsp), %xmm0
 1241      24B00100 
 1241      00
 1242              	.LVL127:
 1243              	.LBB264:
 1244              	.LBB265:
 1245              		.loc 2 104 0
 1246 0b4b 488D3500 		leaq	.LC60(%rip), %rsi
 1246      000000
 1247 0b52 BF010000 		movl	$1, %edi
 1247      00
 1248 0b57 B8010000 		movl	$1, %eax
 1248      00
 1249 0b5c E8000000 		call	__printf_chk@PLT
 1249      00
 1250              	.LVL128:
 1251              	.LBE265:
 1252              	.LBE264:
 212:src/main.c    **** 
 213:src/main.c    ****     obj2_wrap = msg_wrapper_init_obj("wrapped_obj2");
 1253              		.loc 1 213 0
 1254 0b61 488D3500 		leaq	.LC63(%rip), %rsi
 1254      000000
 1255 0b68 4C89EF   		movq	%r13, %rdi
 1256 0b6b E8000000 		call	msg_wrapper_init_obj@PLT
 1256      00
 1257              	.LVL129:
 1258 0b70 488B4424 		movq	32(%rsp), %rax
 1258      20
 1259 0b75 488B5424 		movq	40(%rsp), %rdx
 1259      28
 1260 0b7a 48898424 		movq	%rax, 640(%rsp)
 1260      80020000 
 1261 0b82 48899424 		movq	%rdx, 648(%rsp)
 1261      88020000 
 1262 0b8a 488B4424 		movq	48(%rsp), %rax
 1262      30
 1263 0b8f 488B5424 		movq	56(%rsp), %rdx
 1263      38
 1264 0b94 48898424 		movq	%rax, 656(%rsp)
 1264      90020000 
 1265 0b9c 48899424 		movq	%rdx, 664(%rsp)
 1265      98020000 
 1266 0ba4 488B4424 		movq	64(%rsp), %rax
 1266      40
 1267 0ba9 488B5424 		movq	72(%rsp), %rdx
 1267      48
 1268 0bae 48898424 		movq	%rax, 672(%rsp)
 1268      A0020000 
 1269 0bb6 48899424 		movq	%rdx, 680(%rsp)
 1269      A8020000 
 1270              	.LVL130:
GAS LISTING /tmp/cc4D9KId.s 			page 42


 1271              	.LBB266:
 1272              	.LBB267:
 1273              		.loc 2 104 0
 1274 0bbe 488D3500 		leaq	.LC39(%rip), %rsi
 1274      000000
 1275 0bc5 BF010000 		movl	$1, %edi
 1275      00
 1276 0bca B8000000 		movl	$0, %eax
 1276      00
 1277 0bcf E8000000 		call	__printf_chk@PLT
 1277      00
 1278              	.LVL131:
 1279              	.LBE267:
 1280              	.LBE266:
 214:src/main.c    ****     printf("Initialized obj: @"); hnd.print_str(obj2_wrap.id); printf("\n\n");
 1281              		.loc 1 214 0
 1282 0bd4 488BBC24 		movq	640(%rsp), %rdi
 1282      80020000 
 1283 0bdc 488BB424 		movq	648(%rsp), %rsi
 1283      88020000 
 1284 0be4 FFD3     		call	*%rbx
 1285              	.LVL132:
 1286              	.LBB268:
 1287              	.LBB269:
 1288              		.loc 2 104 0
 1289 0be6 488D3D00 		leaq	.LC8(%rip), %rdi
 1289      000000
 1290 0bed E8000000 		call	puts@PLT
 1290      00
 1291              	.LVL133:
 1292              	.LBE269:
 1293              	.LBE268:
 1294              	.LBB270:
 1295              	.LBB271:
 1296 0bf2 488D3D00 		leaq	.LC64(%rip), %rdi
 1296      000000
 1297 0bf9 E8000000 		call	puts@PLT
 1297      00
 1298              	.LVL134:
 1299              	.LBE271:
 1300              	.LBE270:
 215:src/main.c    **** 
 216:src/main.c    ****     printf("Add '$i1', '$i2', '$f1', '$f2' and '$str1' to '@wrapped_obj2'\n\n");
 217:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i1);
 1301              		.loc 1 217 0
 1302 0bfe 488DB424 		leaq	320(%rsp), %rsi
 1302      40010000 
 1303 0c06 488D9C24 		leaq	640(%rsp), %rbx
 1303      80020000 
 1304 0c0e 4889DF   		movq	%rbx, %rdi
 1305 0c11 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1305      00
 1306              	.LVL135:
 218:src/main.c    ****     msg_wrapper_add_int_to_obj(&obj2_wrap, &i2);
 1307              		.loc 1 218 0
 1308 0c16 488D8424 		leaq	352(%rsp), %rax
 1308      60010000 
GAS LISTING /tmp/cc4D9KId.s 			page 43


 1309 0c1e 48894424 		movq	%rax, 16(%rsp)
 1309      10
 1310 0c23 4889C6   		movq	%rax, %rsi
 1311 0c26 4889DF   		movq	%rbx, %rdi
 1312 0c29 E8000000 		call	msg_wrapper_add_int_to_obj@PLT
 1312      00
 1313              	.LVL136:
 219:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f1);
 1314              		.loc 1 219 0
 1315 0c2e 4C8DAC24 		leaq	384(%rsp), %r13
 1315      80010000 
 1316 0c36 4C89EE   		movq	%r13, %rsi
 1317 0c39 4889DF   		movq	%rbx, %rdi
 1318 0c3c E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1318      00
 1319              	.LVL137:
 220:src/main.c    ****     msg_wrapper_add_float_to_obj(&obj2_wrap, &f2);
 1320              		.loc 1 220 0
 1321 0c41 488DB424 		leaq	416(%rsp), %rsi
 1321      A0010000 
 1322 0c49 4889DF   		movq	%rbx, %rdi
 1323 0c4c E8000000 		call	msg_wrapper_add_float_to_obj@PLT
 1323      00
 1324              	.LVL138:
 221:src/main.c    ****     msg_wrapper_add_string_to_obj(&obj2_wrap, &str1);
 1325              		.loc 1 221 0
 1326 0c51 4C8DB424 		leaq	448(%rsp), %r14
 1326      C0010000 
 1327 0c59 4C89F6   		movq	%r14, %rsi
 1328 0c5c 4889DF   		movq	%rbx, %rdi
 1329 0c5f E8000000 		call	msg_wrapper_add_string_to_obj@PLT
 1329      00
 1330              	.LVL139:
 1331              	.LBB272:
 1332              	.LBB273:
 1333              		.loc 2 104 0
 1334 0c64 488D3D00 		leaq	.LC65(%rip), %rdi
 1334      000000
 1335 0c6b E8000000 		call	puts@PLT
 1335      00
 1336              	.LVL140:
 1337              	.LBE273:
 1338              	.LBE272:
 222:src/main.c    **** 
 223:src/main.c    ****     printf("Add '<CMD_WRAP>' to '#wrapped_msg'...\n\n");
 224:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_wrap);
 1339              		.loc 1 224 0
 1340 0c70 488DB424 		leaq	128(%rsp), %rsi
 1340      80000000 
 1341 0c78 4889EF   		movq	%rbp, %rdi
 1342 0c7b E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1342      00
 1343              	.LVL141:
 1344              	.LBB274:
 1345              	.LBB275:
 1346              		.loc 2 104 0
 1347 0c80 488D3D00 		leaq	.LC66(%rip), %rdi
GAS LISTING /tmp/cc4D9KId.s 			page 44


 1347      000000
 1348 0c87 E8000000 		call	puts@PLT
 1348      00
 1349              	.LVL142:
 1350              	.LBE275:
 1351              	.LBE274:
 225:src/main.c    **** 
 226:src/main.c    ****     printf("Add '@wrapped_obj2' to '#wrapped_msg'...\n\n");
 227:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj2_wrap);
 1352              		.loc 1 227 0
 1353 0c8c 4889DE   		movq	%rbx, %rsi
 1354 0c8f 4889EF   		movq	%rbp, %rdi
 1355 0c92 E8000000 		call	msg_wrapper_add_object_to_msg@PLT
 1355      00
 1356              	.LVL143:
 1357              	.LBB276:
 1358              	.LBB277:
 1359              		.loc 2 104 0
 1360 0c97 488D3D00 		leaq	.LC67(%rip), %rdi
 1360      000000
 1361 0c9e E8000000 		call	puts@PLT
 1361      00
 1362              	.LVL144:
 1363              	.LBE277:
 1364              	.LBE276:
 228:src/main.c    ****     
 229:src/main.c    ****     printf("Add '<CMD_REMOVABLE>' to '#wrapped_msg'...\n\n");
 230:src/main.c    ****     msg_wrapper_add_cmd_to_msg(&msg_wrap, &cmd_rem);
 1365              		.loc 1 230 0
 1366 0ca3 488D8C24 		leaq	160(%rsp), %rcx
 1366      A0000000 
 1367 0cab 48894C24 		movq	%rcx, 24(%rsp)
 1367      18
 1368 0cb0 4889CE   		movq	%rcx, %rsi
 1369 0cb3 4889EF   		movq	%rbp, %rdi
 1370 0cb6 E8000000 		call	msg_wrapper_add_cmd_to_msg@PLT
 1370      00
 1371              	.LVL145:
 1372              	.LBB278:
 1373              	.LBB279:
 1374              		.loc 2 104 0
 1375 0cbb 488D3D00 		leaq	.LC68(%rip), %rdi
 1375      000000
 1376 0cc2 E8000000 		call	puts@PLT
 1376      00
 1377              	.LVL146:
 1378              	.LBE279:
 1379              	.LBE278:
 231:src/main.c    **** 
 232:src/main.c    ****     printf("Removing $str2 from @wrapped_obj1...\n\n");
 233:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj1_wrap, &str2);
 1380              		.loc 1 233 0
 1381 0cc7 4C89FE   		movq	%r15, %rsi
 1382 0cca 4C89E7   		movq	%r12, %rdi
 1383 0ccd E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1383      00
 1384              	.LVL147:
GAS LISTING /tmp/cc4D9KId.s 			page 45


 1385              	.LBB280:
 1386              	.LBB281:
 1387              		.loc 2 104 0
 1388 0cd2 488D3D00 		leaq	.LC69(%rip), %rdi
 1388      000000
 1389 0cd9 E8000000 		call	puts@PLT
 1389      00
 1390              	.LVL148:
 1391              	.LBE281:
 1392              	.LBE280:
 234:src/main.c    ****     
 235:src/main.c    ****     printf("Removing $str1 from @wrapped_obj2...\n\n");
 236:src/main.c    ****     msg_wrapper_rm_string_from_obj(&obj2_wrap, &str1);
 1393              		.loc 1 236 0
 1394 0cde 4C89F6   		movq	%r14, %rsi
 1395 0ce1 4889DF   		movq	%rbx, %rdi
 1396 0ce4 E8000000 		call	msg_wrapper_rm_string_from_obj@PLT
 1396      00
 1397              	.LVL149:
 1398              	.LBB282:
 1399              	.LBB283:
 1400              		.loc 2 104 0
 1401 0ce9 488D3D00 		leaq	.LC70(%rip), %rdi
 1401      000000
 1402 0cf0 E8000000 		call	puts@PLT
 1402      00
 1403              	.LVL150:
 1404              	.LBE283:
 1405              	.LBE282:
 237:src/main.c    **** 
 238:src/main.c    ****     printf("Removing $f1 from @wrapped_obj2...\n\n");
 239:src/main.c    ****     msg_wrapper_rm_float_from_obj(&obj2_wrap, &f1);
 1406              		.loc 1 239 0
 1407 0cf5 4C89EE   		movq	%r13, %rsi
 1408 0cf8 4889DF   		movq	%rbx, %rdi
 1409 0cfb E8000000 		call	msg_wrapper_rm_float_from_obj@PLT
 1409      00
 1410              	.LVL151:
 1411              	.LBB284:
 1412              	.LBB285:
 1413              		.loc 2 104 0
 1414 0d00 488D3D00 		leaq	.LC71(%rip), %rdi
 1414      000000
 1415 0d07 E8000000 		call	puts@PLT
 1415      00
 1416              	.LVL152:
 1417              	.LBE285:
 1418              	.LBE284:
 240:src/main.c    **** 
 241:src/main.c    ****     printf("Removing $i2 from @wrapped_obj2...\n\n");
 242:src/main.c    ****     msg_wrapper_rm_int_from_obj(&obj2_wrap, &i2);
 1419              		.loc 1 242 0
 1420 0d0c 488B7424 		movq	16(%rsp), %rsi
 1420      10
 1421 0d11 4889DF   		movq	%rbx, %rdi
 1422 0d14 E8000000 		call	msg_wrapper_rm_int_from_obj@PLT
 1422      00
GAS LISTING /tmp/cc4D9KId.s 			page 46


 1423              	.LVL153:
 1424              	.LBB286:
 1425              	.LBB287:
 1426              		.loc 2 104 0
 1427 0d19 488D3D00 		leaq	.LC72(%rip), %rdi
 1427      000000
 1428 0d20 E8000000 		call	puts@PLT
 1428      00
 1429              	.LVL154:
 1430              	.LBE287:
 1431              	.LBE286:
 243:src/main.c    **** 
 244:src/main.c    ****     printf("Removing @wrapped_obj1 from #wrapped_msg...\n\n");
 245:src/main.c    ****     msg_wrapper_rm_obj_from_msg(&msg_wrap, &obj1_wrap);
 1432              		.loc 1 245 0
 1433 0d25 4C89E6   		movq	%r12, %rsi
 1434 0d28 4889EF   		movq	%rbp, %rdi
 1435 0d2b E8000000 		call	msg_wrapper_rm_obj_from_msg@PLT
 1435      00
 1436              	.LVL155:
 1437              	.LBB288:
 1438              	.LBB289:
 1439              		.loc 2 104 0
 1440 0d30 488D3D00 		leaq	.LC73(%rip), %rdi
 1440      000000
 1441 0d37 E8000000 		call	puts@PLT
 1441      00
 1442              	.LVL156:
 1443              	.LBE289:
 1444              	.LBE288:
 246:src/main.c    **** 
 247:src/main.c    ****     printf("Removing <CMD_REMOVABLE> from #wrapped_msg...\n\n");
 248:src/main.c    ****     msg_wrapper_rm_cmd_from_msg(&msg_wrap, &cmd_rem);
 1445              		.loc 1 248 0
 1446 0d3c 488B7424 		movq	24(%rsp), %rsi
 1446      18
 1447 0d41 4889EF   		movq	%rbp, %rdi
 1448 0d44 E8000000 		call	msg_wrapper_rm_cmd_from_msg@PLT
 1448      00
 1449              	.LVL157:
 1450              	.LBB290:
 1451              	.LBB291:
 1452              		.loc 2 104 0
 1453 0d49 488D3D00 		leaq	.LC74(%rip), %rdi
 1453      000000
 1454 0d50 E8000000 		call	puts@PLT
 1454      00
 1455              	.LVL158:
 1456              	.LBE291:
 1457              	.LBE290:
 249:src/main.c    **** 
 250:src/main.c    ****     printf("Add '@wrapped_obj1' AGAIN to '#wrapped_msg'...\n\n");
 251:src/main.c    ****     msg_wrapper_add_object_to_msg(&msg_wrap, &obj1_wrap);
 1458              		.loc 1 251 0
 1459 0d55 4C89E6   		movq	%r12, %rsi
 1460 0d58 4889EF   		movq	%rbp, %rdi
 1461 0d5b E8000000 		call	msg_wrapper_add_object_to_msg@PLT
GAS LISTING /tmp/cc4D9KId.s 			page 47


 1461      00
 1462              	.LVL159:
 1463              	.LBB292:
 1464              	.LBB293:
 1465              		.loc 2 104 0
 1466 0d60 488D3D00 		leaq	.LC75(%rip), %rdi
 1466      000000
 1467 0d67 E8000000 		call	puts@PLT
 1467      00
 1468              	.LVL160:
 1469              	.LBE293:
 1470              	.LBE292:
 1471              	.LBB294:
 1472              	.LBB295:
 1473 0d6c 488D3D00 		leaq	.LC76(%rip), %rdi
 1473      000000
 1474 0d73 E8000000 		call	puts@PLT
 1474      00
 1475              	.LVL161:
 1476              	.LBE295:
 1477              	.LBE294:
 252:src/main.c    **** 
 253:src/main.c    ****     printf("Wrapped message:\n");
 254:src/main.c    ****     printf("---------------\n\n");
 255:src/main.c    ****     hnd.print_wrapper_msg(msg_wrap);
 1478              		.loc 1 255 0
 1479 0d78 FFB42438 		pushq	312(%rsp)
 1479      010000
 1480              	.LCFI47:
 1481              		.cfi_def_cfa_offset 824
 1482 0d7f FFB42438 		pushq	312(%rsp)
 1482      010000
 1483              	.LCFI48:
 1484              		.cfi_def_cfa_offset 832
 1485 0d86 FFB42438 		pushq	312(%rsp)
 1485      010000
 1486              	.LCFI49:
 1487              		.cfi_def_cfa_offset 840
 1488 0d8d FFB42438 		pushq	312(%rsp)
 1488      010000
 1489              	.LCFI50:
 1490              		.cfi_def_cfa_offset 848
 1491 0d94 FF9424F8 		call	*760(%rsp)
 1491      020000
 1492              	.LVL162:
 1493              	.LBB296:
 1494              	.LBB297:
 1495              		.loc 2 104 0
 1496 0d9b 4883C420 		addq	$32, %rsp
 1497              	.LCFI51:
 1498              		.cfi_def_cfa_offset 816
 1499 0d9f 488D3D00 		leaq	.LC8(%rip), %rdi
 1499      000000
 1500 0da6 E8000000 		call	puts@PLT
 1500      00
 1501              	.LVL163:
 1502              	.LBE297:
GAS LISTING /tmp/cc4D9KId.s 			page 48


 1503              	.LBE296:
 1504              	.LBB298:
 1505              	.LBB299:
 1506 0dab 488D3D00 		leaq	.LC8(%rip), %rdi
 1506      000000
 1507 0db2 E8000000 		call	puts@PLT
 1507      00
 1508              	.LVL164:
 1509              	.LBE299:
 1510              	.LBE298:
 256:src/main.c    **** 
 257:src/main.c    **** 
 258:src/main.c    ****     printf("\n\n");
 259:src/main.c    **** 
 260:src/main.c    **** #if MCU_MSG_USE_BUFFERING
 261:src/main.c    ****     char buff[1000] = {0};
 262:src/main.c    ****     msg_size_t freespc; // free space in buffer
 263:src/main.c    ****     msg_str_buff_t sbuff = msg_init_str_buff(buff, 1000);
 264:src/main.c    ****     
 265:src/main.c    ****     freespc = wrapper_hnd.print_to_buff(&sbuff, msg_wrap);
 266:src/main.c    ****     printf("Wrapped message (buffered, free space: %d)\n", freespc);
 267:src/main.c    ****     freespc = wrapper_hnd.print_to_buff(&sbuff, msg_wrap);
 268:src/main.c    ****     printf("Wrapped message (buffered again, free space: %d)\n", freespc);
 269:src/main.c    ****     
 270:src/main.c    ****     printf("\n\n");
 271:src/main.c    ****     printf("Buffer content:\n");
 272:src/main.c    ****     printf("%s\n\n", buff);
 273:src/main.c    **** 
 274:src/main.c    ****     printf("Reparsing '#wrapped_msg' '@wrapped_obj2'...\n\n");
 275:src/main.c    ****     msg_reparsed = msg_get(buff, "wrapped_msg", 1000);
 276:src/main.c    ****     hnd.print(msg_reparsed.content); printf("\n\n");
 277:src/main.c    ****     obj_reparsed = msg_parser_get_obj(msg_reparsed, "wrapped_obj2");
 278:src/main.c    ****     hnd.print(obj_reparsed.content); printf(" len: %d\n\n", obj_reparsed.content.len);
 279:src/main.c    ****     msg_parser_get_float(&f_val, obj_reparsed, "f2");
 280:src/main.c    ****     msg_parser_get_int(&i_val, obj_reparsed, "i1");
 281:src/main.c    ****     printf("reparsed $i = %d $f2 = %f\n\n", i_val, f_val);
 282:src/main.c    **** #endif
 283:src/main.c    **** 
 284:src/main.c    ****     printf("\n\n");
 285:src/main.c    **** #endif
 286:src/main.c    **** 
 287:src/main.c    ****     end = clock();
 1511              		.loc 1 287 0
 1512 0db7 E8000000 		call	clock@PLT
 1512      00
 1513              	.LVL165:
 288:src/main.c    ****     exec_time = (double)(end - begin) / CLOCKS_PER_SEC;
 1514              		.loc 1 288 0
 1515 0dbc 482B4424 		subq	8(%rsp), %rax
 1515      08
 1516              	.LVL166:
 1517 0dc1 660FEFC0 		pxor	%xmm0, %xmm0
 1518 0dc5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1518      C0
 1519 0dca F20F5E05 		divsd	.LC77(%rip), %xmm0
 1519      00000000 
 1520              	.LVL167:
GAS LISTING /tmp/cc4D9KId.s 			page 49


 1521              	.LBB300:
 1522              	.LBB301:
 1523              		.loc 2 104 0
 1524 0dd2 488D3500 		leaq	.LC78(%rip), %rsi
 1524      000000
 1525 0dd9 BF010000 		movl	$1, %edi
 1525      00
 1526 0dde B8010000 		movl	$1, %eax
 1526      00
 1527 0de3 E8000000 		call	__printf_chk@PLT
 1527      00
 1528              	.LVL168:
 1529              	.LBE301:
 1530              	.LBE300:
 289:src/main.c    ****     printf("Execution time: %f s\n", exec_time);
 290:src/main.c    ****     return 0;
 291:src/main.c    **** }
 1531              		.loc 1 291 0
 1532 0de8 B8000000 		movl	$0, %eax
 1532      00
 1533 0ded 488B8C24 		movq	744(%rsp), %rcx
 1533      E8020000 
 1534 0df5 6448330C 		xorq	%fs:40, %rcx
 1534      25280000 
 1534      00
 1535 0dfe 7558     		jne	.L14
 1536 0e00 4881C4F8 		addq	$760, %rsp
 1536      020000
 1537              	.LCFI52:
 1538              		.cfi_remember_state
 1539              		.cfi_def_cfa_offset 56
 1540 0e07 5B       		popq	%rbx
 1541              	.LCFI53:
 1542              		.cfi_def_cfa_offset 48
 1543 0e08 5D       		popq	%rbp
 1544              	.LCFI54:
 1545              		.cfi_def_cfa_offset 40
 1546 0e09 415C     		popq	%r12
 1547              	.LCFI55:
 1548              		.cfi_def_cfa_offset 32
 1549 0e0b 415D     		popq	%r13
 1550              	.LCFI56:
 1551              		.cfi_def_cfa_offset 24
 1552 0e0d 415E     		popq	%r14
 1553              	.LCFI57:
 1554              		.cfi_def_cfa_offset 16
 1555 0e0f 415F     		popq	%r15
 1556              	.LCFI58:
 1557              		.cfi_def_cfa_offset 8
 1558 0e11 C3       		ret
 1559              	.LVL169:
 1560              	.L2:
 1561              	.LCFI59:
 1562              		.cfi_restore_state
 1563              	.LBB302:
 1564              	.LBB303:
 1565              		.loc 2 104 0
GAS LISTING /tmp/cc4D9KId.s 			page 50


 1566 0e12 488D3D00 		leaq	.LC9(%rip), %rdi
 1566      000000
 1567 0e19 E8000000 		call	puts@PLT
 1567      00
 1568              	.LVL170:
 1569 0e1e E9F7F2FF 		jmp	.L3
 1569      FF
 1570              	.LVL171:
 1571              	.L10:
 1572              	.LBE303:
 1573              	.LBE302:
 103:src/main.c    **** 
 1574              		.loc 1 103 0
 1575 0e23 488D1500 		leaq	.LC1(%rip), %rdx
 1575      000000
 1576 0e2a E933F3FF 		jmp	.L4
 1576      FF
 1577              	.L11:
 107:src/main.c    **** 
 1578              		.loc 1 107 0
 1579 0e2f 488D1500 		leaq	.LC1(%rip), %rdx
 1579      000000
 1580 0e36 E985F3FF 		jmp	.L5
 1580      FF
 1581              	.L12:
 111:src/main.c    **** 
 1582              		.loc 1 111 0
 1583 0e3b 488D1500 		leaq	.LC1(%rip), %rdx
 1583      000000
 1584 0e42 E9D7F3FF 		jmp	.L6
 1584      FF
 1585              	.L7:
 1586              	.LVL172:
 1587              	.LBB304:
 1588              	.LBB305:
 1589              		.loc 2 104 0
 1590 0e47 488D3D00 		leaq	.LC33(%rip), %rdi
 1590      000000
 1591 0e4e E8000000 		call	puts@PLT
 1591      00
 1592              	.LVL173:
 1593 0e53 E956F6FF 		jmp	.L8
 1593      FF
 1594              	.LVL174:
 1595              	.L14:
 1596              	.LBE305:
 1597              	.LBE304:
 1598              		.loc 1 291 0
 1599 0e58 E8000000 		call	__stack_chk_fail@PLT
 1599      00
 1600              	.LVL175:
 1601              		.cfi_endproc
 1602              	.LFE68:
 1604              		.section	.text.print_int,"ax",@progbits
 1605              		.globl	print_int
 1607              	print_int:
 1608              	.LFB69:
GAS LISTING /tmp/cc4D9KId.s 			page 51


 292:src/main.c    **** 
 293:src/main.c    **** void print_int(int i , int (*__putchar)(char))
 294:src/main.c    **** {
 1609              		.loc 1 294 0
 1610              		.cfi_startproc
 1611              	.LVL176:
 1612 0000 4155     		pushq	%r13
 1613              	.LCFI60:
 1614              		.cfi_def_cfa_offset 16
 1615              		.cfi_offset 13, -16
 1616 0002 4154     		pushq	%r12
 1617              	.LCFI61:
 1618              		.cfi_def_cfa_offset 24
 1619              		.cfi_offset 12, -24
 1620 0004 55       		pushq	%rbp
 1621              	.LCFI62:
 1622              		.cfi_def_cfa_offset 32
 1623              		.cfi_offset 6, -32
 1624 0005 53       		pushq	%rbx
 1625              	.LCFI63:
 1626              		.cfi_def_cfa_offset 40
 1627              		.cfi_offset 3, -40
 1628 0006 4883EC08 		subq	$8, %rsp
 1629              	.LCFI64:
 1630              		.cfi_def_cfa_offset 48
 1631 000a 4989F5   		movq	%rsi, %r13
 295:src/main.c    ****     int8_t sign = i < 0 ? -1: 1;
 1632              		.loc 1 295 0
 1633 000d 85FF     		testl	%edi, %edi
 1634 000f 791F     		jns	.L16
 1635              	.LVL177:
 296:src/main.c    ****     unsigned val = i < 0 ? ~i + 1 : i;
 1636              		.loc 1 296 0
 1637 0011 89F8     		movl	%edi, %eax
 1638 0013 C1F81F   		sarl	$31, %eax
 1639 0016 89FB     		movl	%edi, %ebx
 1640 0018 31C3     		xorl	%eax, %ebx
 1641 001a 29C3     		subl	%eax, %ebx
 1642              	.LVL178:
 297:src/main.c    ****                                   // 4294967295   65535
 298:src/main.c    ****     unsigned div = sizeof(int) > 2 ? 1000000000UL : 10000UL;
 299:src/main.c    ****     uint8_t dig;
 300:src/main.c    ****     uint8_t first_dig = 0;
 301:src/main.c    ****     if(sign == -1) __putchar('-');
 1643              		.loc 1 301 0
 1644 001c BF2D0000 		movl	$45, %edi
 1644      00
 1645              	.LVL179:
 1646 0021 FFD6     		call	*%rsi
 1647              	.LVL180:
 1648              	.L18:
 302:src/main.c    ****     while(div) {
 303:src/main.c    ****         dig = 0;
 304:src/main.c    ****         while(val >= div) {
 305:src/main.c    ****             val -= div;
 306:src/main.c    ****             dig += 1;
 307:src/main.c    ****         }
GAS LISTING /tmp/cc4D9KId.s 			page 52


 308:src/main.c    ****         div /= 10;
 309:src/main.c    ****         if(!first_dig && dig) {
 310:src/main.c    ****             first_dig = 1;
 1649              		.loc 1 310 0
 1650 0023 41BC0000 		movl	$0, %r12d
 1650      0000
 1651 0029 BD00CA9A 		movl	$1000000000, %ebp
 1651      3B
 1652 002e EB44     		jmp	.L17
 1653              	.LVL181:
 1654              	.L16:
 296:src/main.c    ****                                   // 4294967295   65535
 1655              		.loc 1 296 0
 1656 0030 89F8     		movl	%edi, %eax
 1657 0032 C1F81F   		sarl	$31, %eax
 1658 0035 89FB     		movl	%edi, %ebx
 1659 0037 31C3     		xorl	%eax, %ebx
 1660 0039 29C3     		subl	%eax, %ebx
 1661              	.LVL182:
 1662 003b EBE6     		jmp	.L18
 1663              	.LVL183:
 1664              	.L19:
 305:src/main.c    ****             dig += 1;
 1665              		.loc 1 305 0
 1666 003d 29EB     		subl	%ebp, %ebx
 1667              	.LVL184:
 306:src/main.c    ****         }
 1668              		.loc 1 306 0
 1669 003f 83C701   		addl	$1, %edi
 1670              	.LVL185:
 1671              	.L22:
 304:src/main.c    ****             val -= div;
 1672              		.loc 1 304 0
 1673 0042 39EB     		cmpl	%ebp, %ebx
 1674 0044 73F7     		jnb	.L19
 308:src/main.c    ****         if(!first_dig && dig) {
 1675              		.loc 1 308 0
 1676 0046 BACDCCCC 		movl	$-858993459, %edx
 1676      CC
 1677 004b 89E8     		movl	%ebp, %eax
 1678 004d F7E2     		mull	%edx
 1679              	.LVL186:
 1680 004f C1EA03   		shrl	$3, %edx
 1681 0052 89D5     		movl	%edx, %ebp
 1682              	.LVL187:
 309:src/main.c    ****             first_dig = 1;
 1683              		.loc 1 309 0
 1684 0054 4489E0   		movl	%r12d, %eax
 1685 0057 83F001   		xorl	$1, %eax
 1686 005a 4084FF   		testb	%dil, %dil
 1687 005d 0F95C2   		setne	%dl
 1688              	.LVL188:
 1689 0060 84C2     		testb	%al, %dl
 1690 0062 741B     		je	.L26
 1691              		.loc 1 310 0
 1692 0064 41BC0100 		movl	$1, %r12d
 1692      0000
GAS LISTING /tmp/cc4D9KId.s 			page 53


 1693              	.LVL189:
 1694              	.L20:
 311:src/main.c    ****         }
 312:src/main.c    ****         if(first_dig) __putchar('0' + dig);
 1695              		.loc 1 312 0 discriminator 1
 1696 006a 83C730   		addl	$48, %edi
 1697              	.LVL190:
 1698 006d 400FBEFF 		movsbl	%dil, %edi
 1699 0071 41FFD5   		call	*%r13
 1700              	.LVL191:
 1701              	.L17:
 302:src/main.c    ****         dig = 0;
 1702              		.loc 1 302 0
 1703 0074 85ED     		testl	%ebp, %ebp
 1704 0076 740E     		je	.L27
 303:src/main.c    ****         while(val >= div) {
 1705              		.loc 1 303 0
 1706 0078 BF000000 		movl	$0, %edi
 1706      00
 1707 007d EBC3     		jmp	.L22
 1708              	.LVL192:
 1709              	.L26:
 1710              		.loc 1 312 0
 1711 007f 4584E4   		testb	%r12b, %r12b
 1712 0082 74F0     		je	.L17
 1713 0084 EBE4     		jmp	.L20
 1714              	.LVL193:
 1715              	.L27:
 313:src/main.c    ****     }
 314:src/main.c    **** }
 1716              		.loc 1 314 0
 1717 0086 4883C408 		addq	$8, %rsp
 1718              	.LCFI65:
 1719              		.cfi_def_cfa_offset 40
 1720 008a 5B       		popq	%rbx
 1721              	.LCFI66:
 1722              		.cfi_def_cfa_offset 32
 1723              	.LVL194:
 1724 008b 5D       		popq	%rbp
 1725              	.LCFI67:
 1726              		.cfi_def_cfa_offset 24
 1727              	.LVL195:
 1728 008c 415C     		popq	%r12
 1729              	.LCFI68:
 1730              		.cfi_def_cfa_offset 16
 1731              	.LVL196:
 1732 008e 415D     		popq	%r13
 1733              	.LCFI69:
 1734              		.cfi_def_cfa_offset 8
 1735              	.LVL197:
 1736 0090 C3       		ret
 1737              		.cfi_endproc
 1738              	.LFE69:
 1740              		.section	.text.print_float,"ax",@progbits
 1741              		.globl	print_float
 1743              	print_float:
 1744              	.LFB70:
GAS LISTING /tmp/cc4D9KId.s 			page 54


 315:src/main.c    **** 
 316:src/main.c    **** void print_float(float f, uint8_t prec, int (*__putchar)(char))
 317:src/main.c    **** {
 1745              		.loc 1 317 0
 1746              		.cfi_startproc
 1747              	.LVL198:
 1748 0000 55       		pushq	%rbp
 1749              	.LCFI70:
 1750              		.cfi_def_cfa_offset 16
 1751              		.cfi_offset 6, -16
 1752 0001 53       		pushq	%rbx
 1753              	.LCFI71:
 1754              		.cfi_def_cfa_offset 24
 1755              		.cfi_offset 3, -24
 1756 0002 4883EC18 		subq	$24, %rsp
 1757              	.LCFI72:
 1758              		.cfi_def_cfa_offset 48
 1759 0006 4889F5   		movq	%rsi, %rbp
 1760 0009 89F9     		movl	%edi, %ecx
 318:src/main.c    ****     int i_part = (int)f;
 1761              		.loc 1 318 0
 1762 000b F30F2CF8 		cvttss2si	%xmm0, %edi
 1763              	.LVL199:
 319:src/main.c    ****     float f_part = f < 0 ? (f - (float)i_part) * -1  : (f - (float)i_part);
 1764              		.loc 1 319 0
 1765 000f 660FEFC9 		pxor	%xmm1, %xmm1
 1766 0013 0F2EC8   		ucomiss	%xmm0, %xmm1
 1767 0016 771E     		ja	.L39
 1768              		.loc 1 319 0 is_stmt 0 discriminator 2
 1769 0018 660FEFC9 		pxor	%xmm1, %xmm1
 1770 001c F30F2ACF 		cvtsi2ss	%edi, %xmm1
 1771 0020 F30F5CC1 		subss	%xmm1, %xmm0
 1772              	.LVL200:
 1773 0024 F30F1144 		movss	%xmm0, 12(%rsp)
 1773      240C
 1774              	.L31:
 1775              	.LVL201:
 320:src/main.c    ****     unsigned mul = 1;
 321:src/main.c    ****     uint8_t j;
 322:src/main.c    ****     for(j = 0; j < prec; j++ ) mul *= 10;
 1776              		.loc 1 322 0 is_stmt 1 discriminator 4
 1777 002a B8000000 		movl	$0, %eax
 1777      00
 320:src/main.c    ****     unsigned mul = 1;
 1778              		.loc 1 320 0 discriminator 4
 1779 002f BB010000 		movl	$1, %ebx
 1779      00
 1780              		.loc 1 322 0 discriminator 4
 1781 0034 EB24     		jmp	.L32
 1782              	.LVL202:
 1783              	.L39:
 319:src/main.c    ****     float f_part = f < 0 ? (f - (float)i_part) * -1  : (f - (float)i_part);
 1784              		.loc 1 319 0 discriminator 1
 1785 0036 660FEFC9 		pxor	%xmm1, %xmm1
 1786 003a F30F2ACF 		cvtsi2ss	%edi, %xmm1
 1787 003e F30F5CC1 		subss	%xmm1, %xmm0
 1788              	.LVL203:
GAS LISTING /tmp/cc4D9KId.s 			page 55


 1789 0042 0F570500 		xorps	.LC79(%rip), %xmm0
 1789      000000
 1790 0049 F30F1144 		movss	%xmm0, 12(%rsp)
 1790      240C
 1791 004f EBD9     		jmp	.L31
 1792              	.LVL204:
 1793              	.L33:
 1794              		.loc 1 322 0 discriminator 3
 1795 0051 8D149B   		leal	(%rbx,%rbx,4), %edx
 1796 0054 8D1C12   		leal	(%rdx,%rdx), %ebx
 1797              	.LVL205:
 1798 0057 83C001   		addl	$1, %eax
 1799              	.LVL206:
 1800              	.L32:
 1801              		.loc 1 322 0 is_stmt 0 discriminator 1
 1802 005a 38C8     		cmpb	%cl, %al
 1803 005c 72F3     		jb	.L33
 323:src/main.c    ****     print_int(i_part, __putchar);
 1804              		.loc 1 323 0 is_stmt 1
 1805 005e 4889EE   		movq	%rbp, %rsi
 1806              	.LVL207:
 1807 0061 E8000000 		call	print_int
 1807      00
 1808              	.LVL208:
 324:src/main.c    ****     __putchar('.');
 1809              		.loc 1 324 0
 1810 0066 BF2E0000 		movl	$46, %edi
 1810      00
 1811 006b FFD5     		call	*%rbp
 1812              	.LVL209:
 325:src/main.c    ****     print_int((unsigned)(f_part * mul), __putchar);
 1813              		.loc 1 325 0
 1814 006d 89DB     		movl	%ebx, %ebx
 1815 006f 660FEFC0 		pxor	%xmm0, %xmm0
 1816 0073 F3480F2A 		cvtsi2ssq	%rbx, %xmm0
 1816      C3
 1817 0078 F30F5944 		mulss	12(%rsp), %xmm0
 1817      240C
 1818 007e F3480F2C 		cvttss2siq	%xmm0, %rdi
 1818      F8
 1819 0083 4889EE   		movq	%rbp, %rsi
 1820 0086 E8000000 		call	print_int
 1820      00
 1821              	.LVL210:
 326:src/main.c    **** }
 1822              		.loc 1 326 0
 1823 008b 4883C418 		addq	$24, %rsp
 1824              	.LCFI73:
 1825              		.cfi_def_cfa_offset 24
 1826 008f 5B       		popq	%rbx
 1827              	.LCFI74:
 1828              		.cfi_def_cfa_offset 16
 1829              	.LVL211:
 1830 0090 5D       		popq	%rbp
 1831              	.LCFI75:
 1832              		.cfi_def_cfa_offset 8
 1833              	.LVL212:
GAS LISTING /tmp/cc4D9KId.s 			page 56


 1834 0091 C3       		ret
 1835              		.cfi_endproc
 1836              	.LFE70:
 1838              		.globl	test_str1
 1839              		.section	.data.test_str1,"aw",@progbits
 1840              		.align 32
 1843              	test_str1:
 1844 0000 23746573 		.string	"#test_msg{<CMD1>\t\t @obj1($key11=-1123334567  ; $key12 = 'string \"value\"')\n\r@obj2  (
 1844      745F6D73 
 1844      677B3C43 
 1844      4D44313E 
 1844      09092040 
 1845              		.section	.rodata.cst4,"aM",@progbits,4
 1846              		.align 4
 1847              	.LC58:
 1848 0000 10069E3F 		.long	1067320848
 1849              		.align 4
 1850              	.LC62:
 1851 0004 9643ABBE 		.long	3198894998
 1852              		.section	.rodata.cst8,"aM",@progbits,8
 1853              		.align 8
 1854              	.LC77:
 1855 0000 00000000 		.long	0
 1856 0004 80842E41 		.long	1093567616
 1857              		.section	.rodata.cst16,"aM",@progbits,16
 1858              		.align 16
 1859              	.LC79:
 1860 0000 00000080 		.long	2147483648
 1861 0004 00000000 		.long	0
 1862 0008 00000000 		.long	0
 1863 000c 00000000 		.long	0
 1864              		.text
 1865              	.Letext0:
 1866              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 1867              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1868              		.file 6 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 1869              		.file 7 "/usr/include/stdio.h"
 1870              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1871              		.file 9 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 1872              		.file 10 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 1873              		.file 11 "/usr/include/time.h"
 1874              		.file 12 "/usr/include/unistd.h"
 1875              		.file 13 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h"
 1876              		.file 14 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 1877              		.file 15 "inc/mcu_msg_cfg.h"
 1878              		.file 16 "inc/mcu_msg.h"
 1879              		.file 17 "<built-in>"
GAS LISTING /tmp/cc4D9KId.s 			page 57


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4D9KId.s:191    .text.main:0000000000000000 main
     /tmp/cc4D9KId.s:1843   .data.test_str1:0000000000000000 test_str1
     /tmp/cc4D9KId.s:1607   .text.print_int:0000000000000000 print_int
     /tmp/cc4D9KId.s:1743   .text.print_float:0000000000000000 print_float
     /tmp/cc4D9KId.s:9      .rodata.main.str1.1:000000000000000b .LC2
     /tmp/cc4D9KId.s:11     .rodata.main.str1.1:000000000000001f .LC3
     /tmp/cc4D9KId.s:13     .rodata.main.str1.1:0000000000000033 .LC4
     /tmp/cc4D9KId.s:15     .rodata.main.str1.1:0000000000000046 .LC5
     /tmp/cc4D9KId.s:17     .rodata.main.str1.1:000000000000005d .LC6
     /tmp/cc4D9KId.s:21     .rodata.main.str1.8:0000000000000000 .LC7
     /tmp/cc4D9KId.s:24     .rodata.main.str1.1:0000000000000066 .LC8
     /tmp/cc4D9KId.s:28     .rodata.main.str1.1:000000000000007c .LC10
     /tmp/cc4D9KId.s:30     .rodata.main.str1.1:0000000000000093 .LC11
     /tmp/cc4D9KId.s:5      .rodata.main.str1.1:0000000000000000 .LC0
     /tmp/cc4D9KId.s:32     .rodata.main.str1.1:0000000000000098 .LC12
     /tmp/cc4D9KId.s:34     .rodata.main.str1.1:000000000000009d .LC13
     /tmp/cc4D9KId.s:36     .rodata.main.str1.1:00000000000000b4 .LC14
     /tmp/cc4D9KId.s:38     .rodata.main.str1.1:00000000000000b9 .LC15
     /tmp/cc4D9KId.s:40     .rodata.main.str1.1:00000000000000d4 .LC16
     /tmp/cc4D9KId.s:42     .rodata.main.str1.1:00000000000000dd .LC17
     /tmp/cc4D9KId.s:44     .rodata.main.str1.1:00000000000000f0 .LC18
     /tmp/cc4D9KId.s:48     .rodata.main.str1.8:0000000000000028 .LC19
     /tmp/cc4D9KId.s:51     .rodata.main.str1.1:00000000000000f5 .LC20
     /tmp/cc4D9KId.s:53     .rodata.main.str1.1:0000000000000108 .LC21
     /tmp/cc4D9KId.s:57     .rodata.main.str1.8:0000000000000050 .LC22
     /tmp/cc4D9KId.s:60     .rodata.main.str1.8:0000000000000078 .LC23
     /tmp/cc4D9KId.s:63     .rodata.main.str1.1:000000000000010d .LC25
     /tmp/cc4D9KId.s:65     .rodata.main.str1.1:0000000000000113 .LC26
     /tmp/cc4D9KId.s:69     .rodata.main.str1.8:00000000000000a0 .LC27
     /tmp/cc4D9KId.s:72     .rodata.main.str1.1:0000000000000126 .LC28
     /tmp/cc4D9KId.s:74     .rodata.main.str1.1:000000000000012c .LC29
     /tmp/cc4D9KId.s:78     .rodata.main.str1.8:00000000000000c0 .LC30
     /tmp/cc4D9KId.s:81     .rodata.main.str1.1:0000000000000142 .LC31
     /tmp/cc4D9KId.s:83     .rodata.main.str1.1:0000000000000148 .LC32
     /tmp/cc4D9KId.s:87     .rodata.main.str1.1:0000000000000169 .LC34
     /tmp/cc4D9KId.s:89     .rodata.main.str1.1:000000000000017e .LC35
     /tmp/cc4D9KId.s:91     .rodata.main.str1.1:0000000000000193 .LC36
     /tmp/cc4D9KId.s:93     .rodata.main.str1.1:000000000000019f .LC37
     /tmp/cc4D9KId.s:95     .rodata.main.str1.1:00000000000001b2 .LC38
     /tmp/cc4D9KId.s:97     .rodata.main.str1.1:00000000000001bf .LC39
     /tmp/cc4D9KId.s:99     .rodata.main.str1.1:00000000000001d2 .LC40
     /tmp/cc4D9KId.s:101    .rodata.main.str1.1:00000000000001e5 .LC41
     /tmp/cc4D9KId.s:103    .rodata.main.str1.1:00000000000001ea .LC42
     /tmp/cc4D9KId.s:105    .rodata.main.str1.1:00000000000001fd .LC43
     /tmp/cc4D9KId.s:107    .rodata.main.str1.1:0000000000000210 .LC44
     /tmp/cc4D9KId.s:109    .rodata.main.str1.1:0000000000000215 .LC45
     /tmp/cc4D9KId.s:111    .rodata.main.str1.1:0000000000000225 .LC46
     /tmp/cc4D9KId.s:115    .rodata.main.str1.8:00000000000000e8 .LC47
     /tmp/cc4D9KId.s:118    .rodata.main.str1.8:0000000000000118 .LC48
     /tmp/cc4D9KId.s:121    .rodata.main.str1.1:000000000000022a .LC49
     /tmp/cc4D9KId.s:123    .rodata.main.str1.1:0000000000000233 .LC50
     /tmp/cc4D9KId.s:125    .rodata.main.str1.1:0000000000000246 .LC51
     /tmp/cc4D9KId.s:127    .rodata.main.str1.1:0000000000000249 .LC52
     /tmp/cc4D9KId.s:129    .rodata.main.str1.1:0000000000000258 .LC53
     /tmp/cc4D9KId.s:131    .rodata.main.str1.1:000000000000025b .LC54
GAS LISTING /tmp/cc4D9KId.s 			page 58


     /tmp/cc4D9KId.s:133    .rodata.main.str1.1:000000000000026e .LC55
     /tmp/cc4D9KId.s:135    .rodata.main.str1.1:0000000000000274 .LC56
     /tmp/cc4D9KId.s:1847   .rodata.cst4:0000000000000000 .LC58
     /tmp/cc4D9KId.s:137    .rodata.main.str1.1:0000000000000277 .LC57
     /tmp/cc4D9KId.s:139    .rodata.main.str1.1:000000000000027a .LC59
     /tmp/cc4D9KId.s:141    .rodata.main.str1.1:000000000000028f .LC60
     /tmp/cc4D9KId.s:1850   .rodata.cst4:0000000000000004 .LC62
     /tmp/cc4D9KId.s:143    .rodata.main.str1.1:0000000000000297 .LC61
     /tmp/cc4D9KId.s:145    .rodata.main.str1.1:000000000000029a .LC63
     /tmp/cc4D9KId.s:149    .rodata.main.str1.8:0000000000000148 .LC64
     /tmp/cc4D9KId.s:152    .rodata.main.str1.8:0000000000000188 .LC65
     /tmp/cc4D9KId.s:155    .rodata.main.str1.8:00000000000001b0 .LC66
     /tmp/cc4D9KId.s:158    .rodata.main.str1.8:00000000000001e0 .LC67
     /tmp/cc4D9KId.s:161    .rodata.main.str1.8:0000000000000210 .LC68
     /tmp/cc4D9KId.s:164    .rodata.main.str1.8:0000000000000238 .LC69
     /tmp/cc4D9KId.s:167    .rodata.main.str1.8:0000000000000260 .LC70
     /tmp/cc4D9KId.s:170    .rodata.main.str1.8:0000000000000288 .LC71
     /tmp/cc4D9KId.s:173    .rodata.main.str1.8:00000000000002b0 .LC72
     /tmp/cc4D9KId.s:176    .rodata.main.str1.8:00000000000002e0 .LC73
     /tmp/cc4D9KId.s:179    .rodata.main.str1.8:0000000000000310 .LC74
     /tmp/cc4D9KId.s:182    .rodata.main.str1.1:00000000000002a7 .LC75
     /tmp/cc4D9KId.s:184    .rodata.main.str1.1:00000000000002b8 .LC76
     /tmp/cc4D9KId.s:1854   .rodata.cst8:0000000000000000 .LC77
     /tmp/cc4D9KId.s:186    .rodata.main.str1.1:00000000000002c9 .LC78
     /tmp/cc4D9KId.s:26     .rodata.main.str1.1:0000000000000068 .LC9
     /tmp/cc4D9KId.s:7      .rodata.main.str1.1:0000000000000005 .LC1
     /tmp/cc4D9KId.s:85     .rodata.main.str1.1:0000000000000153 .LC33
     /tmp/cc4D9KId.s:1859   .rodata.cst16:0000000000000000 .LC79

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
clock
putchar
msg_hnd_create
puts
__printf_chk
msg_get
msg_parser_get_cmd
msg_parser_get_obj
msg_parser_get_int
msg_parser_get_float
msg_parser_get_string
msg_wrapper_init_msg
msg_wrapper_init_obj
msg_wrapper_init_string
stdout
_IO_putc
msg_wrapper_add_string_to_obj
msg_wrapper_add_object_to_msg
msg_wrapper_init_cmd
msg_wrapper_init_int
msg_wrapper_init_float
msg_wrapper_add_int_to_obj
msg_wrapper_add_float_to_obj
msg_wrapper_add_cmd_to_msg
msg_wrapper_rm_string_from_obj
msg_wrapper_rm_float_from_obj
GAS LISTING /tmp/cc4D9KId.s 			page 59


msg_wrapper_rm_int_from_obj
msg_wrapper_rm_obj_from_msg
msg_wrapper_rm_cmd_from_msg
__stack_chk_fail
